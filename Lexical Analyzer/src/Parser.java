
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.HashMap;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\025\003\000\002\025" +
    "\003\000\002\026\006\000\002\026\004\000\002\027\003" +
    "\000\002\027\002\000\002\007\005\000\002\007\003\000" +
    "\002\053\003\000\002\053\002\000\002\052\006\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\023\004\000\002\023\004\000\002\010" +
    "\005\000\002\010\003\000\002\011\006\000\002\012\006" +
    "\000\002\014\003\000\002\014\004\000\002\015\007\000" +
    "\002\016\010\000\002\017\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\006\000\002\021" +
    "\002\000\002\022\004\000\002\022\006\000\002\022\010" +
    "\000\002\030\006\000\002\031\003\000\002\031\002\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\005\000\002\033\005\000\002\034\003\000\002\034\003" +
    "\000\002\035\004\000\002\035\005\000\002\035\003\000" +
    "\002\035\005\000\002\036\012\000\002\054\002\000\002" +
    "\036\011\000\002\037\007\000\002\037\005\000\002\040" +
    "\011\000\002\055\002\000\002\040\010\000\002\024\004" +
    "\000\002\024\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\013\003" +
    "\000\002\013\003\000\002\043\011\000\002\056\002\000" +
    "\002\043\010\000\002\044\015\000\002\057\002\000\002" +
    "\044\010\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\004\000\002\046\004" +
    "\000\002\046\003\000\002\046\002\000\002\047\003\000" +
    "\002\047\004\000\002\047\003\000\002\050\012\000\002" +
    "\060\002\000\002\050\013\000\002\051\003\000\002\051" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\020\002\uff8a\003\011\004\005\005\014\006" +
    "\006\007\015\010\010\001\002\000\004\002\344\001\002" +
    "\000\006\063\ufff5\065\ufff5\001\002\000\006\063\ufff3\065" +
    "\ufff3\001\002\000\020\002\uff91\003\011\004\005\005\014" +
    "\006\006\007\015\010\010\001\002\000\006\063\ufff1\065" +
    "\ufff1\001\002\000\004\002\uff8f\001\002\000\004\002\uff8b" +
    "\001\002\000\006\063\017\065\020\001\002\000\006\063" +
    "\ufff4\065\ufff4\001\002\000\006\063\ufff2\065\ufff2\001\002" +
    "\000\004\023\021\001\002\000\004\023\uffff\001\002\000" +
    "\004\023\000\001\002\000\020\003\023\004\005\005\014" +
    "\006\006\007\015\010\010\024\ufffb\001\002\000\004\024" +
    "\ufffc\001\002\000\004\024\uff8d\001\002\000\004\063\333" +
    "\001\002\000\004\024\026\001\002\000\004\016\027\001" +
    "\002\000\044\003\056\004\005\005\014\006\006\007\015" +
    "\010\010\017\uff92\046\042\050\033\051\061\052\041\055" +
    "\054\056\036\061\055\062\030\063\060\065\020\001\002" +
    "\000\004\023\325\001\002\000\004\064\uffce\001\002\000" +
    "\004\063\312\001\002\000\006\003\300\023\277\001\002" +
    "\000\004\064\uffa6\001\002\000\004\023\273\001\002\000" +
    "\022\011\111\012\112\013\110\014\113\015\117\063\121" +
    "\064\uffad\065\020\001\002\000\050\003\uff98\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\017\uff98\046\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\061" +
    "\uff98\062\uff98\063\uff98\065\uff98\001\002\000\050\003\056" +
    "\004\005\005\014\006\006\007\015\010\010\017\uff92\046" +
    "\042\050\033\051\061\052\041\053\uff92\054\uff92\055\054" +
    "\056\036\061\055\062\030\063\060\065\020\001\002\000" +
    "\006\003\247\023\246\001\002\000\006\003\225\023\224" +
    "\001\002\000\004\064\uffcf\001\002\000\004\064\223\001" +
    "\002\000\004\064\uffcd\001\002\000\004\064\uffa9\001\002" +
    "\000\004\064\uffa3\001\002\000\004\064\uffa8\001\002\000" +
    "\004\064\uffa4\001\002\000\004\064\uffaa\001\002\000\004" +
    "\064\uffa7\001\002\000\004\064\uffa5\001\002\000\004\023" +
    "\220\001\002\000\012\017\uff93\053\uff93\054\uff93\064\uffa2" +
    "\001\002\000\050\003\uff96\004\uff96\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\017\uff96\046\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\061\uff96\062\uff96\063" +
    "\uff96\065\uff96\001\002\000\030\020\157\022\160\023\uffff" +
    "\025\101\026\107\027\103\030\104\031\100\032\106\033" +
    "\155\034\156\001\002\000\006\003\067\023\066\001\002" +
    "\000\004\017\065\001\002\000\050\003\uff99\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\017\uff99\046\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\061" +
    "\uff99\062\uff99\063\uff99\065\uff99\001\002\000\050\003\uff97" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\017\uff97\046" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\056\uff97\061\uff97\062\uff97\063\uff97\065\uff97\001\002\000" +
    "\020\002\uff8e\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\001\002\000\004\063\075\001\002\000\004\016" +
    "\uff9b\001\002\000\004\016\071\001\002\000\044\003\056" +
    "\004\005\005\014\006\006\007\015\010\010\017\uff92\046" +
    "\042\050\033\051\061\052\041\055\054\056\036\061\055" +
    "\062\030\063\060\065\020\001\002\000\004\017\073\001" +
    "\002\000\050\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\017\uff9a\046\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\065\uff9a\001\002\000\004\060\142\001\002\000\022\022" +
    "\105\025\101\026\107\027\103\030\104\031\100\032\106" +
    "\060\uffa0\001\002\000\004\060\uffa1\001\002\000\004\022" +
    "\141\001\002\000\022\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\022\uffde\063\uffde\065\uffde\001\002\000\022\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\022\uffe3\063\uffe3" +
    "\065\uffe3\001\002\000\022\011\111\012\112\013\110\014" +
    "\113\015\117\023\122\063\121\065\020\001\002\000\022" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\022\uffe1\063" +
    "\uffe1\065\uffe1\001\002\000\022\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\022\uffdf\063\uffdf\065\uffdf\001\002\000" +
    "\024\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\023\uffd4" +
    "\045\uffd4\063\uffd4\065\uffd4\001\002\000\022\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\022\uffe0\063\uffe0\065\uffe0" +
    "\001\002\000\022\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\022\uffe2\063\uffe2\065\uffe2\001\002\000\052\017\uffec" +
    "\021\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\057\uffec\060\uffec\064\uffec\001" +
    "\002\000\052\017\ufff0\021\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\057\ufff0" +
    "\060\ufff0\064\ufff0\001\002\000\052\017\uffef\021\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\057\uffef\060\uffef\064\uffef\001\002\000\052" +
    "\017\uffee\021\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\057\uffee\060\uffee\064" +
    "\uffee\001\002\000\050\017\uffdb\021\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb" +
    "\060\uffdb\064\uffdb\001\002\000\050\017\uffdc\021\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\060\uffdc\064\uffdc\001\002\000\024\024\uffd0" +
    "\025\130\026\124\027\125\030\127\031\126\032\131\060" +
    "\uffd0\064\uffd0\001\002\000\052\017\uffed\021\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\057\uffed\060\uffed\064\uffed\001\002\000\024\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\060\uffe4\064\uffe4\001\002\000\052\017\uffdd\021\uffdd\023" +
    "\uffff\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\060\uffdd\064\uffdd\001\002\000\022" +
    "\011\111\012\112\013\110\014\113\015\117\023\122\063" +
    "\121\065\020\001\002\000\020\024\132\025\130\026\124" +
    "\027\125\030\127\031\126\032\131\001\002\000\022\011" +
    "\111\012\112\013\110\014\113\015\117\023\122\063\121" +
    "\065\020\001\002\000\022\011\111\012\112\013\110\014" +
    "\113\015\117\023\122\063\121\065\020\001\002\000\022" +
    "\011\111\012\112\013\110\014\113\015\117\023\122\063" +
    "\121\065\020\001\002\000\022\011\111\012\112\013\110" +
    "\014\113\015\117\023\122\063\121\065\020\001\002\000" +
    "\022\011\111\012\112\013\110\014\113\015\117\023\122" +
    "\063\121\065\020\001\002\000\022\011\111\012\112\013" +
    "\110\014\113\015\117\023\122\063\121\065\020\001\002" +
    "\000\024\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\060\uffe5\064\uffe5\001\002\000\024\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\126\032\uffe8\060" +
    "\uffe8\064\uffe8\001\002\000\024\024\uffeb\025\uffeb\026\uffeb" +
    "\027\125\030\127\031\126\032\131\060\uffeb\064\uffeb\001" +
    "\002\000\024\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\126\032\uffe7\060\uffe7\064\uffe7\001\002\000\024\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\126\032\uffe6" +
    "\060\uffe6\064\uffe6\001\002\000\024\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\126\032\uffe9\060\uffe9\064\uffe9" +
    "\001\002\000\024\024\uffea\025\uffea\026\uffea\027\125\030" +
    "\127\031\126\032\131\060\uffea\064\uffea\001\002\000\024" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\023\uffd3\045" +
    "\uffd3\063\uffd3\065\uffd3\001\002\000\022\011\111\012\112" +
    "\013\110\014\113\015\117\023\122\063\121\065\020\001" +
    "\002\000\020\025\130\026\124\027\125\030\127\031\126" +
    "\032\131\060\144\001\002\000\004\063\145\001\002\000" +
    "\024\022\105\025\101\026\107\027\103\030\104\031\100" +
    "\032\106\033\155\034\156\001\002\000\004\024\uffab\001" +
    "\002\000\004\024\uffac\001\002\000\004\024\151\001\002" +
    "\000\004\016\152\001\002\000\044\003\056\004\005\005" +
    "\014\006\006\007\015\010\010\017\uff92\046\042\050\033" +
    "\051\061\052\041\055\054\056\036\061\055\062\030\063" +
    "\060\065\020\001\002\000\004\017\154\001\002\000\050" +
    "\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\017" +
    "\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c\065\uff9c\001" +
    "\002\000\006\024\uffda\064\uffda\001\002\000\006\024\uffd9" +
    "\064\uffd9\001\002\000\020\011\111\012\112\013\110\014" +
    "\113\015\117\063\121\065\020\001\002\000\024\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\161\023\uffd4\063" +
    "\uffd4\065\uffd4\001\002\000\020\011\111\012\112\013\110" +
    "\014\113\015\117\063\121\065\020\001\002\000\004\017" +
    "\166\001\002\000\010\017\ufff9\024\ufff9\060\164\001\002" +
    "\000\020\011\111\012\112\013\110\014\113\015\117\063" +
    "\121\065\020\001\002\000\006\017\ufffa\024\ufffa\001\002" +
    "\000\004\064\uffd2\001\002\000\004\021\170\001\002\000" +
    "\020\022\105\025\101\026\107\027\103\030\104\031\100" +
    "\032\106\001\002\000\024\011\111\012\112\013\110\014" +
    "\113\015\117\023\173\045\174\063\121\065\020\001\002" +
    "\000\010\043\213\044\214\064\uffd1\001\002\000\024\011" +
    "\111\012\112\013\110\014\113\015\117\023\173\045\174" +
    "\063\121\065\020\001\002\000\024\011\111\012\112\013" +
    "\110\014\113\015\117\023\173\045\174\063\121\065\020" +
    "\001\002\000\032\025\101\026\107\027\103\030\104\031" +
    "\100\032\106\035\201\036\206\037\204\040\202\041\200" +
    "\042\205\001\002\000\012\024\uffb8\043\uffb8\044\uffb8\064" +
    "\uffb8\001\002\000\020\011\111\012\112\013\110\014\113" +
    "\015\117\063\121\065\020\001\002\000\020\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\063\uffc0\065\uffc0\001\002" +
    "\000\020\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\063" +
    "\uffc4\065\uffc4\001\002\000\020\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\063\uffc1\065\uffc1\001\002\000\020\011" +
    "\111\012\112\013\110\014\113\015\117\063\121\065\020" +
    "\001\002\000\020\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\063\uffc2\065\uffc2\001\002\000\020\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\063\uffbf\065\uffbf\001\002\000" +
    "\020\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\063\uffc3" +
    "\065\uffc3\001\002\000\012\024\uffbe\043\uffbe\044\uffbe\064" +
    "\uffbe\001\002\000\012\024\uffbd\043\uffbd\044\uffbd\064\uffbd" +
    "\001\002\000\012\024\uffba\043\uffba\044\uffba\064\uffba\001" +
    "\002\000\024\011\111\012\112\013\110\014\113\015\117" +
    "\023\173\045\174\063\121\065\020\001\002\000\024\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\023\uffbc\045\uffbc" +
    "\063\uffbc\065\uffbc\001\002\000\024\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\023\uffbb\045\uffbb\063\uffbb\065\uffbb" +
    "\001\002\000\012\024\uffb9\043\213\044\214\064\uffb9\001" +
    "\002\000\010\024\217\043\213\044\214\001\002\000\012" +
    "\024\uffb7\043\uffb7\044\uffb7\064\uffb7\001\002\000\020\011" +
    "\111\012\112\013\110\014\113\015\117\063\121\065\020" +
    "\001\002\000\004\024\222\001\002\000\004\064\uffd6\001" +
    "\002\000\050\003\uff95\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\017\uff95\046\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\061\uff95\062\uff95\063\uff95" +
    "\065\uff95\001\002\000\024\011\111\012\112\013\110\014" +
    "\113\015\117\023\173\045\174\063\121\065\020\001\002" +
    "\000\004\016\uffb5\001\002\000\004\016\227\001\002\000" +
    "\044\003\056\004\005\005\014\006\006\007\015\010\010" +
    "\017\uff92\046\042\050\033\051\061\052\041\055\054\056" +
    "\036\061\055\062\030\063\060\065\020\001\002\000\004" +
    "\017\231\001\002\000\052\003\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\017\uffc5\046\uffc5\047\233\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\065\uffc5\001\002\000\050\003\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\017\uffc6\046" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\061\uffc6\062\uffc6\063\uffc6\065\uffc6\001\002\000" +
    "\004\016\235\001\002\000\050\003\uffb4\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\017\uffb4\046\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\065\uffb4\001\002\000\044\003\056\004" +
    "\005\005\014\006\006\007\015\010\010\017\uff92\046\042" +
    "\050\033\051\061\052\041\055\054\056\036\061\055\062" +
    "\030\063\060\065\020\001\002\000\004\017\237\001\002" +
    "\000\050\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\017\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7\065" +
    "\uffc7\001\002\000\010\024\241\043\213\044\214\001\002" +
    "\000\004\016\242\001\002\000\044\003\056\004\005\005" +
    "\014\006\006\007\015\010\010\017\uff92\046\042\050\033" +
    "\051\061\052\041\055\054\056\036\061\055\062\030\063" +
    "\060\065\020\001\002\000\004\017\244\001\002\000\052" +
    "\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\017" +
    "\uffc5\046\uffc5\047\233\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\061\uffc5\062\uffc5\063\uffc5\065" +
    "\uffc5\001\002\000\050\003\uffb6\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\017\uffb6\046\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\065\uffb6\001\002\000\020\011\111\012\112\013" +
    "\110\014\113\015\117\063\121\065\020\001\002\000\004" +
    "\016\uffb0\001\002\000\004\016\251\001\002\000\006\053" +
    "\254\054\252\001\002\000\004\057\262\001\002\000\004" +
    "\017\261\001\002\000\014\011\111\012\112\013\110\014" +
    "\113\015\117\001\002\000\004\057\256\001\002\000\046" +
    "\003\056\004\005\005\014\006\006\007\015\010\010\046" +
    "\042\050\033\051\061\052\041\053\uff92\054\uff92\055\054" +
    "\056\036\061\055\062\030\063\060\065\020\001\002\000" +
    "\006\053\254\054\252\001\002\000\004\017\uffb3\001\002" +
    "\000\050\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\017\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\061\uffaf\062\uffaf\063\uffaf\065" +
    "\uffaf\001\002\000\044\003\056\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff92\046\042\050\033\051\061\052" +
    "\041\055\054\056\036\061\055\062\030\063\060\065\020" +
    "\001\002\000\004\017\uffb2\001\002\000\004\024\265\001" +
    "\002\000\004\016\266\001\002\000\006\053\254\054\252" +
    "\001\002\000\004\017\270\001\002\000\050\003\uffb1\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\017\uffb1\046\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\065\uffb1\001\002\000\010" +
    "\017\uff94\053\uff94\054\uff94\001\002\000\004\064\uffae\001" +
    "\002\000\022\011\111\012\112\013\110\014\113\015\117" +
    "\024\ufff7\063\121\065\020\001\002\000\004\024\276\001" +
    "\002\000\004\024\ufff8\001\002\000\050\017\ufff6\021\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\060\ufff6\064\ufff6\001\002\000\024\011" +
    "\111\012\112\013\110\014\113\015\117\023\173\045\174" +
    "\063\121\065\020\001\002\000\004\016\uff9e\001\002\000" +
    "\004\016\302\001\002\000\044\003\056\004\005\005\014" +
    "\006\006\007\015\010\010\017\uff92\046\042\050\033\051" +
    "\061\052\041\055\054\056\036\061\055\062\030\063\060" +
    "\065\020\001\002\000\004\017\304\001\002\000\050\003" +
    "\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\017\uff9d" +
    "\046\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\056\uff9d\061\uff9d\062\uff9d\063\uff9d\065\uff9d\001\002" +
    "\000\010\024\306\043\213\044\214\001\002\000\004\016" +
    "\307\001\002\000\044\003\056\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff92\046\042\050\033\051\061\052" +
    "\041\055\054\056\036\061\055\062\030\063\060\065\020" +
    "\001\002\000\004\017\311\001\002\000\050\003\uff9f\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\017\uff9f\046\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\065\uff9f\001\002\000\010" +
    "\020\314\022\313\064\uffca\001\002\000\024\011\111\012" +
    "\112\013\110\014\113\015\117\023\173\045\174\063\121" +
    "\065\020\001\002\000\020\011\111\012\112\013\110\014" +
    "\113\015\117\063\121\065\020\001\002\000\004\021\316" +
    "\001\002\000\006\022\317\064\uffcb\001\002\000\004\016" +
    "\321\001\002\000\004\064\uffc8\001\002\000\020\011\111" +
    "\012\112\013\110\014\113\015\117\063\121\065\020\001" +
    "\002\000\004\017\323\001\002\000\004\064\uffcc\001\002" +
    "\000\010\043\213\044\214\064\uffc9\001\002\000\004\063" +
    "\326\001\002\000\006\024\uffd7\060\331\001\002\000\004" +
    "\024\330\001\002\000\004\064\uffd5\001\002\000\004\063" +
    "\326\001\002\000\004\024\uffd8\001\002\000\006\024\ufffd" +
    "\060\334\001\002\000\014\004\005\005\014\006\006\007" +
    "\015\010\010\001\002\000\004\024\ufffe\001\002\000\004" +
    "\024\337\001\002\000\004\016\340\001\002\000\044\003" +
    "\056\004\005\005\014\006\006\007\015\010\010\017\uff92" +
    "\046\042\050\033\051\061\052\041\055\054\056\036\061" +
    "\055\062\030\063\060\065\020\001\002\000\004\017\342" +
    "\001\002\000\020\002\uff8c\003\uff8c\004\uff8c\005\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\001\002\000\004\002\uff90\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\012\002\012\047\011\050\006\051\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\012\047\342\050\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\023" +
    "\026\021\027\024\001\001\000\002\001\001\000\004\060" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\031\011\033\012\052\015\030\016" +
    "\044\017\042\020\047\022\045\023\051\024\046\025\034" +
    "\036\062\040\056\042\043\043\036\044\063\045\037\046" +
    "\061\052\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\114\005\271\025\034\052\113" +
    "\001\001\000\002\001\001\000\050\002\031\011\033\012" +
    "\052\015\030\016\044\017\042\020\047\022\045\023\051" +
    "\024\046\025\034\036\062\040\056\042\043\043\036\044" +
    "\063\045\037\046\270\052\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\076\014\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\073\017\075\001" +
    "\001\000\004\057\067\001\001\000\002\001\001\000\050" +
    "\002\031\011\033\012\052\015\030\016\044\017\042\020" +
    "\047\022\045\023\051\024\046\025\034\036\062\040\056" +
    "\042\043\043\036\044\063\045\037\046\071\052\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\076\014\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\114\005\117\006\115\025\034\052\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\114\005\117" +
    "\006\122\025\034\052\113\001\001\000\002\001\001\000" +
    "\014\003\114\005\117\006\137\025\034\052\113\001\001" +
    "\000\014\003\114\005\117\006\136\025\034\052\113\001" +
    "\001\000\014\003\114\005\117\006\135\025\034\052\113" +
    "\001\001\000\014\003\114\005\117\006\134\025\034\052" +
    "\113\001\001\000\014\003\114\005\117\006\133\025\034" +
    "\052\113\001\001\000\014\003\114\005\117\006\132\025" +
    "\034\052\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\114\005\117\006\142\025\034\052\113\001\001\000" +
    "\002\001\001\000\010\017\145\023\146\041\147\001\001" +
    "\000\006\004\076\014\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\002\031\011\033\012\052\015\030\016\044\017\042\020" +
    "\047\022\045\023\051\024\046\025\034\036\062\040\056" +
    "\042\043\043\036\044\063\045\037\046\152\052\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\114\005\166\025\034\052" +
    "\113\001\001\000\002\001\001\000\014\003\114\005\162" +
    "\007\161\025\034\052\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\114\005\162\007\164\025\034" +
    "\052\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\076\014\170\001\001\000\016" +
    "\003\114\005\174\025\034\033\175\035\171\052\113\001" +
    "\001\000\004\034\211\001\001\000\016\003\114\005\174" +
    "\025\034\033\175\035\215\052\113\001\001\000\016\003" +
    "\114\005\174\025\034\033\175\035\210\052\113\001\001" +
    "\000\006\004\176\032\202\001\001\000\002\001\001\000" +
    "\012\003\114\005\207\025\034\052\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\114\005\206\025\034\052\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\211\001\001\000\016\003\114" +
    "\005\174\025\034\033\175\035\214\052\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\211\001\001" +
    "\000\004\034\211\001\001\000\002\001\001\000\014\003" +
    "\114\005\162\007\220\025\034\052\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\114\005\174\025\034\033\175\035\237\052\113\001\001" +
    "\000\004\054\225\001\001\000\002\001\001\000\050\002" +
    "\031\011\033\012\052\015\030\016\044\017\042\020\047" +
    "\022\045\023\051\024\046\025\034\036\062\040\056\042" +
    "\043\043\036\044\063\045\037\046\227\052\050\001\001" +
    "\000\002\001\001\000\006\030\231\031\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\002\031\011\033\012\052\015\030\016\044\017\042\020" +
    "\047\022\045\023\051\024\046\025\034\036\062\040\056" +
    "\042\043\043\036\044\063\045\037\046\235\052\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\211" +
    "\001\001\000\002\001\001\000\050\002\031\011\033\012" +
    "\052\015\030\016\044\017\042\020\047\022\045\023\051" +
    "\024\046\025\034\036\062\040\056\042\043\043\036\044" +
    "\063\045\037\046\242\052\050\001\001\000\002\001\001" +
    "\000\006\030\231\031\244\001\001\000\002\001\001\000" +
    "\012\003\114\005\263\025\034\052\113\001\001\000\004" +
    "\055\247\001\001\000\002\001\001\000\004\037\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\254" +
    "\001\001\000\002\001\001\000\050\002\031\011\033\012" +
    "\052\015\030\016\044\017\042\020\047\022\045\023\051" +
    "\024\046\025\034\036\062\040\056\042\043\043\036\044" +
    "\063\045\037\046\256\052\050\001\001\000\004\037\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\002" +
    "\031\011\033\012\052\015\030\016\044\017\042\020\047" +
    "\022\045\023\051\024\046\025\034\036\062\040\056\042" +
    "\043\043\036\044\063\045\037\046\262\052\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\114\005" +
    "\162\007\274\025\034\052\113\053\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\114\005\174\025\034\033\175\035\304\052\113\001\001" +
    "\000\004\056\300\001\001\000\002\001\001\000\050\002" +
    "\031\011\033\012\052\015\030\016\044\017\042\020\047" +
    "\022\045\023\051\024\046\025\034\036\062\040\056\042" +
    "\043\043\036\044\063\045\037\046\302\052\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\211\001" +
    "\001\000\002\001\001\000\050\002\031\011\033\012\052" +
    "\015\030\016\044\017\042\020\047\022\045\023\051\024" +
    "\046\025\034\036\062\040\056\042\043\043\036\044\063" +
    "\045\037\046\307\052\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\114\005\174" +
    "\025\034\033\175\035\323\052\113\001\001\000\012\003" +
    "\114\005\314\025\034\052\113\001\001\000\002\001\001" +
    "\000\004\021\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\114\005\162\007\321\025\034\052\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\211\001\001\000\004\010\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\023" +
    "\026\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\002\031\011\033\012\052\015\030" +
    "\016\044\017\042\020\047\022\045\023\051\024\046\025" +
    "\034\036\062\040\056\042\043\043\036\044\063\045\037" +
    "\046\340\052\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
    private Lexer scanner;
    private HashMap<String, ArrayList<String>> listaTablasSimbolos;
    private String currentHash;
    private BufferedWriter outputFile;

    public Parser(Lexer scanner) {
        this.scanner = scanner;
        this.listaTablasSimbolos = new HashMap<>();
        this.currentHash = "";
    }

    public void setSymbolTable(HashMap<String, ArrayList<String>> tablaSimbolos) {
        this.listaTablasSimbolos = tablaSimbolos;
    }

    private void agregarSimbolo(String tipoTabla, String identificador, String tipo) {
        ArrayList<String> nuevaEntrada = listaTablasSimbolos.getOrDefault(currentHash, new ArrayList<>());

        // Verificar si ya existe el símbolo en el ámbito actual
        for (String simbolo : nuevaEntrada) {
            if (simbolo.contains("identificador:" + identificador)) {
                System.err.println("Error: Identificador " + identificador + " ya existe en el ámbito " + currentHash);
                return;
            }
        }

        // Agregar símbolo si no existe
        nuevaEntrada.add("tipo:" + tipoTabla + " identificador:" + identificador + " tipo_dato:" + tipo);
        listaTablasSimbolos.put(currentHash, nuevaEntrada);
    }

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("Ámbito: " + key);
            System.out.println("Símbolos: ");
            for (String item : listaTablasSimbolos.get(key)) {
                System.out.println("    " + item);
            }
            System.out.println("");
        }
    }


        public void createWriter(String root) throws IOException {
        outputFile = new BufferedWriter(new FileWriter(root));
    }


    public void reportSyntaxError(int line, int column) throws IOException {
        if(outputFile != null) {
            outputFile.write("Error sintáctico recuperado en línea " + line + ", columna " + column + ".\n");
            outputFile.flush();
        }
    }

    public void closeWriter() throws IOException {
        if(outputFile != null) {
            outputFile.close();
        }
    }


    @Override
    public void syntax_error(Symbol current) {
        try {
          reportSyntaxError(current.left, current.right);
          //System.out.println("Error sintáctico, línea: " + current.left + ", columna: " + current.right);
        } catch (IOException e) {
          e.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nombrefuncion ::= MAIN 
            {
              Object RESULT =null;
		 
                    // Cambio de ámbito al principal
                     currentHash = "main"; 
                     System.out.println("Ámbito cambiado a: main"); 
                     listaTablasSimbolos.putIfAbsent(currentHash, new ArrayList<>());
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nombrefuncion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    // Cambio de ámbito a un identificador
                     currentHash = idVar.toString(); 
                     System.out.println("Ámbito cambiado a: " + idVar);
                     listaTablasSimbolos.putIfAbsent(currentHash, new ArrayList<>());
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parametro_decl ::= tipo IDENTIFICADOR COMMA parametro_decl 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                     System.out.println("Parámetro: " + idVar); 
                     agregarSimbolo("parametro", idVar.toString(), tipo.toString()); 
                     RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametro_decl ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     System.out.println("Parámetro: " + idVar); 
                     agregarSimbolo("parametro", idVar.toString(), tipo.toString()); 
                     RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros_decl ::= parametro_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros_decl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sec_oper ::= dato_general COMMA sec_oper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sec_oper ::= dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros_llamada ::= sec_oper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // llamada_funcion ::= nombrefuncion PARENTESIS_APERTURA parametros_llamada PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("TIPO: int"); RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("TIPO: float"); RESULT = "float"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 System.out.println("TIPO: bool"); RESULT = "bool"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 System.out.println("TIPO: char"); RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("TIPO: string"); RESULT = "string"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		int intVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal entero: " + intVar); RESULT = intVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal string: " + strVar); RESULT = strVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int floatVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floatVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object floatVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal float: " + floatVar); RESULT = floatVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int charVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object charVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal char: " + charVar); RESULT = charVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object boolVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal booleano: " + boolVar); RESULT = boolVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr SUMA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            System.out.println("Expresión suma: " + e1 + " + " + e2); 
            RESULT = e1 + " + " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr RESTA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            System.out.println("Expresión resta: " + e1 + " - " + e2); 
            RESULT = e1 + " - " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MULTIPLICACION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            System.out.println("Expresión multiplicación: " + e1 + " * " + e2); 
            RESULT = e1 + " * " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            System.out.println("Expresión división: " + e1 + " / " + e2); 
            RESULT = e1 + " / " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MODULO expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            System.out.println("Expresión módulo: " + e1 + " % " + e2); 
            RESULT = e1 + " % " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr POTENCIA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            System.out.println("Expresión potencia: " + e1 + " ^ " + e2); 
            RESULT = e1 + " ^ " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= PARENTESIS_APERTURA expr PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            System.out.println("Expresión entre paréntesis: " + e); 
            RESULT = "(" + e + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= dato_general 
            {
              Object RESULT =null;
		 System.out.println("Dato general evaluado"); RESULT = "dato_general"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_aritmeticas ::= SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_aritmeticas ::= RESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_aritmeticas ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_aritmeticas ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_aritmeticas ::= MODULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_aritmeticas ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dato_general ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dato_general ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dato_general ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_unaria ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Incremento: " + idVar); RESULT = idVar.toString() + "++"; agregarSimbolo("operacion", idVar.toString(), "incremento"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_unaria ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Decremento: " + idVar); RESULT = idVar.toString() + "--"; agregarSimbolo("operacion", idVar.toString(), "decremento"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sec_var ::= IDENTIFICADOR COMMA sec_var 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Variable en lista: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Variable en lista: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // imprimir ::= PRINT PARENTESIS_APERTURA sec_oper PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Imprimir expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // leer_var ::= READ PARENTESIS_APERTURA sec_var PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Leer variables"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("leer_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // actualizacion ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actualizacion ::= op_aritmeticas ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacion_arreglo ::= IDENTIFICADOR ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("Asignación arreglo: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacion_indice ::= IDENTIFICADOR CORCHETE_APERTURA dato_general CORCHETE_CIERRE actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("Asignación índice: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_indice",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacion_variable ::= IDENTIFICADOR actualizacion expr 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Asignación variable: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion_compuesta ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion_compuesta ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion_compuesta ::= asignacion_indice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_arreglo_op ::= ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_arreglo_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Declaración: " + idVar); RESULT = idVar.toString(); agregarSimbolo("declaracion", idVar.toString(), tipo.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= tipo IDENTIFICADOR ASIGNACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Declaración con asignación: " + idVar); RESULT = idVar.toString(); agregarSimbolo("declaracion", idVar.toString(), tipo.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= tipo IDENTIFICADOR CORCHETE_APERTURA dato_general CORCHETE_CIERRE declaracion_arreglo_op 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("Declaración arreglo: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // else_expr ::= ELSE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_op ::= else_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relacion ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relacion ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relacion ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relacion ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparacion_operacion ::= dato_general relacion dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comparacion_operacion ::= dato_general op_aritmeticas dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_logica ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_logica ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_logica_aritmetica ::= NEGACION expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_logica_aritmetica ::= expr_logica_aritmetica op_logica expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_logica_aritmetica ::= comparacion_operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_logica_aritmetica ::= PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_expr ::= IF PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE else_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_expr ::= IF error NT$0 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE else_op 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cases ::= CASE literal DOS_PUNTOS bloques cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cases ::= DEFAULT DOS_PUNTOS bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // switch_expr ::= SWITCH PARENTESIS_APERTURA dato_general PARENTESIS_CIERRE APERTURA_DE_BLOQUE cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de una switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // switch_expr ::= SWITCH error NT$1 APERTURA_DE_BLOQUE cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // finfuncion ::= RETURN dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // finfuncion ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_simple ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_simple ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_expr ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // simple_expr ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_expr ::= asignacion_compuesta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_expr ::= leer_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_expr ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_expr ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_expr ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // simple_expr ::= finfuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // simple_expr ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico en la definición de una expresión simple."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // inicializacion ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // inicializacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // while_expr ::= WHILE PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // while_expr ::= WHILE error NT$2 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_expr ::= FOR PARENTESIS_APERTURA inicializacion COMMA expr COMMA op_simple PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_expr ::= FOR error NT$3 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bloque ::= if_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bloque ::= while_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bloque ::= for_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bloque ::= switch_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bloque ::= simple_expr END_EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bloques ::= bloque bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // bloques ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error dentro de bloque, verificar definición."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // bloques ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funciones ::= funcion funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funciones ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error fatal en la definición de una función, deteniendo parseo."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA parametros_decl PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("Error en la definición de parámetros de una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA error NT$4 PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // programa ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // programa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
