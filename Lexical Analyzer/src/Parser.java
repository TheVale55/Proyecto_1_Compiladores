
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.HashMap;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\025\003\000\002\025" +
    "\003\000\002\026\006\000\002\026\004\000\002\027\003" +
    "\000\002\027\002\000\002\007\005\000\002\007\003\000" +
    "\002\053\003\000\002\053\002\000\002\052\006\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\023\004\000\002\023" +
    "\004\000\002\010\005\000\002\010\003\000\002\011\006" +
    "\000\002\012\006\000\002\014\003\000\002\014\004\000" +
    "\002\015\007\000\002\016\010\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\006\000\002\021\002\000\002\022\004\000\002\022\006" +
    "\000\002\022\010\000\002\030\006\000\002\031\003\000" +
    "\002\031\002\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\004\000\002\035\005\000\002\035\003\000\002" +
    "\035\005\000\002\036\012\000\002\054\002\000\002\036" +
    "\011\000\002\037\007\000\002\037\005\000\002\040\011" +
    "\000\002\055\002\000\002\040\010\000\002\024\004\000" +
    "\002\024\003\000\002\041\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\013\003\000" +
    "\002\013\003\000\002\043\011\000\002\056\002\000\002" +
    "\043\010\000\002\044\015\000\002\057\002\000\002\044" +
    "\010\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\004\000\002\046\004\000" +
    "\002\046\003\000\002\046\002\000\002\047\003\000\002" +
    "\047\004\000\002\047\003\000\002\050\012\000\002\060" +
    "\002\000\002\050\013\000\002\051\003\000\002\051\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\020\002\uff87\003\011\004\005\005\014\006" +
    "\006\007\015\010\010\001\002\000\004\002\326\001\002" +
    "\000\006\063\ufff5\065\ufff5\001\002\000\006\063\ufff3\065" +
    "\ufff3\001\002\000\020\002\uff8e\003\011\004\005\005\014" +
    "\006\006\007\015\010\010\001\002\000\006\063\ufff1\065" +
    "\ufff1\001\002\000\004\002\uff8c\001\002\000\004\002\uff88" +
    "\001\002\000\006\063\017\065\020\001\002\000\006\063" +
    "\ufff4\065\ufff4\001\002\000\006\063\ufff2\065\ufff2\001\002" +
    "\000\004\023\021\001\002\000\004\023\uffff\001\002\000" +
    "\004\023\000\001\002\000\020\003\023\004\005\005\014" +
    "\006\006\007\015\010\010\024\ufffb\001\002\000\004\024" +
    "\ufffc\001\002\000\004\024\uff8a\001\002\000\004\063\315" +
    "\001\002\000\004\024\026\001\002\000\004\016\027\001" +
    "\002\000\044\003\056\004\005\005\014\006\006\007\015" +
    "\010\010\017\uff8f\046\042\050\033\051\061\052\041\055" +
    "\053\056\036\061\055\062\030\063\060\065\020\001\002" +
    "\000\004\023\307\001\002\000\004\064\uffcd\001\002\000" +
    "\004\063\274\001\002\000\006\003\262\023\261\001\002" +
    "\000\004\064\uffa3\001\002\000\050\003\uff95\004\uff95\005" +
    "\uff95\006\uff95\007\uff95\010\uff95\017\uff95\046\uff95\050\uff95" +
    "\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\061" +
    "\uff95\062\uff95\063\uff95\065\uff95\001\002\000\022\011\111" +
    "\012\112\013\110\014\114\015\117\063\171\064\uffaa\065" +
    "\020\001\002\000\004\023\254\001\002\000\050\003\056" +
    "\004\005\005\014\006\006\007\015\010\010\017\uff8f\046" +
    "\042\050\033\051\061\052\041\053\uff8f\054\uff8f\055\053" +
    "\056\036\061\055\062\030\063\060\065\020\001\002\000" +
    "\006\003\231\023\230\001\002\000\006\003\207\023\206" +
    "\001\002\000\004\064\uffce\001\002\000\004\064\205\001" +
    "\002\000\004\064\uffcc\001\002\000\004\064\uffa6\001\002" +
    "\000\004\064\uffa0\001\002\000\004\064\uffa5\001\002\000" +
    "\004\064\uffa7\001\002\000\004\064\uffa1\001\002\000\004" +
    "\064\uffa2\001\002\000\004\064\uffa4\001\002\000\004\023" +
    "\202\001\002\000\012\017\uff90\053\uff90\054\uff90\064\uff9f" +
    "\001\002\000\050\003\uff93\004\uff93\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\017\uff93\046\uff93\050\uff93\051\uff93\052\uff93" +
    "\053\uff93\054\uff93\055\uff93\056\uff93\061\uff93\062\uff93\063" +
    "\uff93\065\uff93\001\002\000\030\020\165\022\166\023\uffff" +
    "\025\101\026\107\027\103\030\105\031\100\032\106\033" +
    "\147\034\146\001\002\000\006\003\067\023\066\001\002" +
    "\000\004\017\065\001\002\000\050\003\uff96\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\017\uff96\046\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\061" +
    "\uff96\062\uff96\063\uff96\065\uff96\001\002\000\050\003\uff94" +
    "\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\017\uff94\046" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\061\uff94\062\uff94\063\uff94\065\uff94\001\002\000" +
    "\020\002\uff8b\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\001\002\000\004\063\075\001\002\000\004\016" +
    "\uff98\001\002\000\004\016\071\001\002\000\044\003\056" +
    "\004\005\005\014\006\006\007\015\010\010\017\uff8f\046" +
    "\042\050\033\051\061\052\041\055\053\056\036\061\055" +
    "\062\030\063\060\065\020\001\002\000\004\017\073\001" +
    "\002\000\050\003\uff97\004\uff97\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\017\uff97\046\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\056\uff97\061\uff97\062\uff97\063\uff97" +
    "\065\uff97\001\002\000\004\060\152\001\002\000\022\022" +
    "\104\025\101\026\107\027\103\030\105\031\100\032\106" +
    "\060\uff9d\001\002\000\004\060\uff9e\001\002\000\004\022" +
    "\151\001\002\000\026\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\022\uffdd\023\uffdd\045\uffdd\063\uffdd\065\uffdd\001" +
    "\002\000\026\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\022\uffe2\023\uffe2\045\uffe2\063\uffe2\065\uffe2\001\002\000" +
    "\024\011\111\012\112\013\110\014\114\015\117\023\124" +
    "\045\121\063\122\065\020\001\002\000\026\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\022\uffe0\023\uffe0\045\uffe0" +
    "\063\uffe0\065\uffe0\001\002\000\024\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\023\uffd3\045\uffd3\063\uffd3\065\uffd3" +
    "\001\002\000\026\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\022\uffde\023\uffde\045\uffde\063\uffde\065\uffde\001\002" +
    "\000\026\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\022" +
    "\uffdf\023\uffdf\045\uffdf\063\uffdf\065\uffdf\001\002\000\026" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\022\uffe1\023" +
    "\uffe1\045\uffe1\063\uffe1\065\uffe1\001\002\000\052\017\uffec" +
    "\021\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\057\uffec\060\uffec\064\uffec\001" +
    "\002\000\052\017\ufff0\021\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\057\ufff0" +
    "\060\ufff0\064\ufff0\001\002\000\052\017\uffef\021\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\057\uffef\060\uffef\064\uffef\001\002\000\044" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\060\uffba\064\uffba\001\002\000\052\017" +
    "\uffee\021\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\057\uffee\060\uffee\064\uffee" +
    "\001\002\000\050\017\uffda\021\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\060" +
    "\uffda\064\uffda\001\002\000\050\017\uffdb\021\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\060\uffdb\064\uffdb\001\002\000\052\017\uffed\021" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\057\uffed\060\uffed\064\uffed\001\002" +
    "\000\044\024\uffcf\025\101\026\107\027\103\030\105\031" +
    "\100\032\106\035\127\036\131\037\134\040\132\041\133" +
    "\042\135\043\136\044\140\060\uffcf\064\uffcf\001\002\000" +
    "\024\011\111\012\112\013\110\014\114\015\117\023\124" +
    "\045\121\063\122\065\020\001\002\000\052\023\uffff\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\147\034\146\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\060\uffdc\064\uffdc\001\002" +
    "\000\044\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\060\uffbb\064\uffbb\001\002\000" +
    "\024\011\111\012\112\013\110\014\114\015\117\023\124" +
    "\045\121\063\122\065\020\001\002\000\044\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\060\uffb5\064\uffb5\001\002\000\040\024\130\025\101" +
    "\026\107\027\103\030\105\031\100\032\106\035\127\036" +
    "\131\037\134\040\132\041\133\042\135\043\136\044\140" +
    "\001\002\000\024\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\023\uffc3\045\uffc3\063\uffc3\065\uffc3\001\002\000\044" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\060\uffb4\064\uffb4\001\002\000\024\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\023\uffc2\045\uffc2" +
    "\063\uffc2\065\uffc2\001\002\000\024\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\023\uffc0\045\uffc0\063\uffc0\065\uffc0" +
    "\001\002\000\024\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\023\uffbf\045\uffbf\063\uffbf\065\uffbf\001\002\000\024" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\023\uffc1\045" +
    "\uffc1\063\uffc1\065\uffc1\001\002\000\024\011\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\023\uffbe\045\uffbe\063\uffbe\065" +
    "\uffbe\001\002\000\024\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\023\uffb9\045\uffb9\063\uffb9\065\uffb9\001\002\000" +
    "\024\011\111\012\112\013\110\014\114\015\117\023\124" +
    "\045\121\063\122\065\020\001\002\000\024\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\023\uffb8\045\uffb8\063\uffb8" +
    "\065\uffb8\001\002\000\024\011\111\012\112\013\110\014" +
    "\114\015\117\023\124\045\121\063\122\065\020\001\002" +
    "\000\024\011\111\012\112\013\110\014\114\015\117\023" +
    "\124\045\121\063\122\065\020\001\002\000\044\024\uffb6" +
    "\025\101\026\107\027\103\030\105\031\100\032\106\035" +
    "\127\036\131\037\134\040\132\041\133\042\135\043\136" +
    "\044\140\060\uffb6\064\uffb6\001\002\000\044\024\uffbd\025" +
    "\101\026\107\027\103\030\105\031\100\032\106\035\127" +
    "\036\131\037\134\040\132\041\133\042\135\043\136\044" +
    "\140\060\uffbd\064\uffbd\001\002\000\044\024\uffbc\025\101" +
    "\026\107\027\103\030\105\031\100\032\106\035\127\036" +
    "\131\037\134\040\132\041\133\042\135\043\136\044\140" +
    "\060\uffbc\064\uffbc\001\002\000\044\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\060" +
    "\uffd8\064\uffd8\001\002\000\044\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\060\uffd9" +
    "\064\uffd9\001\002\000\044\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\035\127\036\131\037\134" +
    "\040\132\041\133\042\135\043\uffb7\044\uffb7\060\uffb7\064" +
    "\uffb7\001\002\000\024\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\023\uffd2\045\uffd2\063\uffd2\065\uffd2\001\002\000" +
    "\024\011\111\012\112\013\110\014\114\015\117\023\124" +
    "\045\121\063\122\065\020\001\002\000\040\025\101\026" +
    "\107\027\103\030\105\031\100\032\106\035\127\036\131" +
    "\037\134\040\132\041\133\042\135\043\136\044\140\060" +
    "\154\001\002\000\004\063\155\001\002\000\024\022\104" +
    "\025\101\026\107\027\103\030\105\031\100\032\106\033" +
    "\147\034\146\001\002\000\004\024\uffa8\001\002\000\004" +
    "\024\uffa9\001\002\000\004\024\161\001\002\000\004\016" +
    "\162\001\002\000\044\003\056\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff8f\046\042\050\033\051\061\052" +
    "\041\055\053\056\036\061\055\062\030\063\060\065\020" +
    "\001\002\000\004\017\164\001\002\000\050\003\uff99\004" +
    "\uff99\005\uff99\006\uff99\007\uff99\010\uff99\017\uff99\046\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056" +
    "\uff99\061\uff99\062\uff99\063\uff99\065\uff99\001\002\000\020" +
    "\011\111\012\112\013\110\014\114\015\117\063\171\065" +
    "\020\001\002\000\026\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\167\023\uffd3\045\uffd3\063\uffd3\065\uffd3\001" +
    "\002\000\020\011\111\012\112\013\110\014\114\015\117" +
    "\063\171\065\020\001\002\000\004\017\175\001\002\000" +
    "\016\017\uffdc\021\uffdc\023\uffff\024\uffdc\060\uffdc\064\uffdc" +
    "\001\002\000\010\017\ufff9\024\ufff9\060\173\001\002\000" +
    "\020\011\111\012\112\013\110\014\114\015\117\063\171" +
    "\065\020\001\002\000\006\017\ufffa\024\ufffa\001\002\000" +
    "\004\064\uffd1\001\002\000\004\021\177\001\002\000\020" +
    "\022\104\025\101\026\107\027\103\030\105\031\100\032" +
    "\106\001\002\000\024\011\111\012\112\013\110\014\114" +
    "\015\117\023\124\045\121\063\122\065\020\001\002\000" +
    "\040\025\101\026\107\027\103\030\105\031\100\032\106" +
    "\035\127\036\131\037\134\040\132\041\133\042\135\043" +
    "\136\044\140\064\uffd0\001\002\000\020\011\111\012\112" +
    "\013\110\014\114\015\117\063\171\065\020\001\002\000" +
    "\004\024\204\001\002\000\004\064\uffd5\001\002\000\050" +
    "\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\017" +
    "\uff92\046\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\055\uff92\056\uff92\061\uff92\062\uff92\063\uff92\065\uff92\001" +
    "\002\000\024\011\111\012\112\013\110\014\114\015\117" +
    "\023\124\045\121\063\122\065\020\001\002\000\004\016" +
    "\uffb2\001\002\000\004\016\211\001\002\000\044\003\056" +
    "\004\005\005\014\006\006\007\015\010\010\017\uff8f\046" +
    "\042\050\033\051\061\052\041\055\053\056\036\061\055" +
    "\062\030\063\060\065\020\001\002\000\004\017\213\001" +
    "\002\000\052\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\017\uffc4\046\uffc4\047\215\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\065\uffc4\001\002\000\050\003\uffc5\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\017\uffc5\046\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\065\uffc5\001\002\000\004\016\217" +
    "\001\002\000\050\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\017\uffb1\046\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\065\uffb1\001\002\000\044\003\056\004\005\005\014" +
    "\006\006\007\015\010\010\017\uff8f\046\042\050\033\051" +
    "\061\052\041\055\053\056\036\061\055\062\030\063\060" +
    "\065\020\001\002\000\004\017\221\001\002\000\050\003" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\017\uffc6" +
    "\046\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\061\uffc6\062\uffc6\063\uffc6\065\uffc6\001\002" +
    "\000\040\024\223\025\101\026\107\027\103\030\105\031" +
    "\100\032\106\035\127\036\131\037\134\040\132\041\133" +
    "\042\135\043\136\044\140\001\002\000\004\016\224\001" +
    "\002\000\044\003\056\004\005\005\014\006\006\007\015" +
    "\010\010\017\uff8f\046\042\050\033\051\061\052\041\055" +
    "\053\056\036\061\055\062\030\063\060\065\020\001\002" +
    "\000\004\017\226\001\002\000\052\003\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\017\uffc4\046\uffc4\047\215" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\065\uffc4\001\002\000\050" +
    "\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\017" +
    "\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3\001" +
    "\002\000\020\011\111\012\112\013\110\014\114\015\117" +
    "\063\171\065\020\001\002\000\004\016\uffad\001\002\000" +
    "\004\016\233\001\002\000\006\053\236\054\234\001\002" +
    "\000\004\057\244\001\002\000\004\017\243\001\002\000" +
    "\014\011\111\012\112\013\110\014\114\015\117\001\002" +
    "\000\004\057\240\001\002\000\046\003\056\004\005\005" +
    "\014\006\006\007\015\010\010\046\042\050\033\051\061" +
    "\052\041\053\uff8f\054\uff8f\055\053\056\036\061\055\062" +
    "\030\063\060\065\020\001\002\000\006\053\236\054\234" +
    "\001\002\000\004\017\uffb0\001\002\000\050\003\uffac\004" +
    "\uffac\005\uffac\006\uffac\007\uffac\010\uffac\017\uffac\046\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\061\uffac\062\uffac\063\uffac\065\uffac\001\002\000\044" +
    "\003\056\004\005\005\014\006\006\007\015\010\010\017" +
    "\uff8f\046\042\050\033\051\061\052\041\055\053\056\036" +
    "\061\055\062\030\063\060\065\020\001\002\000\004\017" +
    "\uffaf\001\002\000\004\024\247\001\002\000\004\016\250" +
    "\001\002\000\006\053\236\054\234\001\002\000\004\017" +
    "\252\001\002\000\050\003\uffae\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\017\uffae\046\uffae\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\055\uffae\056\uffae\061\uffae\062\uffae" +
    "\063\uffae\065\uffae\001\002\000\010\017\uff91\053\uff91\054" +
    "\uff91\001\002\000\022\011\111\012\112\013\110\014\114" +
    "\015\117\024\ufff7\063\171\065\020\001\002\000\004\024" +
    "\257\001\002\000\004\024\ufff8\001\002\000\050\017\ufff6" +
    "\021\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\060\ufff6\064\ufff6\001\002\000" +
    "\004\064\uffab\001\002\000\024\011\111\012\112\013\110" +
    "\014\114\015\117\023\124\045\121\063\122\065\020\001" +
    "\002\000\004\016\uff9b\001\002\000\004\016\264\001\002" +
    "\000\044\003\056\004\005\005\014\006\006\007\015\010" +
    "\010\017\uff8f\046\042\050\033\051\061\052\041\055\053" +
    "\056\036\061\055\062\030\063\060\065\020\001\002\000" +
    "\004\017\266\001\002\000\050\003\uff9a\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\017\uff9a\046\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\065\uff9a\001\002\000\040\024\270\025" +
    "\101\026\107\027\103\030\105\031\100\032\106\035\127" +
    "\036\131\037\134\040\132\041\133\042\135\043\136\044" +
    "\140\001\002\000\004\016\271\001\002\000\044\003\056" +
    "\004\005\005\014\006\006\007\015\010\010\017\uff8f\046" +
    "\042\050\033\051\061\052\041\055\053\056\036\061\055" +
    "\062\030\063\060\065\020\001\002\000\004\017\273\001" +
    "\002\000\050\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\017\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\065\uff9c\001\002\000\010\020\276\022\275\064\uffc9\001" +
    "\002\000\024\011\111\012\112\013\110\014\114\015\117" +
    "\023\124\045\121\063\122\065\020\001\002\000\020\011" +
    "\111\012\112\013\110\014\114\015\117\063\171\065\020" +
    "\001\002\000\004\021\300\001\002\000\006\022\301\064" +
    "\uffca\001\002\000\004\016\303\001\002\000\004\064\uffc7" +
    "\001\002\000\020\011\111\012\112\013\110\014\114\015" +
    "\117\063\171\065\020\001\002\000\004\017\305\001\002" +
    "\000\004\064\uffcb\001\002\000\040\025\101\026\107\027" +
    "\103\030\105\031\100\032\106\035\127\036\131\037\134" +
    "\040\132\041\133\042\135\043\136\044\140\064\uffc8\001" +
    "\002\000\004\063\310\001\002\000\006\024\uffd6\060\313" +
    "\001\002\000\004\024\312\001\002\000\004\064\uffd4\001" +
    "\002\000\004\063\310\001\002\000\004\024\uffd7\001\002" +
    "\000\006\024\ufffd\060\316\001\002\000\014\004\005\005" +
    "\014\006\006\007\015\010\010\001\002\000\004\024\ufffe" +
    "\001\002\000\004\024\321\001\002\000\004\016\322\001" +
    "\002\000\044\003\056\004\005\005\014\006\006\007\015" +
    "\010\010\017\uff8f\046\042\050\033\051\061\052\041\055" +
    "\053\056\036\061\055\062\030\063\060\065\020\001\002" +
    "\000\004\017\324\001\002\000\020\002\uff89\003\uff89\004" +
    "\uff89\005\uff89\006\uff89\007\uff89\010\uff89\001\002\000\004" +
    "\002\uff8d\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\012\002\012\047\011\050\006\051\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\012\047\324\050\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\023" +
    "\026\021\027\024\001\001\000\002\001\001\000\004\060" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\031\011\033\012\053\015\030\016" +
    "\044\017\042\020\047\022\045\023\050\024\046\025\036" +
    "\036\062\040\056\042\043\043\034\044\063\045\037\046" +
    "\061\052\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\115\005\257\025\036\052\114" +
    "\001\001\000\002\001\001\000\050\002\031\011\033\012" +
    "\053\015\030\016\044\017\042\020\047\022\045\023\050" +
    "\024\046\025\036\036\062\040\056\042\043\043\034\044" +
    "\063\045\037\046\252\052\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\076\014\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\073\017\075\001" +
    "\001\000\004\057\067\001\001\000\002\001\001\000\050" +
    "\002\031\011\033\012\053\015\030\016\044\017\042\020" +
    "\047\022\045\023\050\024\046\025\036\036\062\040\056" +
    "\042\043\043\034\044\063\045\037\046\071\052\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\076\014\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\115\005\122\023\112\025\036\033\124\035\117\052" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\136\032\140\034\141\001\001" +
    "\000\020\003\115\005\122\023\112\025\036\033\124\035" +
    "\147\052\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\115\005\122\023\112\025\036\033\124\035" +
    "\125\052\114\001\001\000\002\001\001\000\010\004\136" +
    "\032\140\034\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\115\005\122\023\112\025\036\033\124\035\144" +
    "\052\114\001\001\000\002\001\001\000\020\003\115\005" +
    "\122\023\112\025\036\033\124\035\143\052\114\001\001" +
    "\000\020\003\115\005\122\023\112\025\036\033\124\035" +
    "\142\052\114\001\001\000\010\004\136\032\140\034\141" +
    "\001\001\000\010\004\136\032\140\034\141\001\001\000" +
    "\010\004\136\032\140\034\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\136\032\140\034\141\001" +
    "\001\000\002\001\001\000\020\003\115\005\122\023\112" +
    "\025\036\033\124\035\152\052\114\001\001\000\010\004" +
    "\136\032\140\034\141\001\001\000\010\017\155\023\156" +
    "\041\157\001\001\000\006\004\076\014\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\002\031\011\033\012\053\015\030\016" +
    "\044\017\042\020\047\022\045\023\050\024\046\025\036" +
    "\036\062\040\056\042\043\043\034\044\063\045\037\046" +
    "\162\052\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\115\005\175\025\036\052\114\001\001\000" +
    "\002\001\001\000\014\003\115\005\171\007\167\025\036" +
    "\052\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\115\005\171\007\173\025\036" +
    "\052\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\076\014\177\001\001\000\020" +
    "\003\115\005\122\023\112\025\036\033\124\035\200\052" +
    "\114\001\001\000\010\004\136\032\140\034\141\001\001" +
    "\000\014\003\115\005\171\007\202\025\036\052\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\115\005\122\023\112\025\036\033\124\035" +
    "\221\052\114\001\001\000\004\054\207\001\001\000\002" +
    "\001\001\000\050\002\031\011\033\012\053\015\030\016" +
    "\044\017\042\020\047\022\045\023\050\024\046\025\036" +
    "\036\062\040\056\042\043\043\034\044\063\045\037\046" +
    "\211\052\051\001\001\000\002\001\001\000\006\030\213" +
    "\031\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\002\031\011\033\012\053\015\030" +
    "\016\044\017\042\020\047\022\045\023\050\024\046\025" +
    "\036\036\062\040\056\042\043\043\034\044\063\045\037" +
    "\046\217\052\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\136\032\140\034\141\001\001\000\002" +
    "\001\001\000\050\002\031\011\033\012\053\015\030\016" +
    "\044\017\042\020\047\022\045\023\050\024\046\025\036" +
    "\036\062\040\056\042\043\043\034\044\063\045\037\046" +
    "\224\052\051\001\001\000\002\001\001\000\006\030\213" +
    "\031\226\001\001\000\002\001\001\000\012\003\115\005" +
    "\245\025\036\052\114\001\001\000\004\055\231\001\001" +
    "\000\002\001\001\000\004\037\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\236\001\001\000\002" +
    "\001\001\000\050\002\031\011\033\012\053\015\030\016" +
    "\044\017\042\020\047\022\045\023\050\024\046\025\036" +
    "\036\062\040\056\042\043\043\034\044\063\045\037\046" +
    "\240\052\051\001\001\000\004\037\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\002\031\011\033\012" +
    "\053\015\030\016\044\017\042\020\047\022\045\023\050" +
    "\024\046\025\036\036\062\040\056\042\043\043\034\044" +
    "\063\045\037\046\244\052\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\115\005\171\007\255\025\036\052\114\053" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\115\005\122\023" +
    "\112\025\036\033\124\035\266\052\114\001\001\000\004" +
    "\056\262\001\001\000\002\001\001\000\050\002\031\011" +
    "\033\012\053\015\030\016\044\017\042\020\047\022\045" +
    "\023\050\024\046\025\036\036\062\040\056\042\043\043" +
    "\034\044\063\045\037\046\264\052\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\136\032\140\034" +
    "\141\001\001\000\002\001\001\000\050\002\031\011\033" +
    "\012\053\015\030\016\044\017\042\020\047\022\045\023" +
    "\050\024\046\025\036\036\062\040\056\042\043\043\034" +
    "\044\063\045\037\046\271\052\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\115" +
    "\005\122\023\112\025\036\033\124\035\305\052\114\001" +
    "\001\000\012\003\115\005\276\025\036\052\114\001\001" +
    "\000\002\001\001\000\004\021\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\115\005\171\007\303" +
    "\025\036\052\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\136\032\140\034\141\001\001\000\004" +
    "\010\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\023\026\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\002\031\011\033\012\053\015\030\016\044\017\042\020" +
    "\047\022\045\023\050\024\046\025\036\036\062\040\056" +
    "\042\043\043\034\044\063\045\037\046\322\052\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
    private Lexer scanner;
    private HashMap<String, ArrayList<String>> listaTablasSimbolos;
    private String currentHash;
    private BufferedWriter outputFile;

    public Parser(Lexer scanner) {
        this.scanner = scanner;
        this.listaTablasSimbolos = new HashMap<>();
        this.currentHash = "";
    }

    public void setSymbolTable(HashMap<String, ArrayList<String>> tablaSimbolos) {
        this.listaTablasSimbolos = tablaSimbolos;
    }

    private void agregarSimbolo(String tipoTabla, String identificador, String tipo) {
        ArrayList<String> nuevaEntrada = listaTablasSimbolos.getOrDefault(currentHash, new ArrayList<>());

        // Verificar si ya existe el símbolo en el ámbito actual
        for (String simbolo : nuevaEntrada) {
            if (simbolo.contains("identificador:" + identificador)) {
                System.err.println("Error: Identificador " + identificador + " ya existe en el ámbito " + currentHash);
                return;
            }
        }

        // Agregar símbolo si no existe
        nuevaEntrada.add("tipo:" + tipoTabla + " identificador:" + identificador + " tipo_dato:" + tipo);
        listaTablasSimbolos.put(currentHash, nuevaEntrada);
    }

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("Ámbito: " + key);
            System.out.println("Símbolos: ");
            for (String item : listaTablasSimbolos.get(key)) {
                System.out.println("    " + item);
            }
            System.out.println("");
        }
    }


        public void createWriter(String root) throws IOException {
        outputFile = new BufferedWriter(new FileWriter(root));
    }


    public void reportSyntaxError(int line, int column) throws IOException {
        if(outputFile != null) {
            outputFile.write("Error sintáctico recuperado en línea " + line + ", columna " + column + ".\n");
            outputFile.flush();
        }
    }

    public void closeWriter() throws IOException {
        if(outputFile != null) {
            outputFile.close();
        }
    }


    @Override
    public void syntax_error(Symbol current) {
        try {
          reportSyntaxError(current.left, current.right);
          //System.out.println("Error sintáctico, línea: " + current.left + ", columna: " + current.right);
        } catch (IOException e) {
          e.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nombrefuncion ::= MAIN 
            {
              Object RESULT =null;
		 
                     currentHash = "main"; 
                     System.out.println("Ámbito cambiado a: main"); 
                     listaTablasSimbolos.putIfAbsent(currentHash, new ArrayList<>());
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nombrefuncion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     currentHash = idVar.toString(); 
                     System.out.println("Ámbito cambiado a: " + idVar);
                     listaTablasSimbolos.putIfAbsent(currentHash, new ArrayList<>());
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parametro_decl ::= tipo IDENTIFICADOR COMMA parametro_decl 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                     System.out.println("Parámetro: " + idVar); 
                     agregarSimbolo("parametro", idVar.toString(), tipo.toString()); 
                     RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametro_decl ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     System.out.println("Parámetro: " + idVar); 
                     agregarSimbolo("parametro", idVar.toString(), tipo.toString()); 
                     RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros_decl ::= parametro_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros_decl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sec_oper ::= dato_general COMMA sec_oper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sec_oper ::= dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros_llamada ::= sec_oper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // llamada_funcion ::= nombrefuncion PARENTESIS_APERTURA parametros_llamada PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("TIPO: int"); RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("TIPO: float"); RESULT = "float"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 System.out.println("TIPO: bool"); RESULT = "bool"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 System.out.println("TIPO: char"); RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("TIPO: string"); RESULT = "string"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		int intVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal entero: " + intVar); RESULT = intVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal string: " + strVar); RESULT = strVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int floatVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floatVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object floatVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal float: " + floatVar); RESULT = floatVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int charVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object charVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal char: " + charVar); RESULT = charVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object boolVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal booleano: " + boolVar); RESULT = boolVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr SUMA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión suma: " + e1 + " + " + e2); RESULT = e1 + " + " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr RESTA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión resta: " + e1 + " - " + e2); RESULT = e1 + " - " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MULTIPLICACION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión multiplicación: " + e1 + " * " + e2); RESULT = e1 + " * " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión división: " + e1 + " / " + e2); RESULT = e1 + " / " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MODULO expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión módulo: " + e1 + " % " + e2); RESULT = e1 + " % " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr POTENCIA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión potencia: " + e1 + " ^ " + e2); RESULT = e1 + " ^ " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= PARENTESIS_APERTURA expr PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Expresión entre paréntesis: " + e); RESULT = "(" + e + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Identificador en expresión: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_aritmeticas ::= SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_aritmeticas ::= RESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_aritmeticas ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_aritmeticas ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_aritmeticas ::= MODULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_aritmeticas ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dato_general ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dato_general ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dato_general ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_unaria ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Incremento: " + idVar); RESULT = idVar.toString() + "++"; agregarSimbolo("operacion", idVar.toString(), "incremento"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_unaria ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Decremento: " + idVar); RESULT = idVar.toString() + "--"; agregarSimbolo("operacion", idVar.toString(), "decremento"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sec_var ::= IDENTIFICADOR COMMA sec_var 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Variable en lista: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Variable en lista: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // imprimir ::= PRINT PARENTESIS_APERTURA sec_oper PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Imprimir expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // leer_var ::= READ PARENTESIS_APERTURA sec_var PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Leer variables"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("leer_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actualizacion ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // actualizacion ::= op_aritmeticas ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacion_arreglo ::= IDENTIFICADOR ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("Asignación arreglo: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacion_indice ::= IDENTIFICADOR CORCHETE_APERTURA dato_general CORCHETE_CIERRE actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("Asignación índice: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_indice",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion_variable ::= IDENTIFICADOR actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Asignación variable: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion_compuesta ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion_compuesta ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion_compuesta ::= asignacion_indice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_arreglo_op ::= ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_arreglo_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Declaración: " + idVar); RESULT = idVar.toString(); agregarSimbolo("declaracion", idVar.toString(), tipo.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= tipo IDENTIFICADOR ASIGNACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Declaración con asignación: " + idVar); RESULT = idVar.toString(); agregarSimbolo("declaracion", idVar.toString(), tipo.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= tipo IDENTIFICADOR CORCHETE_APERTURA dato_general CORCHETE_CIERRE declaracion_arreglo_op 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("Declaración arreglo: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_expr ::= ELSE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_op ::= else_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relacion ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relacion ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relacion ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relacion ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comparacion_operacion ::= expr_logica_aritmetica relacion expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comparacion_operacion ::= expr_logica_aritmetica op_aritmeticas expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comparacion_operacion ::= dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comparacion_operacion ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op_logica ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op_logica ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_logica_aritmetica ::= NEGACION expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_logica_aritmetica ::= expr_logica_aritmetica op_logica expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_logica_aritmetica ::= comparacion_operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_logica_aritmetica ::= PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_expr ::= IF PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE else_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_expr ::= IF error NT$0 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE else_op 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cases ::= CASE literal DOS_PUNTOS bloques cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cases ::= DEFAULT DOS_PUNTOS bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // switch_expr ::= SWITCH PARENTESIS_APERTURA dato_general PARENTESIS_CIERRE APERTURA_DE_BLOQUE cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de una switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch_expr ::= SWITCH error NT$1 APERTURA_DE_BLOQUE cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // finfuncion ::= RETURN dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // finfuncion ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_simple ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_simple ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_expr ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_expr ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_expr ::= asignacion_compuesta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_expr ::= leer_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // simple_expr ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // simple_expr ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // simple_expr ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // simple_expr ::= finfuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // simple_expr ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error sintáctico en la definición de una expresión simple."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // inicializacion ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // inicializacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while_expr ::= WHILE PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while_expr ::= WHILE error NT$2 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_expr ::= FOR PARENTESIS_APERTURA inicializacion COMMA expr_logica_aritmetica COMMA op_simple PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_expr ::= FOR error NT$3 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bloque ::= if_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bloque ::= while_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bloque ::= for_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // bloque ::= switch_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // bloque ::= simple_expr END_EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // bloques ::= bloque bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bloques ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error dentro de bloque, verificar definición."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bloques ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funciones ::= funcion funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // funciones ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error fatal en la definición de una función, deteniendo parseo."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA parametros_decl PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("Error en la definición de parámetros de una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA error NT$4 PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // programa ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // programa ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
