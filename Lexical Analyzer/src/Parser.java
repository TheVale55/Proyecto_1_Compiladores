
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\025\003\000\002\025" +
    "\003\000\002\026\006\000\002\026\004\000\002\027\003" +
    "\000\002\027\002\000\002\007\005\000\002\007\003\000" +
    "\002\055\003\000\002\055\002\000\002\054\006\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\010\005\000\002\010\003\000\002\011\006\000" +
    "\002\012\006\000\002\013\005\000\002\013\003\000\002" +
    "\014\003\000\002\014\004\000\002\015\007\000\002\016" +
    "\010\000\002\017\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\006\000\002\021\002\000" +
    "\002\022\004\000\002\022\006\000\002\022\010\000\002" +
    "\023\004\000\002\023\004\000\002\030\006\000\002\031" +
    "\003\000\002\031\002\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\005\000\002\033\003\000\002" +
    "\034\003\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\003" +
    "\000\002\037\012\000\002\040\007\000\002\040\005\000" +
    "\002\041\011\000\002\024\004\000\002\042\003\000\002" +
    "\042\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\044\011\000\002\045\015\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\004\000\002\046\003\000\002\047\004\000\002\047" +
    "\002\000\002\050\011\000\002\051\003\000\002\051\004" +
    "\000\002\052\004\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\014\004\005\005\013\006\006\007\014\010" +
    "\010\001\002\000\004\002\267\001\002\000\006\063\ufff5" +
    "\065\ufff5\001\002\000\006\063\ufff3\065\ufff3\001\002\000" +
    "\016\002\uffa2\004\005\005\013\006\006\007\014\010\010" +
    "\001\002\000\006\063\ufff1\065\ufff1\001\002\000\004\002" +
    "\uff9f\001\002\000\006\063\016\065\017\001\002\000\006" +
    "\063\ufff4\065\ufff4\001\002\000\006\063\ufff2\065\ufff2\001" +
    "\002\000\004\023\021\001\002\000\004\023\uffff\001\002" +
    "\000\004\023\000\001\002\000\016\002\uffa0\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\001\002\000\016\004\005" +
    "\005\013\006\006\007\014\010\010\024\ufffb\001\002\000" +
    "\004\063\263\001\002\000\004\024\ufffc\001\002\000\004" +
    "\024\025\001\002\000\004\016\026\001\002\000\040\004" +
    "\005\005\013\006\006\007\014\010\010\017\uffa4\046\040" +
    "\050\032\051\055\052\037\055\051\056\034\061\052\062" +
    "\027\063\054\001\002\000\004\023\255\001\002\000\004" +
    "\064\uffd5\001\002\000\004\063\242\001\002\000\004\023" +
    "\234\001\002\000\004\064\uffaf\001\002\000\016\011\070" +
    "\012\073\014\074\015\077\063\100\065\017\001\002\000" +
    "\044\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\017\uffa9" +
    "\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\061\uffa9\062\uffa9\063\uffa9\001\002\000\044" +
    "\004\005\005\013\006\006\007\014\010\010\017\uffa4\046" +
    "\040\050\032\051\055\052\037\053\uffa4\054\uffa4\055\051" +
    "\056\034\061\052\062\027\063\054\001\002\000\004\023" +
    "\214\001\002\000\004\023\200\001\002\000\004\064\uffd6" +
    "\001\002\000\004\064\177\001\002\000\004\064\uffd4\001" +
    "\002\000\004\064\uffb2\001\002\000\004\064\uffb1\001\002" +
    "\000\004\064\uffad\001\002\000\004\064\uffb3\001\002\000" +
    "\004\064\uffb0\001\002\000\004\064\uffae\001\002\000\004" +
    "\023\174\001\002\000\044\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\017\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\001\002\000\026\020\161\022\162\025\143\026\153" +
    "\027\145\030\146\031\142\032\150\033\151\034\152\001" +
    "\002\000\004\023\062\001\002\000\004\017\061\001\002" +
    "\000\044\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\017" +
    "\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\061\uffaa\062\uffaa\063\uffaa\001\002\000" +
    "\044\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\017\uffa8" +
    "\046\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\061\uffa8\062\uffa8\063\uffa8\001\002\000\016" +
    "\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\001" +
    "\002\000\014\004\005\005\013\006\006\007\014\010\010" +
    "\001\002\000\004\064\064\001\002\000\022\011\070\012" +
    "\073\013\067\014\074\015\077\045\101\063\100\065\017" +
    "\001\002\000\010\043\116\044\117\064\130\001\002\000" +
    "\004\023\121\001\002\000\032\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\024\uffbe\043\uffbe\044\uffbe\045\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\001\002\000\070\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\017\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\057\ufff0\060\ufff0\063\ufff0\064\ufff0\065\ufff0\001\002" +
    "\000\012\024\uffbb\043\uffbb\044\uffbb\064\uffbb\001\002\000" +
    "\032\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\024\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\063\uffbf\064\uffbf\065\uffbf\001" +
    "\002\000\070\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\017\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\057\uffef\060\uffef\063" +
    "\uffef\064\uffef\065\uffef\001\002\000\070\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\017\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\057\uffee\060\uffee\063\uffee\064\uffee\065\uffee\001\002" +
    "\000\066\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\060\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\001\002\000\066\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\017\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\060\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\001\002\000\070\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\017\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\057\uffed\060\uffed\063\uffed\064\uffed\065\uffed\001" +
    "\002\000\070\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\023\uffff\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\060\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\001\002\000\020\011\070\012\073" +
    "\013\067\014\074\015\077\063\100\065\017\001\002\000" +
    "\046\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\024\uffc2" +
    "\035\105\036\110\037\107\040\111\041\106\042\104\043" +
    "\uffc2\044\uffc2\045\uffc2\063\uffc2\064\uffc2\065\uffc2\001\002" +
    "\000\016\011\070\012\073\014\074\015\077\063\100\065" +
    "\017\001\002\000\016\011\uffc4\012\uffc4\014\uffc4\015\uffc4" +
    "\063\uffc4\065\uffc4\001\002\000\016\011\uffc9\012\uffc9\014" +
    "\uffc9\015\uffc9\063\uffc9\065\uffc9\001\002\000\016\011\uffc5" +
    "\012\uffc5\014\uffc5\015\uffc5\063\uffc5\065\uffc5\001\002\000" +
    "\016\011\uffc7\012\uffc7\014\uffc7\015\uffc7\063\uffc7\065\uffc7" +
    "\001\002\000\016\011\uffc8\012\uffc8\014\uffc8\015\uffc8\063" +
    "\uffc8\065\uffc8\001\002\000\016\011\uffc6\012\uffc6\014\uffc6" +
    "\015\uffc6\063\uffc6\065\uffc6\001\002\000\032\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\024\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\022\011" +
    "\070\012\073\013\067\014\074\015\077\045\101\063\100" +
    "\065\017\001\002\000\012\024\uffbd\043\uffbd\044\uffbd\064" +
    "\uffbd\001\002\000\022\011\070\012\073\013\067\014\074" +
    "\015\077\045\101\063\100\065\017\001\002\000\022\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\045\uffc1\063\uffc1" +
    "\065\uffc1\001\002\000\022\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\045\uffc0\063\uffc0\065\uffc0\001\002\000\012" +
    "\024\uffbc\043\116\044\117\064\uffbc\001\002\000\020\011" +
    "\070\012\073\014\074\015\077\024\ufff7\063\100\065\017" +
    "\001\002\000\004\024\127\001\002\000\004\024\ufff8\001" +
    "\002\000\010\017\ufff9\024\ufff9\060\125\001\002\000\016" +
    "\011\070\012\073\014\074\015\077\063\100\065\017\001" +
    "\002\000\006\017\ufffa\024\ufffa\001\002\000\066\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\060\ufff6\063\ufff6\064\ufff6\065\ufff6\001\002" +
    "\000\004\063\131\001\002\000\024\022\147\025\143\026" +
    "\153\027\145\030\146\031\142\032\150\033\151\034\152" +
    "\001\002\000\004\024\uffb4\001\002\000\004\024\uffb5\001" +
    "\002\000\004\024\135\001\002\000\004\016\136\001\002" +
    "\000\040\004\005\005\013\006\006\007\014\010\010\017" +
    "\uffa4\046\040\050\032\051\055\052\037\055\051\056\034" +
    "\061\052\062\027\063\054\001\002\000\004\017\140\001" +
    "\002\000\044\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\017\uffab\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\061\uffab\062\uffab\063\uffab\001\002" +
    "\000\004\022\160\001\002\000\020\011\uffe7\012\uffe7\014" +
    "\uffe7\015\uffe7\022\uffe7\063\uffe7\065\uffe7\001\002\000\020" +
    "\011\uffec\012\uffec\014\uffec\015\uffec\022\uffec\063\uffec\065" +
    "\uffec\001\002\000\016\011\070\012\073\014\074\015\077" +
    "\063\100\065\017\001\002\000\020\011\uffea\012\uffea\014" +
    "\uffea\015\uffea\022\uffea\063\uffea\065\uffea\001\002\000\020" +
    "\011\uffe8\012\uffe8\014\uffe8\015\uffe8\022\uffe8\063\uffe8\065" +
    "\uffe8\001\002\000\016\011\uffdb\012\uffdb\014\uffdb\015\uffdb" +
    "\063\uffdb\065\uffdb\001\002\000\020\011\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\022\uffe9\063\uffe9\065\uffe9\001\002\000\006" +
    "\024\uffce\064\uffce\001\002\000\006\024\uffcd\064\uffcd\001" +
    "\002\000\020\011\uffeb\012\uffeb\014\uffeb\015\uffeb\022\uffeb" +
    "\063\uffeb\065\uffeb\001\002\000\022\024\uffd7\025\143\026" +
    "\153\027\145\030\146\031\142\032\150\064\uffd7\001\002" +
    "\000\022\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\064\uffdc\001\002\000\016\011\070\012\073" +
    "\014\074\015\077\063\100\065\017\001\002\000\022\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\064\uffdd\001\002\000\016\011\uffda\012\uffda\014\uffda\015" +
    "\uffda\063\uffda\065\uffda\001\002\000\006\011\167\063\166" +
    "\001\002\000\020\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016" +
    "\163\063\uffdb\065\uffdb\001\002\000\016\011\070\012\073" +
    "\014\074\015\077\063\100\065\017\001\002\000\004\017" +
    "\165\001\002\000\004\064\uffd9\001\002\000\004\021\uffe2" +
    "\001\002\000\004\021\uffe3\001\002\000\004\021\171\001" +
    "\002\000\020\022\147\025\143\026\153\027\145\030\146" +
    "\031\142\032\150\001\002\000\016\011\070\012\073\014" +
    "\074\015\077\063\100\065\017\001\002\000\020\025\143" +
    "\026\153\027\145\030\146\031\142\032\150\064\uffd8\001" +
    "\002\000\016\011\070\012\073\014\074\015\077\063\100" +
    "\065\017\001\002\000\004\024\176\001\002\000\004\064" +
    "\uffdf\001\002\000\044\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\017\uffa7\046\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\001\002\000\022\011\070\012\073\013\067\014\074\015" +
    "\077\045\101\063\100\065\017\001\002\000\010\024\202" +
    "\043\116\044\117\001\002\000\004\016\203\001\002\000" +
    "\040\004\005\005\013\006\006\007\014\010\010\017\uffa4" +
    "\046\040\050\032\051\055\052\037\055\051\056\034\061" +
    "\052\062\027\063\054\001\002\000\004\017\205\001\002" +
    "\000\046\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\017" +
    "\uffca\046\uffca\047\207\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\061\uffca\062\uffca\063\uffca\001" +
    "\002\000\044\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\017\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\061\uffcb\062\uffcb\063\uffcb\001\002" +
    "\000\004\016\211\001\002\000\044\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\017\uffba\046\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\061\uffba\062" +
    "\uffba\063\uffba\001\002\000\040\004\005\005\013\006\006" +
    "\007\014\010\010\017\uffa4\046\040\050\032\051\055\052" +
    "\037\055\051\056\034\061\052\062\027\063\054\001\002" +
    "\000\004\017\213\001\002\000\044\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\017\uffcc\046\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\001\002\000\016\011\070\012\073\014\074" +
    "\015\077\063\100\065\017\001\002\000\004\024\216\001" +
    "\002\000\004\016\217\001\002\000\006\053\222\054\220" +
    "\001\002\000\004\057\230\001\002\000\004\017\227\001" +
    "\002\000\012\011\070\012\073\014\074\015\077\001\002" +
    "\000\004\057\224\001\002\000\042\004\005\005\013\006" +
    "\006\007\014\010\010\046\040\050\032\051\055\052\037" +
    "\053\uffa4\054\uffa4\055\051\056\034\061\052\062\027\063" +
    "\054\001\002\000\006\053\222\054\220\001\002\000\004" +
    "\017\uffb9\001\002\000\044\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\017\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\001\002\000\040\004\005\005\013\006\006\007\014" +
    "\010\010\017\uffa4\046\040\050\032\051\055\052\037\055" +
    "\051\056\034\061\052\062\027\063\054\001\002\000\004" +
    "\017\uffb8\001\002\000\010\017\uffa5\053\uffa5\054\uffa5\001" +
    "\002\000\004\064\uffb6\001\002\000\022\011\070\012\073" +
    "\013\067\014\074\015\077\045\101\063\100\065\017\001" +
    "\002\000\010\024\236\043\116\044\117\001\002\000\004" +
    "\016\237\001\002\000\040\004\005\005\013\006\006\007" +
    "\014\010\010\017\uffa4\046\040\050\032\051\055\052\037" +
    "\055\051\056\034\061\052\062\027\063\054\001\002\000" +
    "\004\017\241\001\002\000\044\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\017\uffac\046\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\061\uffac\062\uffac" +
    "\063\uffac\001\002\000\010\020\244\022\243\064\uffd1\001" +
    "\002\000\016\011\070\012\073\014\074\015\077\063\100" +
    "\065\017\001\002\000\006\011\167\063\166\001\002\000" +
    "\004\021\246\001\002\000\006\022\247\064\uffd2\001\002" +
    "\000\004\016\251\001\002\000\004\064\uffcf\001\002\000" +
    "\016\011\070\012\073\014\074\015\077\063\100\065\017" +
    "\001\002\000\004\017\253\001\002\000\004\064\uffd3\001" +
    "\002\000\020\025\143\026\153\027\145\030\146\031\142" +
    "\032\150\064\uffd0\001\002\000\004\063\256\001\002\000" +
    "\006\024\uffe0\060\261\001\002\000\004\024\260\001\002" +
    "\000\004\064\uffde\001\002\000\004\063\256\001\002\000" +
    "\004\024\uffe1\001\002\000\006\024\ufffd\060\264\001\002" +
    "\000\014\004\005\005\013\006\006\007\014\010\010\001" +
    "\002\000\004\024\ufffe\001\002\000\004\002\uffa1\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\012\002\011\051\010\052\006\053\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\011\051\265\052\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\014\050\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\021\026\022\027\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\002\030\011\032\012\047\015\027\016\042\017\040\020" +
    "\044\022\043\023\046\024\045\037\056\041\052\043\041" +
    "\044\034\045\057\046\035\047\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\075\005\232\025\065\054" +
    "\074\001\001\000\002\001\001\000\044\002\030\011\032" +
    "\012\047\015\027\016\042\017\040\020\044\022\043\023" +
    "\046\024\045\037\056\041\052\043\041\044\034\045\057" +
    "\046\035\047\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\140\014\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\030\022" +
    "\062\001\001\000\002\001\001\000\020\003\075\005\101" +
    "\025\065\033\071\035\070\036\064\054\074\001\001\000" +
    "\004\034\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\075\005\101\025\065\033\071\035\112\054\074\001\001" +
    "\000\004\032\102\001\001\000\014\003\075\005\101\025" +
    "\065\033\111\054\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\075" +
    "\005\101\025\065\033\071\035\070\036\113\054\074\001" +
    "\001\000\004\034\114\001\001\000\020\003\075\005\101" +
    "\025\065\033\071\035\070\036\117\054\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\114\001\001" +
    "\000\016\003\075\005\123\007\122\025\065\054\074\055" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\075\005\123\007\125\025\065\054" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\131\023\132\042\133\001\001\000\006\004\140\014" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\002\030\011\032\012" +
    "\047\015\027\016\042\017\040\020\044\022\043\023\046" +
    "\024\045\037\056\041\052\043\041\044\034\045\057\046" +
    "\035\047\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\075\005\154\013\153\025\065\054\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\155\001\001\000\002\001\001\000" +
    "\012\003\075\005\156\025\065\054\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\167\001\001\000" +
    "\002\001\001\000\014\003\075\005\123\007\163\025\065" +
    "\054\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\140\014\171\001\001\000\014\003\075\005\154\013" +
    "\172\025\065\054\074\001\001\000\004\004\155\001\001" +
    "\000\014\003\075\005\123\007\174\025\065\054\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\075\005\101\025\065\033\071\035\070\036" +
    "\200\054\074\001\001\000\004\034\114\001\001\000\002" +
    "\001\001\000\044\002\030\011\032\012\047\015\027\016" +
    "\042\017\040\020\044\022\043\023\046\024\045\037\056" +
    "\041\052\043\041\044\034\045\057\046\035\047\203\001" +
    "\001\000\002\001\001\000\006\030\205\031\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\002\030\011\032\012\047\015\027\016\042\017\040" +
    "\020\044\022\043\023\046\024\045\037\056\041\052\043" +
    "\041\044\034\045\057\046\035\047\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\075\005\214\025" +
    "\065\054\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\222\001\001\000\002\001\001\000\044" +
    "\002\030\011\032\012\047\015\027\016\042\017\040\020" +
    "\044\022\043\023\046\024\045\037\056\041\052\043\041" +
    "\044\034\045\057\046\035\047\224\001\001\000\004\040" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\002\030\011\032\012\047\015\027\016\042\017\040\020" +
    "\044\022\043\023\046\024\045\037\056\041\052\043\041" +
    "\044\034\045\057\046\035\047\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\075" +
    "\005\101\025\065\033\071\035\070\036\234\054\074\001" +
    "\001\000\004\034\114\001\001\000\002\001\001\000\044" +
    "\002\030\011\032\012\047\015\027\016\042\017\040\020" +
    "\044\022\043\023\046\024\045\037\056\041\052\043\041" +
    "\044\034\045\057\046\035\047\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\075" +
    "\005\154\013\253\025\065\054\074\001\001\000\004\006" +
    "\244\001\001\000\002\001\001\000\004\021\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\075\005" +
    "\123\007\251\025\065\054\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\155\001\001\000\004\010" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\021\026\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
    private Lexer scanner;

    public Parser(Lexer scanner) {
        this.scanner = scanner;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nombrefuncion ::= MAIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nombrefuncion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parametro_decl ::= tipo IDENTIFICADOR COMMA parametro_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametro_decl ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros_decl ::= parametro_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros_decl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sec_oper ::= dato_general COMMA sec_oper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sec_oper ::= dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros_llamada ::= sec_oper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // llamada_funcion ::= nombrefuncion PARENTESIS_APERTURA parametros_llamada PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_aritmeticas ::= SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_aritmeticas ::= RESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_aritmeticas ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_aritmeticas ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_aritmeticas ::= MODULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op_aritmeticas ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dato_general ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dato_general ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dato_general ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // indice ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indice",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // indice ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indice",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sec_var ::= IDENTIFICADOR COMMA sec_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // imprimir ::= PRINT PARENTESIS_APERTURA sec_oper PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // leer_var ::= READ PARENTESIS_APERTURA sec_var PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("leer_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_aritmetica ::= expr_aritmetica op_aritmeticas dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_aritmetica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_aritmetica ::= dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_aritmetica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // actualizacion ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // actualizacion ::= op_aritmeticas ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion_arreglo ::= IDENTIFICADOR ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion_indice ::= IDENTIFICADOR CORCHETE_APERTURA indice CORCHETE_CIERRE actualizacion expr_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_indice",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_variable ::= IDENTIFICADOR actualizacion expr_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion_compuesta ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion_compuesta ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion_compuesta ::= asignacion_indice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_arreglo_op ::= ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_arreglo_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= tipo IDENTIFICADOR ASIGNACION expr_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion ::= tipo IDENTIFICADOR CORCHETE_APERTURA indice CORCHETE_CIERRE declaracion_arreglo_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_unaria ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_unaria ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_expr ::= ELSE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_op ::= else_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relacion ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacion ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relacion ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relacion ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparacion ::= dato_general relacion comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparacion ::= dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_logica ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_logica ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comparar_o_bool ::= comparacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparar_o_bool",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparar_o_bool ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparar_o_bool",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_logica ::= NEGACION comparar_o_bool expr_logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_logica ::= expr_logica op_logica expr_logica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_logica ::= comparar_o_bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_expr ::= IF PARENTESIS_APERTURA expr_logica PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE else_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cases ::= CASE literal DOS_PUNTOS bloques cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cases ::= DEFAULT DOS_PUNTOS bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // switch_expr ::= SWITCH PARENTESIS_APERTURA dato_general PARENTESIS_CIERRE APERTURA_DE_BLOQUE cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // finfuncion ::= RETURN dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op_simple ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op_simple ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_expr ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_expr ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_expr ::= asignacion_compuesta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simple_expr ::= leer_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_expr ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_expr ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_expr ::= finfuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // while_expr ::= WHILE PARENTESIS_APERTURA expr_logica PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_expr ::= FOR PARENTESIS_APERTURA declaracion END_EXPR expr_logica END_EXPR op_simple PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bloque ::= if_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bloque ::= while_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bloque ::= for_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bloque ::= simple_expr END_EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bloque ::= switch_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bloques ::= bloque bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bloques ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // encabezado ::= nombrefuncion PARENTESIS_APERTURA parametros_decl PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezado",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funciones ::= funcion funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funcion ::= tipo encabezado 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // programa ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
