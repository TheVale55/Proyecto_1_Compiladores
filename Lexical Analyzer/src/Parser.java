
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\025\003\000\002\025" +
    "\003\000\002\026\006\000\002\026\004\000\002\027\003" +
    "\000\002\027\002\000\002\007\005\000\002\007\003\000" +
    "\002\054\003\000\002\054\002\000\002\053\006\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\023\004\000\002\023" +
    "\004\000\002\010\005\000\002\010\003\000\002\011\006" +
    "\000\002\012\006\000\002\014\003\000\002\014\004\000" +
    "\002\015\007\000\002\016\010\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\006\000\002\021\002\000\002\022\004\000\002\022\006" +
    "\000\002\022\010\000\002\030\006\000\002\031\003\000" +
    "\002\031\002\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\004\000\002\035\005\000\002\035\003\000\002" +
    "\035\005\000\002\036\012\000\002\037\007\000\002\037" +
    "\005\000\002\040\011\000\002\024\004\000\002\024\003" +
    "\000\002\041\003\000\002\041\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\011\000\002\013\003\000\002\013\003" +
    "\000\002\044\015\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\004\000\002\045\003\000\002" +
    "\046\004\000\002\046\002\000\002\047\011\000\002\050" +
    "\003\000\002\050\004\000\002\051\004\000\002\052\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\014\004\005\005\013\006\006\007\014\010" +
    "\010\001\002\000\004\002\272\001\002\000\006\063\ufff5" +
    "\065\ufff5\001\002\000\006\063\ufff3\065\ufff3\001\002\000" +
    "\016\002\uff97\004\005\005\013\006\006\007\014\010\010" +
    "\001\002\000\006\063\ufff1\065\ufff1\001\002\000\004\002" +
    "\uff94\001\002\000\006\063\016\065\017\001\002\000\006" +
    "\063\ufff4\065\ufff4\001\002\000\006\063\ufff2\065\ufff2\001" +
    "\002\000\004\023\021\001\002\000\004\023\uffff\001\002" +
    "\000\004\023\000\001\002\000\016\002\uff95\004\uff95\005" +
    "\uff95\006\uff95\007\uff95\010\uff95\001\002\000\016\004\005" +
    "\005\013\006\006\007\014\010\010\024\ufffb\001\002\000" +
    "\004\063\266\001\002\000\004\024\ufffc\001\002\000\004" +
    "\024\025\001\002\000\004\016\026\001\002\000\042\004" +
    "\005\005\013\006\006\007\014\010\010\017\uff99\046\041" +
    "\050\032\051\057\052\040\055\053\056\035\061\054\062" +
    "\027\063\056\065\017\001\002\000\004\023\260\001\002" +
    "\000\004\064\uffcd\001\002\000\004\063\245\001\002\000" +
    "\004\023\237\001\002\000\004\064\uffa7\001\002\000\046" +
    "\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\017\uff9e\046" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\061\uff9e\062\uff9e\063\uff9e\065\uff9e\001\002\000" +
    "\022\011\102\012\103\013\101\014\105\015\110\063\162" +
    "\064\uffae\065\017\001\002\000\004\023\232\001\002\000" +
    "\046\004\005\005\013\006\006\007\014\010\010\017\uff99" +
    "\046\041\050\032\051\057\052\040\053\uff99\054\uff99\055" +
    "\053\056\035\061\054\062\027\063\056\065\017\001\002" +
    "\000\004\023\213\001\002\000\004\023\177\001\002\000" +
    "\004\064\uffce\001\002\000\004\064\176\001\002\000\004" +
    "\064\uffcc\001\002\000\004\064\uffaa\001\002\000\004\064" +
    "\uffa4\001\002\000\004\064\uffa9\001\002\000\004\064\uffa5" +
    "\001\002\000\004\064\uffab\001\002\000\004\064\uffa8\001" +
    "\002\000\004\064\uffa6\001\002\000\004\023\173\001\002" +
    "\000\046\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\017" +
    "\uff9b\046\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\061\uff9b\062\uff9b\063\uff9b\065\uff9b\001" +
    "\002\000\030\020\156\022\157\023\uffff\025\072\026\100" +
    "\027\074\030\076\031\071\032\077\033\140\034\137\001" +
    "\002\000\004\023\064\001\002\000\004\017\063\001\002" +
    "\000\046\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\017" +
    "\uff9f\046\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\061\uff9f\062\uff9f\063\uff9f\065\uff9f\001" +
    "\002\000\046\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\017\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\061\uff9d\062\uff9d\063\uff9d\065\uff9d" +
    "\001\002\000\016\002\uff98\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\001\002\000\004\063\066\001\002\000\004" +
    "\060\143\001\002\000\022\022\075\025\072\026\100\027" +
    "\074\030\076\031\071\032\077\060\uffa1\001\002\000\004" +
    "\060\uffa2\001\002\000\004\022\142\001\002\000\026\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\022\uffdd\023\uffdd" +
    "\045\uffdd\063\uffdd\065\uffdd\001\002\000\026\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\022\uffe2\023\uffe2\045\uffe2" +
    "\063\uffe2\065\uffe2\001\002\000\024\011\102\012\103\013" +
    "\101\014\105\015\110\023\115\045\112\063\113\065\017" +
    "\001\002\000\026\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\022\uffe0\023\uffe0\045\uffe0\063\uffe0\065\uffe0\001\002" +
    "\000\024\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\023" +
    "\uffd3\045\uffd3\063\uffd3\065\uffd3\001\002\000\026\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\022\uffde\023\uffde\045" +
    "\uffde\063\uffde\065\uffde\001\002\000\026\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\022\uffdf\023\uffdf\045\uffdf\063" +
    "\uffdf\065\uffdf\001\002\000\026\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\022\uffe1\023\uffe1\045\uffe1\063\uffe1\065" +
    "\uffe1\001\002\000\052\017\uffec\021\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\057\uffec\060\uffec\064\uffec\001\002\000\052\017\ufff0\021" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\057\ufff0\060\ufff0\064\ufff0\001\002" +
    "\000\052\017\uffef\021\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\057\uffef\060" +
    "\uffef\064\uffef\001\002\000\044\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\060\uffba" +
    "\064\uffba\001\002\000\052\017\uffee\021\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\057\uffee\060\uffee\064\uffee\001\002\000\050\017\uffda" +
    "\021\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\060\uffda\064\uffda\001\002\000" +
    "\050\017\uffdb\021\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\060\uffdb\064\uffdb" +
    "\001\002\000\052\017\uffed\021\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\057" +
    "\uffed\060\uffed\064\uffed\001\002\000\044\024\uffcf\025\072" +
    "\026\100\027\074\030\076\031\071\032\077\035\120\036" +
    "\122\037\125\040\123\041\124\042\126\043\127\044\131" +
    "\060\uffcf\064\uffcf\001\002\000\024\011\102\012\103\013" +
    "\101\014\105\015\110\023\115\045\112\063\113\065\017" +
    "\001\002\000\052\023\uffff\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\140\034\137\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\060\uffdc\064\uffdc\001\002\000\044\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\060\uffbb\064\uffbb\001\002\000\024\011\102\012\103\013" +
    "\101\014\105\015\110\023\115\045\112\063\113\065\017" +
    "\001\002\000\044\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\060\uffb5\064\uffb5\001" +
    "\002\000\040\024\121\025\072\026\100\027\074\030\076" +
    "\031\071\032\077\035\120\036\122\037\125\040\123\041" +
    "\124\042\126\043\127\044\131\001\002\000\024\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\023\uffc3\045\uffc3\063" +
    "\uffc3\065\uffc3\001\002\000\044\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\060\uffb4" +
    "\064\uffb4\001\002\000\024\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\023\uffc2\045\uffc2\063\uffc2\065\uffc2\001\002" +
    "\000\024\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\023" +
    "\uffc0\045\uffc0\063\uffc0\065\uffc0\001\002\000\024\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\023\uffbf\045\uffbf\063" +
    "\uffbf\065\uffbf\001\002\000\024\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\023\uffc1\045\uffc1\063\uffc1\065\uffc1\001" +
    "\002\000\024\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\023\uffbe\045\uffbe\063\uffbe\065\uffbe\001\002\000\024\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\023\uffb9\045\uffb9" +
    "\063\uffb9\065\uffb9\001\002\000\024\011\102\012\103\013" +
    "\101\014\105\015\110\023\115\045\112\063\113\065\017" +
    "\001\002\000\024\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\023\uffb8\045\uffb8\063\uffb8\065\uffb8\001\002\000\024" +
    "\011\102\012\103\013\101\014\105\015\110\023\115\045" +
    "\112\063\113\065\017\001\002\000\024\011\102\012\103" +
    "\013\101\014\105\015\110\023\115\045\112\063\113\065" +
    "\017\001\002\000\044\024\uffb6\025\072\026\100\027\074" +
    "\030\076\031\071\032\077\035\120\036\122\037\125\040" +
    "\123\041\124\042\126\043\127\044\131\060\uffb6\064\uffb6" +
    "\001\002\000\044\024\uffbd\025\072\026\100\027\074\030" +
    "\076\031\071\032\077\035\120\036\122\037\125\040\123" +
    "\041\124\042\126\043\127\044\131\060\uffbd\064\uffbd\001" +
    "\002\000\044\024\uffbc\025\072\026\100\027\074\030\076" +
    "\031\071\032\077\035\120\036\122\037\125\040\123\041" +
    "\124\042\126\043\127\044\131\060\uffbc\064\uffbc\001\002" +
    "\000\044\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\060\uffd8\064\uffd8\001\002\000" +
    "\044\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\060\uffd9\064\uffd9\001\002\000\044" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\035\120\036\122\037\125\040\123\041\124\042\126" +
    "\043\uffb7\044\uffb7\060\uffb7\064\uffb7\001\002\000\024\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\023\uffd2\045\uffd2" +
    "\063\uffd2\065\uffd2\001\002\000\024\011\102\012\103\013" +
    "\101\014\105\015\110\023\115\045\112\063\113\065\017" +
    "\001\002\000\040\025\072\026\100\027\074\030\076\031" +
    "\071\032\077\035\120\036\122\037\125\040\123\041\124" +
    "\042\126\043\127\044\131\060\145\001\002\000\004\063" +
    "\146\001\002\000\024\022\075\025\072\026\100\027\074" +
    "\030\076\031\071\032\077\033\140\034\137\001\002\000" +
    "\004\024\uffac\001\002\000\004\024\uffad\001\002\000\004" +
    "\024\152\001\002\000\004\016\153\001\002\000\042\004" +
    "\005\005\013\006\006\007\014\010\010\017\uff99\046\041" +
    "\050\032\051\057\052\040\055\053\056\035\061\054\062" +
    "\027\063\056\065\017\001\002\000\004\017\155\001\002" +
    "\000\046\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\017" +
    "\uffa0\046\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\061\uffa0\062\uffa0\063\uffa0\065\uffa0\001" +
    "\002\000\020\011\102\012\103\013\101\014\105\015\110" +
    "\063\162\065\017\001\002\000\026\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\160\023\uffd3\045\uffd3\063\uffd3" +
    "\065\uffd3\001\002\000\020\011\102\012\103\013\101\014" +
    "\105\015\110\063\162\065\017\001\002\000\004\017\166" +
    "\001\002\000\016\017\uffdc\021\uffdc\023\uffff\024\uffdc\060" +
    "\uffdc\064\uffdc\001\002\000\010\017\ufff9\024\ufff9\060\164" +
    "\001\002\000\020\011\102\012\103\013\101\014\105\015" +
    "\110\063\162\065\017\001\002\000\006\017\ufffa\024\ufffa" +
    "\001\002\000\004\064\uffd1\001\002\000\004\021\170\001" +
    "\002\000\020\022\075\025\072\026\100\027\074\030\076" +
    "\031\071\032\077\001\002\000\024\011\102\012\103\013" +
    "\101\014\105\015\110\023\115\045\112\063\113\065\017" +
    "\001\002\000\040\025\072\026\100\027\074\030\076\031" +
    "\071\032\077\035\120\036\122\037\125\040\123\041\124" +
    "\042\126\043\127\044\131\064\uffd0\001\002\000\020\011" +
    "\102\012\103\013\101\014\105\015\110\063\162\065\017" +
    "\001\002\000\004\024\175\001\002\000\004\064\uffd5\001" +
    "\002\000\046\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\017\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c\065\uff9c" +
    "\001\002\000\024\011\102\012\103\013\101\014\105\015" +
    "\110\023\115\045\112\063\113\065\017\001\002\000\040" +
    "\024\201\025\072\026\100\027\074\030\076\031\071\032" +
    "\077\035\120\036\122\037\125\040\123\041\124\042\126" +
    "\043\127\044\131\001\002\000\004\016\202\001\002\000" +
    "\042\004\005\005\013\006\006\007\014\010\010\017\uff99" +
    "\046\041\050\032\051\057\052\040\055\053\056\035\061" +
    "\054\062\027\063\056\065\017\001\002\000\004\017\204" +
    "\001\002\000\050\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\017\uffc4\046\uffc4\047\206\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\065\uffc4\001\002\000\046\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\017\uffc5\046\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\065\uffc5\001\002\000\004\016\210\001\002\000" +
    "\046\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\017\uffb3" +
    "\046\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3\001\002" +
    "\000\042\004\005\005\013\006\006\007\014\010\010\017" +
    "\uff99\046\041\050\032\051\057\052\040\055\053\056\035" +
    "\061\054\062\027\063\056\065\017\001\002\000\004\017" +
    "\212\001\002\000\046\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\017\uffc6\046\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\065\uffc6\001\002\000\020\011\102\012\103\013\101\014" +
    "\105\015\110\063\162\065\017\001\002\000\004\024\215" +
    "\001\002\000\004\016\216\001\002\000\006\053\221\054" +
    "\217\001\002\000\004\057\227\001\002\000\004\017\226" +
    "\001\002\000\014\011\102\012\103\013\101\014\105\015" +
    "\110\001\002\000\004\057\223\001\002\000\044\004\005" +
    "\005\013\006\006\007\014\010\010\046\041\050\032\051" +
    "\057\052\040\053\uff99\054\uff99\055\053\056\035\061\054" +
    "\062\027\063\056\065\017\001\002\000\006\053\221\054" +
    "\217\001\002\000\004\017\uffb2\001\002\000\046\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\017\uffb0\046\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\065\uffb0\001\002\000\042\004" +
    "\005\005\013\006\006\007\014\010\010\017\uff99\046\041" +
    "\050\032\051\057\052\040\055\053\056\035\061\054\062" +
    "\027\063\056\065\017\001\002\000\004\017\uffb1\001\002" +
    "\000\010\017\uff9a\053\uff9a\054\uff9a\001\002\000\022\011" +
    "\102\012\103\013\101\014\105\015\110\024\ufff7\063\162" +
    "\065\017\001\002\000\004\024\235\001\002\000\004\024" +
    "\ufff8\001\002\000\050\017\ufff6\021\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\060\ufff6\064\ufff6\001\002\000\004\064\uffaf\001\002\000" +
    "\024\011\102\012\103\013\101\014\105\015\110\023\115" +
    "\045\112\063\113\065\017\001\002\000\040\024\241\025" +
    "\072\026\100\027\074\030\076\031\071\032\077\035\120" +
    "\036\122\037\125\040\123\041\124\042\126\043\127\044" +
    "\131\001\002\000\004\016\242\001\002\000\042\004\005" +
    "\005\013\006\006\007\014\010\010\017\uff99\046\041\050" +
    "\032\051\057\052\040\055\053\056\035\061\054\062\027" +
    "\063\056\065\017\001\002\000\004\017\244\001\002\000" +
    "\046\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\017\uffa3" +
    "\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\061\uffa3\062\uffa3\063\uffa3\065\uffa3\001\002" +
    "\000\010\020\247\022\246\064\uffc9\001\002\000\024\011" +
    "\102\012\103\013\101\014\105\015\110\023\115\045\112" +
    "\063\113\065\017\001\002\000\020\011\102\012\103\013" +
    "\101\014\105\015\110\063\162\065\017\001\002\000\004" +
    "\021\251\001\002\000\006\022\252\064\uffca\001\002\000" +
    "\004\016\254\001\002\000\004\064\uffc7\001\002\000\020" +
    "\011\102\012\103\013\101\014\105\015\110\063\162\065" +
    "\017\001\002\000\004\017\256\001\002\000\004\064\uffcb" +
    "\001\002\000\040\025\072\026\100\027\074\030\076\031" +
    "\071\032\077\035\120\036\122\037\125\040\123\041\124" +
    "\042\126\043\127\044\131\064\uffc8\001\002\000\004\063" +
    "\261\001\002\000\006\024\uffd6\060\264\001\002\000\004" +
    "\024\263\001\002\000\004\064\uffd4\001\002\000\004\063" +
    "\261\001\002\000\004\024\uffd7\001\002\000\006\024\ufffd" +
    "\060\267\001\002\000\014\004\005\005\013\006\006\007" +
    "\014\010\010\001\002\000\004\024\ufffe\001\002\000\004" +
    "\002\uff96\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\012\002\011\050\010\051\006\052\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\011\050\270\051\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\014\047\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\021\026\022\027\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\002\030\011\032\012\051\015\027\016\043\017\041\020" +
    "\046\022\044\023\050\024\045\025\035\036\060\040\054" +
    "\042\042\043\033\044\061\045\036\046\057\053\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\106\005\235\025\035\053\105\001\001\000\002" +
    "\001\001\000\050\002\030\011\032\012\051\015\027\016" +
    "\043\017\041\020\046\022\044\023\050\024\045\025\035" +
    "\036\060\040\054\042\042\043\033\044\061\045\036\046" +
    "\230\053\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\067" +
    "\014\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\064\017\066\001\001\000\002\001\001\000\006\004" +
    "\067\014\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\106\005" +
    "\113\023\103\025\035\033\115\035\110\053\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\127\032\131\034\132\001\001\000\020\003" +
    "\106\005\113\023\103\025\035\033\115\035\140\053\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\106\005\113\023\103\025\035\033\115\035\116\053\105" +
    "\001\001\000\002\001\001\000\010\004\127\032\131\034" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\106" +
    "\005\113\023\103\025\035\033\115\035\135\053\105\001" +
    "\001\000\002\001\001\000\020\003\106\005\113\023\103" +
    "\025\035\033\115\035\134\053\105\001\001\000\020\003" +
    "\106\005\113\023\103\025\035\033\115\035\133\053\105" +
    "\001\001\000\010\004\127\032\131\034\132\001\001\000" +
    "\010\004\127\032\131\034\132\001\001\000\010\004\127" +
    "\032\131\034\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\127\032\131\034\132\001\001\000\002" +
    "\001\001\000\020\003\106\005\113\023\103\025\035\033" +
    "\115\035\143\053\105\001\001\000\010\004\127\032\131" +
    "\034\132\001\001\000\010\017\146\023\147\041\150\001" +
    "\001\000\006\004\067\014\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\030\011\032\012\051\015\027\016\043\017\041" +
    "\020\046\022\044\023\050\024\045\025\035\036\060\040" +
    "\054\042\042\043\033\044\061\045\036\046\153\053\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\106\005\166\025\035\053\105\001\001\000\002\001\001" +
    "\000\014\003\106\005\162\007\160\025\035\053\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\106\005\162\007\164\025\035\053\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\067\014\170\001\001\000\020\003\106\005" +
    "\113\023\103\025\035\033\115\035\171\053\105\001\001" +
    "\000\010\004\127\032\131\034\132\001\001\000\014\003" +
    "\106\005\162\007\173\025\035\053\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\106\005\113\023\103\025\035\033\115\035\177\053\105" +
    "\001\001\000\010\004\127\032\131\034\132\001\001\000" +
    "\002\001\001\000\050\002\030\011\032\012\051\015\027" +
    "\016\043\017\041\020\046\022\044\023\050\024\045\025" +
    "\035\036\060\040\054\042\042\043\033\044\061\045\036" +
    "\046\202\053\047\001\001\000\002\001\001\000\006\030" +
    "\204\031\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\030\011\032\012\051\015" +
    "\027\016\043\017\041\020\046\022\044\023\050\024\045" +
    "\025\035\036\060\040\054\042\042\043\033\044\061\045" +
    "\036\046\210\053\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\106\005\213\025\035\053\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\221\001\001\000\002\001\001\000\050\002\030\011\032" +
    "\012\051\015\027\016\043\017\041\020\046\022\044\023" +
    "\050\024\045\025\035\036\060\040\054\042\042\043\033" +
    "\044\061\045\036\046\223\053\047\001\001\000\004\037" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\002\030\011\032\012\051\015\027\016\043\017\041\020" +
    "\046\022\044\023\050\024\045\025\035\036\060\040\054" +
    "\042\042\043\033\044\061\045\036\046\227\053\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\106" +
    "\005\162\007\233\025\035\053\105\054\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\106\005\113\023\103\025\035\033" +
    "\115\035\237\053\105\001\001\000\010\004\127\032\131" +
    "\034\132\001\001\000\002\001\001\000\050\002\030\011" +
    "\032\012\051\015\027\016\043\017\041\020\046\022\044" +
    "\023\050\024\045\025\035\036\060\040\054\042\042\043" +
    "\033\044\061\045\036\046\242\053\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\106\005\113\023\103\025\035\033\115\035\256\053\105" +
    "\001\001\000\012\003\106\005\247\025\035\053\105\001" +
    "\001\000\002\001\001\000\004\021\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\106\005\162\007" +
    "\254\025\035\053\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\127\032\131\034\132\001\001\000" +
    "\004\010\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\021\026\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
    private Lexer scanner;
    private HashMap<String, ArrayList<String>> listaTablasSimbolos;
    private String currentHash;

    public Parser(Lexer scanner) {
        this.scanner = scanner;
        this.listaTablasSimbolos = new HashMap<>();
        this.currentHash = "";
    }

    public void setSymbolTable(HashMap<String, ArrayList<String>> tablaSimbolos) {
        this.listaTablasSimbolos = tablaSimbolos;
    }

    private void agregarSimbolo(String tipoTabla, String identificador, String tipo) {
        ArrayList<String> nuevaEntrada = listaTablasSimbolos.getOrDefault(currentHash, new ArrayList<>());

        // Verificar si ya existe el símbolo en el ámbito actual
        for (String simbolo : nuevaEntrada) {
            if (simbolo.contains("identificador:" + identificador)) {
                System.err.println("Error: Identificador " + identificador + " ya existe en el ámbito " + currentHash);
                return;
            }
        }

        // Agregar símbolo si no existe
        nuevaEntrada.add("tipo:" + tipoTabla + " identificador:" + identificador + " tipo_dato:" + tipo);
        listaTablasSimbolos.put(currentHash, nuevaEntrada);
    }

    public void imprimirTablaSimbolos() {
        for (String key : listaTablasSimbolos.keySet()) {
            System.out.println("Ámbito: " + key);
            System.out.println("Símbolos: ");
            for (String item : listaTablasSimbolos.get(key)) {
                System.out.println("    " + item);
            }
            System.out.println("");
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nombrefuncion ::= MAIN 
            {
              Object RESULT =null;
		 
                     currentHash = "main"; 
                     System.out.println("Ámbito cambiado a: main"); 
                     listaTablasSimbolos.putIfAbsent(currentHash, new ArrayList<>());
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nombrefuncion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     currentHash = idVar.toString(); 
                     System.out.println("Ámbito cambiado a: " + idVar);
                     listaTablasSimbolos.putIfAbsent(currentHash, new ArrayList<>());
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parametro_decl ::= tipo IDENTIFICADOR COMMA parametro_decl 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                     System.out.println("Parámetro: " + idVar); 
                     agregarSimbolo("parametro", idVar.toString(), tipo.toString()); 
                     RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametro_decl ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     System.out.println("Parámetro: " + idVar); 
                     agregarSimbolo("parametro", idVar.toString(), tipo.toString()); 
                     RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros_decl ::= parametro_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros_decl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sec_oper ::= dato_general COMMA sec_oper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sec_oper ::= dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros_llamada ::= sec_oper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros_llamada ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // llamada_funcion ::= nombrefuncion PARENTESIS_APERTURA parametros_llamada PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("TIPO: int"); RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("TIPO: float"); RESULT = "float"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 System.out.println("TIPO: bool"); RESULT = "bool"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 System.out.println("TIPO: char"); RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("TIPO: string"); RESULT = "string"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		int intVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal entero: " + intVar); RESULT = intVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal string: " + strVar); RESULT = strVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int floatVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floatVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object floatVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal float: " + floatVar); RESULT = floatVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int charVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object charVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal char: " + charVar); RESULT = charVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object boolVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Literal booleano: " + boolVar); RESULT = boolVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr SUMA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión suma: " + e1 + " + " + e2); RESULT = e1 + " + " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr RESTA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión resta: " + e1 + " - " + e2); RESULT = e1 + " - " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MULTIPLICACION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión multiplicación: " + e1 + " * " + e2); RESULT = e1 + " * " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión división: " + e1 + " / " + e2); RESULT = e1 + " / " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MODULO expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión módulo: " + e1 + " % " + e2); RESULT = e1 + " % " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr POTENCIA expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Expresión potencia: " + e1 + " ^ " + e2); RESULT = e1 + " ^ " + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= PARENTESIS_APERTURA expr PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Expresión entre paréntesis: " + e); RESULT = "(" + e + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Identificador en expresión: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_aritmeticas ::= SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_aritmeticas ::= RESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_aritmeticas ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_aritmeticas ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op_aritmeticas ::= MODULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_aritmeticas ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dato_general ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Variable: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dato_general ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dato_general ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_unaria ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Incremento: " + idVar); RESULT = idVar.toString() + "++"; agregarSimbolo("operacion", idVar.toString(), "incremento"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_unaria ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("Decremento: " + idVar); RESULT = idVar.toString() + "--"; agregarSimbolo("operacion", idVar.toString(), "decremento"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sec_var ::= IDENTIFICADOR COMMA sec_var 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Variable en lista: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Variable en lista: " + idVar); RESULT = idVar.toString(); agregarSimbolo("variable", idVar.toString(), "N/A"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // imprimir ::= PRINT PARENTESIS_APERTURA sec_oper PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Imprimir expresión"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // leer_var ::= READ PARENTESIS_APERTURA sec_var PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		 System.out.println("Leer variables"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("leer_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actualizacion ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // actualizacion ::= op_aritmeticas ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacion_arreglo ::= IDENTIFICADOR ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("Asignación arreglo: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacion_indice ::= IDENTIFICADOR CORCHETE_APERTURA dato_general CORCHETE_CIERRE actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("Asignación índice: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_indice",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion_variable ::= IDENTIFICADOR actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Asignación variable: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion_compuesta ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion_compuesta ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion_compuesta ::= asignacion_indice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_arreglo_op ::= ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_arreglo_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Declaración: " + idVar); RESULT = idVar.toString(); agregarSimbolo("declaracion", idVar.toString(), tipo.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= tipo IDENTIFICADOR ASIGNACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Declaración con asignación: " + idVar); RESULT = idVar.toString(); agregarSimbolo("declaracion", idVar.toString(), tipo.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= tipo IDENTIFICADOR CORCHETE_APERTURA dato_general CORCHETE_CIERRE declaracion_arreglo_op 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 System.out.println("Declaración arreglo: " + idVar); RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_expr ::= ELSE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_op ::= else_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relacion ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relacion ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relacion ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relacion ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comparacion_operacion ::= expr_logica_aritmetica relacion expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comparacion_operacion ::= expr_logica_aritmetica op_aritmeticas expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comparacion_operacion ::= dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comparacion_operacion ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op_logica ::= CONJUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op_logica ::= DISYUNCION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_logica_aritmetica ::= NEGACION expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_logica_aritmetica ::= expr_logica_aritmetica op_logica expr_logica_aritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_logica_aritmetica ::= comparacion_operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_logica_aritmetica ::= PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_expr ::= IF PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE else_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cases ::= CASE literal DOS_PUNTOS bloques cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cases ::= DEFAULT DOS_PUNTOS bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switch_expr ::= SWITCH PARENTESIS_APERTURA dato_general PARENTESIS_CIERRE APERTURA_DE_BLOQUE cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // finfuncion ::= RETURN dato_general 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // finfuncion ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_simple ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_simple ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_expr ::= op_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_expr ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // simple_expr ::= asignacion_compuesta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_expr ::= leer_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_expr ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_expr ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_expr ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_expr ::= finfuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // while_expr ::= WHILE PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // inicializacion ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // inicializacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_expr ::= FOR PARENTESIS_APERTURA inicializacion COMMA expr_logica_aritmetica COMMA op_simple PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bloque ::= if_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bloque ::= while_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bloque ::= for_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bloque ::= simple_expr END_EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // bloque ::= switch_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bloques ::= bloque bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bloques ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // encabezado ::= nombrefuncion PARENTESIS_APERTURA parametros_decl PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("encabezado",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // funciones ::= funcion funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // funcion ::= tipo encabezado 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // programa ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
