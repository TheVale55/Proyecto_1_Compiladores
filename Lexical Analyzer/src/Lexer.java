// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexercup.flex

/* JF1ex exarnole: partial Java language lexer specification */

import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

/* This class is a simple example lexer. */

/* Lexer base tomado de la p√°gina de Cup que requiere sym para utilizarse como Lexer */

/* Este lexer es utilizado por el parser generado por BasicLexerCup (parser.java que se genera) */


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\5\11\0\1\6\1\7\1\10\1\11"+
    "\11\12\7\0\32\13\1\0\1\14\2\0\1\15\1\0"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\13\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\2\5\24\1"+
    "\1\6\1\7\1\1\2\4\50\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\61\0\1\17\11\0"+
    "\1\20\3\0\1\21\13\0\1\22\14\0\1\23\3\0"+
    "\1\24\3\0\1\22\5\0\1\25\2\0\1\26\3\0"+
    "\1\27\1\30\1\0\1\31\15\0\1\32\1\33\1\34"+
    "\5\0\1\35\1\36\11\0\1\37\1\40\1\0\1\41"+
    "\12\0\1\42\1\0\1\43\4\0\1\44\1\45\1\46"+
    "\2\0\1\47\1\0\1\50\1\51\3\0\1\52\1\53"+
    "\1\54\3\0\1\55\2\0\1\56\2\0\1\57\1\60"+
    "\6\0\1\61\1\62\2\0\1\63\1\0\1\64\4\0"+
    "\1\65\1\66\3\0\1\67\1\70\1\0\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\114\0\162\0\114\0\230\0\276"+
    "\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\114"+
    "\0\u044e\0\114\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532"+
    "\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662"+
    "\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792"+
    "\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2"+
    "\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2"+
    "\0\u0a18\0\u0a3e\0\u0a64\0\114\0\114\0\114\0\114\0\114"+
    "\0\u04e6\0\u0a8a\0\114\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008"+
    "\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\114\0\u11f6\0\u121c\0\u1242"+
    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\114\0\u134c"+
    "\0\u1372\0\u1398\0\114\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456"+
    "\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586"+
    "\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6"+
    "\0\u16dc\0\u1702\0\u1728\0\114\0\u174e\0\u1774\0\u179a\0\114"+
    "\0\u17c0\0\u17e6\0\u180c\0\114\0\u1832\0\u1858\0\u187e\0\u18a4"+
    "\0\u18ca\0\114\0\u18f0\0\u1916\0\114\0\u193c\0\u1962\0\u1988"+
    "\0\114\0\114\0\u19ae\0\114\0\u19d4\0\u19fa\0\u1a20\0\u1a46"+
    "\0\u1a6c\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76"+
    "\0\u1b9c\0\114\0\114\0\114\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34"+
    "\0\u1c5a\0\114\0\114\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18"+
    "\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\114\0\114\0\u1dd6\0\114"+
    "\0\u1dfc\0\u1e22\0\u1e48\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06"+
    "\0\u1f2c\0\u1f52\0\114\0\u1f78\0\114\0\u1f9e\0\u1fc4\0\u1fea"+
    "\0\u2010\0\114\0\114\0\114\0\u2036\0\u205c\0\114\0\u2082"+
    "\0\114\0\114\0\u20a8\0\u20ce\0\u20f4\0\114\0\114\0\114"+
    "\0\u211a\0\u2140\0\u2166\0\114\0\u218c\0\u21b2\0\114\0\u21d8"+
    "\0\u21fe\0\114\0\114\0\u2224\0\u224a\0\u2270\0\u2296\0\u22bc"+
    "\0\u22e2\0\114\0\114\0\u2308\0\u232e\0\114\0\u2354\0\114"+
    "\0\u237a\0\u23a0\0\u23c6\0\u23ec\0\114\0\114\0\u2412\0\u2438"+
    "\0\u245e\0\114\0\114\0\u2484\0\114\0\114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\2\3\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\3\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\4\3\2\37\2\3\1\40\7\37\1\41\31\37\50\0"+
    "\1\4\43\0\2\7\1\42\1\43\42\7\11\0\1\44"+
    "\1\12\42\0\1\45\1\0\2\44\42\0\1\46\1\0"+
    "\2\12\50\0\1\47\43\0\1\50\2\0\23\50\1\51"+
    "\4\50\17\0\1\52\1\0\1\53\42\0\1\54\16\0"+
    "\1\55\36\0\1\56\3\0\1\57\5\0\1\60\45\0"+
    "\1\61\34\0\1\62\1\0\1\63\4\0\1\64\2\0"+
    "\1\65\22\0\1\66\7\0\1\67\35\0\1\70\16\0"+
    "\1\71\26\0\1\72\7\0\1\73\50\0\1\74\32\0"+
    "\1\75\3\0\1\76\3\0\1\77\35\0\1\100\13\0"+
    "\1\101\46\0\1\102\52\0\1\103\27\0\1\104\7\0"+
    "\1\105\41\0\1\106\2\0\1\107\51\0\1\110\37\0"+
    "\1\111\3\0\1\112\30\0\1\113\27\0\2\37\3\0"+
    "\7\37\1\0\31\37\4\0\1\114\7\0\1\115\14\0"+
    "\1\116\3\0\1\117\1\0\1\120\10\0\1\42\52\0"+
    "\1\46\1\0\2\44\44\0\2\121\44\0\1\46\1\121"+
    "\33\0\15\47\1\122\30\47\11\0\3\50\1\0\1\123"+
    "\30\50\11\0\3\50\1\0\1\123\4\50\1\124\23\50"+
    "\35\0\1\125\51\0\1\126\33\0\1\127\50\0\1\130"+
    "\35\0\1\131\53\0\1\132\4\0\1\133\43\0\1\134"+
    "\34\0\1\135\46\0\1\136\61\0\1\137\1\0\1\140"+
    "\24\0\1\141\47\0\1\142\52\0\1\143\47\0\1\144"+
    "\52\0\1\145\35\0\1\146\40\0\1\147\62\0\1\150"+
    "\46\0\1\151\32\0\1\152\10\0\1\153\37\0\1\154"+
    "\47\0\1\155\51\0\1\156\3\0\1\157\24\0\1\160"+
    "\47\0\1\161\51\0\1\162\63\0\1\163\22\0\1\164"+
    "\50\0\1\165\53\0\1\166\53\0\1\167\44\0\1\170"+
    "\24\0\1\171\64\0\1\172\10\0\10\47\1\42\35\47"+
    "\11\0\3\50\1\0\1\123\17\50\1\173\10\50\22\0"+
    "\1\174\51\0\1\175\56\0\1\176\36\0\1\177\52\0"+
    "\1\200\32\0\1\201\62\0\1\202\34\0\1\203\50\0"+
    "\1\204\46\0\1\205\50\0\1\206\36\0\1\207\11\0"+
    "\1\210\45\0\1\211\42\0\1\212\46\0\1\213\44\0"+
    "\1\214\43\0\1\215\43\0\1\216\32\0\1\217\66\0"+
    "\1\220\30\0\1\221\55\0\1\222\57\0\1\223\21\0"+
    "\1\224\63\0\1\225\44\0\1\226\36\0\1\227\44\0"+
    "\1\230\51\0\1\231\36\0\1\232\45\0\1\233\55\0"+
    "\1\234\53\0\1\235\47\0\1\236\25\0\1\237\51\0"+
    "\1\240\56\0\1\241\34\0\1\242\30\0\3\50\1\0"+
    "\1\123\1\243\27\50\20\0\1\244\1\0\1\245\12\0"+
    "\1\246\32\0\1\247\41\0\1\250\55\0\1\251\54\0"+
    "\1\252\47\0\1\253\24\0\1\254\50\0\1\255\45\0"+
    "\1\256\46\0\1\257\41\0\1\260\51\0\1\261\43\0"+
    "\1\262\51\0\1\263\43\0\1\264\45\0\1\265\41\0"+
    "\1\266\47\0\1\267\57\0\1\270\50\0\1\271\46\0"+
    "\1\272\34\0\1\273\57\0\1\274\24\0\1\275\50\0"+
    "\1\276\46\0\1\277\61\0\1\300\40\0\1\301\52\0"+
    "\1\302\36\0\1\303\40\0\1\304\42\0\1\305\57\0"+
    "\1\306\44\0\1\307\52\0\1\310\42\0\1\311\24\0"+
    "\3\50\1\0\1\123\13\50\1\312\14\50\40\0\1\313"+
    "\35\0\1\314\37\0\1\315\54\0\1\316\61\0\1\317"+
    "\36\0\1\320\25\0\1\321\45\0\1\322\61\0\1\323"+
    "\35\0\1\324\47\0\1\325\50\0\1\326\43\0\1\327"+
    "\55\0\1\330\34\0\1\331\56\0\1\332\35\0\1\333"+
    "\55\0\1\334\30\0\1\335\57\0\1\336\41\0\1\337"+
    "\35\0\1\340\46\0\1\341\55\0\1\342\41\0\1\343"+
    "\40\0\1\344\61\0\1\345\45\0\1\346\35\0\1\347"+
    "\61\0\1\350\20\0\3\50\1\0\1\123\14\50\1\351"+
    "\13\50\22\0\1\352\56\0\1\353\36\0\1\354\60\0"+
    "\1\355\24\0\1\356\66\0\1\357\26\0\1\360\1\0"+
    "\1\361\12\0\1\362\26\0\1\363\70\0\1\364\22\0"+
    "\1\365\51\0\1\366\41\0\1\367\55\0\1\370\35\0"+
    "\1\371\64\0\1\372\53\0\1\373\23\0\1\374\64\0"+
    "\1\375\23\0\1\376\61\0\1\377\42\0\1\u0100\40\0"+
    "\1\u0101\34\0\3\50\1\0\1\u0102\30\50\31\0\1\u0103"+
    "\32\0\1\u0104\45\0\1\u0105\61\0\1\u0106\50\0\1\u0107"+
    "\26\0\1\u0108\67\0\1\u0109\35\0\1\u010a\37\0\1\u010b"+
    "\45\0\1\u010c\45\0\1\u010d\52\0\1\u010e\34\0\1\u010f"+
    "\57\0\1\u0110\37\0\1\u0111\45\0\1\u0112\52\0\1\u0113"+
    "\55\0\1\u0114\42\0\1\u0115\40\0\1\u0116\40\0\1\u0117"+
    "\56\0\1\u0118\36\0\1\u0119\52\0\1\u011a\46\0\1\u011b"+
    "\32\0\1\u011c\57\0\1\u011d\46\0\1\u011e\53\0\1\u011f"+
    "\37\0\1\u0120\44\0\1\u0121\32\0\1\u0122\45\0\1\u0123"+
    "\55\0\1\u0124\35\0\1\u0125\51\0\1\u0126\62\0\1\u0127"+
    "\42\0\1\u0128\40\0\1\u0129\50\0\1\u012a\45\0\1\u012b"+
    "\53\0\1\u012c\37\0\1\u012d\35\0\1\u012e\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9386];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\31\1\1\11\1\1\1\11"+
    "\1\1\50\0\5\11\1\1\1\0\1\11\61\0\1\11"+
    "\11\0\1\11\3\0\1\11\13\0\1\1\14\0\1\11"+
    "\3\0\1\11\3\0\1\11\5\0\1\11\2\0\1\11"+
    "\3\0\2\11\1\0\1\11\15\0\3\11\5\0\2\11"+
    "\11\0\2\11\1\0\1\11\12\0\1\11\1\0\1\11"+
    "\4\0\3\11\2\0\1\11\1\0\2\11\3\0\3\11"+
    "\3\0\1\11\2\0\1\11\2\0\2\11\6\0\2\11"+
    "\2\0\1\11\1\0\1\11\4\0\2\11\3\0\2\11"+
    "\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public BufferedWriter outputFile;

    public void createWriter(String root) throws IOException {
        outputFile = new BufferedWriter(new FileWriter(root));
    }

    public void closeWriter() throws IOException {
        if(outputFile != null) {
            outputFile.close();
        }
    }

    public void writeToken(int tokenNum) throws IOException {
        if(outputFile != null) {
            String text = "Token: " + tokenNum + ", Valor: " +yytext() + ", l√≠nea: " + yyline + ", columna: " + yycolumn;
            if(tokenNum == sym.ERROR) text += " (Error l√©xico)";
            text+='\n';
            outputFile.write(text);
            outputFile.flush();
        }
    }


    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(sym.EOF, yytext());
            }  // fall though
            case 303: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { writeToken(sym.ERROR); return symbol(sym.ERROR, yytext());
            }
          // fall through
          case 59: break;
          case 2:
            { /* Ignore white space */
            }
          // fall through
          case 60: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 61: break;
          case 4:
            { writeToken(sym.COMENTARIO); return symbol(sym.COMENTARIO, yytext());
            }
          // fall through
          case 62: break;
          case 5:
            { writeToken(sym.INT_LITERAL); return symbol(sym.INT_LITERAL, Integer.parseInt(yytext()));
            }
          // fall through
          case 63: break;
          case 6:
            { string.append(yytext());
            }
          // fall through
          case 64: break;
          case 7:
            { yybegin(YYINITIAL); writeToken(sym.STRING_LITERAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
          // fall through
          case 65: break;
          case 8:
            { string.append("\"");
            }
          // fall through
          case 66: break;
          case 9:
            { string.append("\\");
            }
          // fall through
          case 67: break;
          case 10:
            { string.append("\n");
            }
          // fall through
          case 68: break;
          case 11:
            { string.append("\r");
            }
          // fall through
          case 69: break;
          case 12:
            { string.append("\t");
            }
          // fall through
          case 70: break;
          case 13:
            { writeToken(sym.FLOAT_LITERAL); return symbol(sym.FLOAT_LITERAL, Float.parseFloat(yytext()));
            }
          // fall through
          case 71: break;
          case 14:
            { writeToken(sym.IDENTIFICADOR); return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 72: break;
          case 15:
            { writeToken(sym.IF); return symbol(sym.IF, yytext());
            }
          // fall through
          case 73: break;
          case 16:
            { writeToken(sym.ELSE); return symbol(sym.ELSE, yytext());
            }
          // fall through
          case 74: break;
          case 17:
            { writeToken(sym.IGUALDAD); return symbol(sym.IGUALDAD, yytext());
            }
          // fall through
          case 75: break;
          case 18:
            { writeToken(sym.BOOL_LITERAL); return symbol(sym.BOOL_LITERAL, yytext());
            }
          // fall through
          case 76: break;
          case 19:
            { writeToken(sym.BREAK); return symbol(sym.BREAK, yytext());
            }
          // fall through
          case 77: break;
          case 20:
            { writeToken(sym.RETURN); return symbol(sym.RETURN, yytext());
            }
          // fall through
          case 78: break;
          case 21:
            { writeToken(sym.MODULO); return symbol(sym.MODULO, yytext());
            }
          // fall through
          case 79: break;
          case 22:
            { writeToken(sym.PRINT); return symbol(sym.PRINT, yytext());
            }
          // fall through
          case 80: break;
          case 23:
            { writeToken(sym.INCREMENTO); return symbol(sym.INCREMENTO, yytext());
            }
          // fall through
          case 81: break;
          case 24:
            { writeToken(sym.DIVISION); return symbol(sym.DIVISION, yytext());
            }
          // fall through
          case 82: break;
          case 25:
            { writeToken(sym.DOS_PUNTOS); return symbol(sym.DOS_PUNTOS, yytext());
            }
          // fall through
          case 83: break;
          case 26:
            { writeToken(sym.STRING); return symbol(sym.STRING, yytext());
            }
          // fall through
          case 84: break;
          case 27:
            { writeToken(sym.CHAR); return symbol(sym.CHAR, yytext());
            }
          // fall through
          case 85: break;
          case 28:
            { writeToken(sym.FOR); return symbol(sym.FOR, yytext());
            }
          // fall through
          case 86: break;
          case 29:
            { writeToken(sym.DISYUNCION); return symbol(sym.DISYUNCION, yytext());
            }
          // fall through
          case 87: break;
          case 30:
            { writeToken(sym.DECREMENTO); return symbol(sym.DECREMENTO, yytext());
            }
          // fall through
          case 88: break;
          case 31:
            { writeToken(sym.BOOL); return symbol(sym.BOOL, yytext());
            }
          // fall through
          case 89: break;
          case 32:
            { writeToken(sym.DEFAULT); return symbol(sym.DEFAULT, yytext());
            }
          // fall through
          case 90: break;
          case 33:
            { writeToken(sym.SWITCH); return symbol(sym.SWITCH, yytext());
            }
          // fall through
          case 91: break;
          case 34:
            { writeToken(sym.ASIGNACION); return symbol(sym.ASIGNACION, yytext());
            }
          // fall through
          case 92: break;
          case 35:
            { writeToken(sym.READ); return symbol(sym.READ, yytext());
            }
          // fall through
          case 93: break;
          case 36:
            { writeToken(sym.CONJUNCION); return symbol(sym.CONJUNCION, yytext());
            }
          // fall through
          case 94: break;
          case 37:
            { writeToken(sym.MAYOR); return symbol(sym.MAYOR, yytext());
            }
          // fall through
          case 95: break;
          case 38:
            { writeToken(sym.SUMA); return symbol(sym.SUMA, yytext());
            }
          // fall through
          case 96: break;
          case 39:
            { writeToken(sym.INTEGER); return symbol(sym.INTEGER, yytext());
            }
          // fall through
          case 97: break;
          case 40:
            { writeToken(sym.MAYOR_IGUAL); return symbol(sym.MAYOR_IGUAL, yytext());
            }
          // fall through
          case 98: break;
          case 41:
            { writeToken(sym.MAIN); return symbol(sym.MAIN, yytext());
            }
          // fall through
          case 99: break;
          case 42:
            { writeToken(sym.POTENCIA); return symbol(sym.POTENCIA, yytext());
            }
          // fall through
          case 100: break;
          case 43:
            { writeToken(sym.NEGACION); return symbol(sym.NEGACION, yytext());
            }
          // fall through
          case 101: break;
          case 44:
            { writeToken(sym.FLOAT); return symbol(sym.FLOAT, yytext());
            }
          // fall through
          case 102: break;
          case 45:
            { writeToken(sym.WHILE); return symbol(sym.WHILE, yytext());
            }
          // fall through
          case 103: break;
          case 46:
            { writeToken(sym.CASE); return symbol(sym.CASE, yytext());
            }
          // fall through
          case 104: break;
          case 47:
            { writeToken(sym.DIFERENTE); return symbol(sym.DIFERENTE, yytext());
            }
          // fall through
          case 105: break;
          case 48:
            { writeToken(sym.MENOR); return symbol(sym.MENOR, yytext());
            }
          // fall through
          case 106: break;
          case 49:
            { writeToken(sym.MENOR_IGUAL); return symbol(sym.MENOR_IGUAL, yytext());
            }
          // fall through
          case 107: break;
          case 50:
            { writeToken(sym.END_EXPR); return symbol(sym.END_EXPR, yytext());
            }
          // fall through
          case 108: break;
          case 51:
            { writeToken(sym.APERTURA_DE_BLOQUE); return symbol(sym.APERTURA_DE_BLOQUE, yytext());
            }
          // fall through
          case 109: break;
          case 52:
            { writeToken(sym.PARENTESIS_APERTURA); return symbol(sym.PARENTESIS_APERTURA, yytext());
            }
          // fall through
          case 110: break;
          case 53:
            { writeToken(sym.MULTIPLICACION); return symbol(sym.MULTIPLICACION, yytext());
            }
          // fall through
          case 111: break;
          case 54:
            { writeToken(sym.CORCHETE_APERTURA); return symbol(sym.CORCHETE_APERTURA, yytext());
            }
          // fall through
          case 112: break;
          case 55:
            { writeToken(sym.RESTA); return symbol(sym.RESTA, yytext());
            }
          // fall through
          case 113: break;
          case 56:
            { writeToken(sym.CIERRE_DE_BLOQUE); return symbol(sym.CIERRE_DE_BLOQUE, yytext());
            }
          // fall through
          case 114: break;
          case 57:
            { writeToken(sym.PARENTESIS_CIERRE); return symbol(sym.PARENTESIS_CIERRE, yytext());
            }
          // fall through
          case 115: break;
          case 58:
            { writeToken(sym.CORCHETE_CIERRE); return symbol(sym.CORCHETE_CIERRE, yytext());
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
