// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexercup.flex

/* JF1ex exarnole: partial Java language lexer specification*/
import java_cup.runtime.* ;

    /*
    *   This class is a simple example lexer.
    */

    /* 
        Lexer base tomado de la p√°gina de Cup que requiere sym para utilizarse como Lexer
        Este lexer es utilizado por por el parser generado por BasicLexerCup (parser.java que se genera) 
    */


@SuppressWarnings("fallthrough")
public class LexerCupV implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\2\u0100\1\u7b00\11\u1f00"+
    "\2\u0100\1\u7c00\5\u1f00\23\u0100\1\u7d00\17\u0100\1\u7e00\u0adc\u1f00"+
    "\1\u7f00\1\u8000\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\10\1\11\12\6\1\12\1\13"+
    "\11\14\7\6\32\11\1\6\1\15\2\6\1\16\1\6"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\11\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\4\6\6\0\1\47\32\0\2\6\4\11\4\6"+
    "\1\11\2\6\1\0\7\6\1\11\4\6\1\11\5\6"+
    "\27\11\1\6\37\11\1\6\u01ca\11\4\6\14\11\16\6"+
    "\5\11\7\6\1\11\1\6\1\11\21\6\160\0\5\11"+
    "\1\6\2\11\2\6\4\11\1\6\1\11\6\6\1\11"+
    "\1\6\3\11\1\6\1\11\1\6\24\11\1\6\123\11"+
    "\1\6\213\11\1\6\5\0\2\6\246\11\1\6\46\11"+
    "\2\6\1\11\6\6\51\11\6\6\1\11\1\6\55\0"+
    "\1\6\1\0\1\6\2\0\1\6\2\0\1\6\1\0"+
    "\10\6\33\11\4\6\4\11\15\6\6\0\5\6\1\11"+
    "\4\6\13\0\1\6\1\0\3\6\53\11\37\0\4\6"+
    "\2\11\1\0\143\11\1\6\1\11\10\0\1\6\6\0"+
    "\2\11\2\0\1\6\4\0\2\11\12\0\3\11\2\6"+
    "\1\11\17\6\1\0\1\11\1\0\36\11\33\0\2\6"+
    "\131\11\13\0\1\11\16\6\12\0\41\11\11\0\2\11"+
    "\4\6\1\11\2\6\1\0\30\11\4\0\1\11\11\0"+
    "\1\11\3\0\1\11\5\0\22\6\31\11\3\0\4\6"+
    "\13\11\5\6\30\11\1\6\6\11\1\6\2\0\6\6"+
    "\10\0\52\11\72\0\66\11\3\0\1\11\22\0\1\11"+
    "\7\0\12\11\2\0\2\6\12\0\1\6\20\11\3\0"+
    "\1\6\10\11\2\6\2\11\2\6\26\11\1\6\7\11"+
    "\1\6\1\11\3\6\4\11\2\6\1\0\1\11\7\0"+
    "\2\6\2\0\2\6\3\0\1\11\10\6\1\0\4\6"+
    "\2\11\1\6\3\11\2\0\2\6\12\0\4\11\7\6"+
    "\2\11\1\6\1\0\2\6\3\0\1\6\6\11\4\6"+
    "\2\11\2\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\2\11\1\6\2\11\2\6\1\0\1\6\5\0\4\6"+
    "\2\0\2\6\3\0\3\6\1\0\7\6\4\11\1\6"+
    "\1\11\7\6\14\0\3\11\1\0\13\6\3\0\1\6"+
    "\11\11\1\6\3\11\1\6\26\11\1\6\7\11\1\6"+
    "\2\11\1\6\5\11\2\6\1\0\1\11\10\0\1\6"+
    "\3\0\1\6\3\0\2\6\1\11\17\6\2\11\2\0"+
    "\2\6\12\0\1\6\1\11\7\6\1\11\6\0\1\6"+
    "\3\0\1\6\10\11\2\6\2\11\2\6\26\11\1\6"+
    "\7\11\1\6\2\11\1\6\5\11\2\6\1\0\1\11"+
    "\7\0\2\6\2\0\2\6\3\0\7\6\3\0\4\6"+
    "\2\11\1\6\3\11\2\0\2\6\12\0\1\6\1\11"+
    "\20\6\1\0\1\11\1\6\6\11\3\6\3\11\1\6"+
    "\4\11\3\6\2\11\1\6\1\11\1\6\2\11\3\6"+
    "\2\11\3\6\3\11\3\6\14\11\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\11\6\6\1\0\16\6"+
    "\12\0\11\6\1\11\6\6\5\0\10\11\1\6\3\11"+
    "\1\6\27\11\1\6\20\11\2\6\1\0\1\11\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\1\6\3\11"+
    "\2\6\1\11\2\6\2\11\2\0\2\6\12\0\20\6"+
    "\1\11\3\0\1\6\10\11\1\6\3\11\1\6\27\11"+
    "\1\6\12\11\1\6\5\11\2\6\1\0\1\11\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\6\6\2\11"+
    "\1\6\2\11\2\0\2\6\12\0\1\6\2\11\1\0"+
    "\14\6\4\0\11\11\1\6\3\11\1\6\51\11\2\0"+
    "\1\11\7\0\1\6\3\0\1\6\4\0\1\11\5\6"+
    "\3\11\1\0\7\6\3\11\2\0\2\6\12\0\12\6"+
    "\6\11\1\6\3\0\1\6\22\11\3\6\30\11\1\6"+
    "\11\11\1\6\1\11\2\6\7\11\3\6\1\0\4\6"+
    "\6\0\1\6\1\0\1\6\10\0\6\6\12\0\2\6"+
    "\2\0\15\6\60\11\1\0\2\11\7\0\4\6\10\11"+
    "\10\0\1\6\12\0\47\6\2\11\1\6\1\11\1\6"+
    "\5\11\1\6\30\11\1\6\1\11\1\6\12\11\1\0"+
    "\2\11\11\0\1\11\2\6\5\11\1\6\1\11\1\6"+
    "\7\0\1\6\12\0\2\6\4\11\40\6\1\11\27\6"+
    "\2\0\6\6\12\0\13\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\2\0\10\11\1\6\44\11\4\6\24\0"+
    "\1\6\2\0\5\11\13\0\1\6\44\0\11\6\1\0"+
    "\71\6\53\11\24\0\1\11\12\0\6\6\6\11\4\0"+
    "\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0"+
    "\15\11\14\0\1\11\17\0\2\6\46\11\1\6\1\11"+
    "\5\6\1\11\2\6\53\11\1\6\115\11\1\6\4\11"+
    "\2\6\7\11\1\6\1\11\1\6\4\11\2\6\51\11"+
    "\1\6\4\11\2\6\41\11\1\6\4\11\2\6\7\11"+
    "\1\6\1\11\1\6\4\11\2\6\17\11\1\6\71\11"+
    "\1\6\4\11\2\6\103\11\2\6\3\0\40\6\20\11"+
    "\20\6\126\11\2\6\6\11\3\6\u016c\11\2\6\21\11"+
    "\1\6\32\11\5\6\113\11\3\6\13\11\7\6\22\11"+
    "\4\0\11\6\23\11\3\0\13\6\22\11\2\0\14\6"+
    "\15\11\1\6\3\11\1\6\2\0\14\6\64\11\40\0"+
    "\3\6\1\11\3\6\2\11\1\0\2\6\12\0\41\6"+
    "\17\0\6\6\131\11\7\6\5\11\2\0\42\11\1\0"+
    "\1\11\5\6\106\11\12\6\37\11\1\6\14\0\4\6"+
    "\14\0\12\6\12\0\36\11\2\6\5\11\13\6\54\11"+
    "\4\6\32\11\6\6\12\0\46\6\27\11\5\0\4\6"+
    "\65\11\12\0\1\6\35\0\2\6\13\0\6\6\12\0"+
    "\15\6\1\11\10\6\16\0\1\6\20\0\61\6\5\0"+
    "\57\11\21\0\10\11\3\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\11\15\0\2\11\12\0\54\11\16\0\14\6"+
    "\44\11\24\0\10\6\12\0\3\6\3\11\12\0\44\11"+
    "\2\6\11\11\7\6\53\11\2\6\3\11\20\6\3\0"+
    "\1\6\25\0\4\11\1\0\6\11\1\0\2\11\3\0"+
    "\1\11\5\6\300\11\100\0\26\11\2\6\6\11\2\6"+
    "\46\11\2\6\6\11\2\6\10\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\37\11\2\6\65\11\1\6"+
    "\7\11\1\6\1\11\3\6\3\11\1\6\7\11\3\6"+
    "\4\11\2\6\6\11\4\6\15\11\5\6\3\11\1\6"+
    "\7\11\16\6\5\0\30\6\2\3\5\0\20\6\2\11"+
    "\23\6\1\11\13\6\5\0\1\6\12\0\1\6\1\11"+
    "\15\6\1\11\20\6\15\11\3\6\41\11\17\6\15\0"+
    "\4\6\1\0\3\6\14\0\21\6\1\11\4\6\1\11"+
    "\2\6\12\11\1\6\1\11\3\6\5\11\6\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\4\11\1\6\13\11"+
    "\2\6\4\11\5\6\5\11\4\6\1\11\21\6\51\11"+
    "\u0177\6\345\11\6\6\4\11\3\0\2\11\14\6\46\11"+
    "\1\6\1\11\5\6\1\11\2\6\70\11\7\6\1\11"+
    "\17\6\1\0\27\11\11\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\7\11\1\6\40\0\57\6\1\11\325\6"+
    "\3\11\31\6\11\11\6\0\1\6\5\11\2\6\5\11"+
    "\4\6\126\11\2\6\2\0\2\6\3\11\1\6\132\11"+
    "\1\6\4\11\5\6\53\11\1\6\136\11\21\6\40\11"+
    "\60\6\320\11\100\6\215\11\103\6\56\11\2\6\15\11"+
    "\3\6\20\11\12\0\2\11\24\6\57\11\1\0\4\6"+
    "\12\0\1\6\37\11\2\0\120\11\2\0\45\6\11\11"+
    "\2\6\147\11\2\6\100\11\5\6\2\11\1\6\1\11"+
    "\1\6\5\11\30\6\20\11\1\0\3\11\1\0\4\11"+
    "\1\0\27\11\5\0\4\6\1\0\13\6\1\11\7\6"+
    "\64\11\14\6\2\0\62\11\22\0\12\6\12\0\6\6"+
    "\22\0\6\11\3\6\1\11\1\6\2\11\13\0\34\11"+
    "\10\0\2\6\27\11\15\0\14\6\35\11\3\6\4\0"+
    "\57\11\16\0\16\6\1\11\12\0\6\6\5\11\1\0"+
    "\12\11\12\0\5\11\1\6\51\11\16\0\11\6\3\11"+
    "\1\0\10\11\2\0\2\6\12\0\6\6\27\11\3\6"+
    "\1\11\3\0\62\11\1\0\1\11\3\0\2\11\2\0"+
    "\5\11\2\0\1\11\1\0\1\11\30\6\3\11\2\6"+
    "\13\11\5\0\2\6\3\11\2\0\12\6\6\11\2\6"+
    "\6\11\2\6\6\11\11\6\7\11\1\6\7\11\1\6"+
    "\53\11\1\6\16\11\6\6\163\11\10\0\1\6\2\0"+
    "\2\6\12\0\6\6\244\11\14\6\27\11\4\6\61\11"+
    "\4\6\u0100\3\156\11\2\6\152\11\46\6\7\11\14\6"+
    "\5\11\5\6\1\11\1\0\12\11\1\6\15\11\1\6"+
    "\5\11\1\6\1\11\1\6\2\11\1\6\2\11\1\6"+
    "\154\11\41\6\153\11\22\6\100\11\2\6\66\11\50\6"+
    "\15\11\3\6\20\0\20\6\20\0\3\6\2\11\30\6"+
    "\3\11\31\6\1\11\6\6\5\11\1\6\207\11\2\6"+
    "\1\0\4\6\1\11\13\6\12\0\7\6\32\11\4\6"+
    "\1\11\1\6\32\11\13\6\131\11\3\6\6\11\2\6"+
    "\6\11\2\6\6\11\2\6\3\11\3\6\2\11\3\6"+
    "\2\11\22\6\3\0\4\6\14\11\1\6\32\11\1\6"+
    "\23\11\1\6\2\11\1\6\17\11\2\6\16\11\42\6"+
    "\173\11\105\6\65\11\210\6\1\0\202\6\35\11\3\6"+
    "\61\11\17\6\1\0\37\6\40\11\15\6\36\11\5\6"+
    "\46\11\5\0\5\6\36\11\2\6\44\11\4\6\10\11"+
    "\1\6\5\11\52\6\236\11\2\6\12\0\6\6\44\11"+
    "\4\6\44\11\4\6\50\11\10\6\64\11\14\6\13\11"+
    "\1\6\17\11\1\6\7\11\1\6\2\11\1\6\13\11"+
    "\1\6\17\11\1\6\7\11\1\6\2\11\103\6\67\11"+
    "\11\6\26\11\12\6\10\11\30\6\6\11\1\6\52\11"+
    "\1\6\11\11\105\6\6\11\2\6\1\11\1\6\54\11"+
    "\1\6\2\11\3\6\1\11\2\6\27\11\12\6\27\11"+
    "\11\6\37\11\101\6\23\11\1\6\2\11\12\6\26\11"+
    "\12\6\32\11\106\6\70\11\6\6\2\11\100\6\1\11"+
    "\3\0\1\6\2\0\5\6\4\0\4\11\1\6\3\11"+
    "\1\6\35\11\2\6\3\0\4\6\1\0\40\6\35\11"+
    "\3\6\35\11\43\6\10\11\1\6\34\11\2\0\31\6"+
    "\66\11\12\6\26\11\12\6\23\11\15\6\22\11\156\6"+
    "\111\11\67\6\63\11\15\6\63\11\15\6\44\11\4\0"+
    "\10\6\12\0\u0146\6\52\11\1\6\2\0\3\6\2\11"+
    "\113\6\3\0\35\11\12\6\1\11\10\6\26\11\13\0"+
    "\37\6\22\11\4\0\52\6\25\11\33\6\27\11\11\6"+
    "\3\0\65\11\17\0\37\6\13\0\2\11\2\0\1\11"+
    "\11\6\4\0\55\11\13\0\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\2\6\31\11\7\6\12\0\6\6\3\0"+
    "\44\11\16\0\1\6\12\0\4\6\1\11\2\0\1\11"+
    "\10\6\43\11\1\0\2\6\1\11\11\6\3\0\60\11"+
    "\16\0\4\11\4\6\4\0\1\6\14\0\1\11\1\6"+
    "\1\11\43\6\22\11\1\6\31\11\14\0\6\6\1\0"+
    "\2\11\1\0\76\6\7\11\1\6\1\11\1\6\4\11"+
    "\1\6\17\11\1\6\12\11\7\6\57\11\14\0\5\6"+
    "\12\0\6\6\4\0\1\6\10\11\2\6\2\11\2\6"+
    "\26\11\1\6\7\11\1\6\2\11\1\6\5\11\1\6"+
    "\2\0\1\11\7\0\2\6\2\0\2\6\3\0\2\6"+
    "\1\11\6\6\1\0\5\6\5\11\2\0\2\6\7\0"+
    "\3\6\5\0\213\6\65\11\22\0\4\11\5\6\12\0"+
    "\4\6\1\0\3\11\36\6\60\11\24\0\2\11\1\6"+
    "\1\11\10\6\12\0\246\6\57\11\7\0\2\6\11\0"+
    "\27\6\4\11\2\0\42\6\60\11\21\0\3\6\1\11"+
    "\13\6\12\0\46\6\53\11\15\0\1\11\7\6\12\0"+
    "\66\6\33\11\2\6\17\0\4\6\12\0\6\6\7\11"+
    "\271\6\54\11\17\0\145\6\100\11\12\0\25\6\10\11"+
    "\2\6\1\11\2\6\10\11\1\6\2\11\1\6\30\11"+
    "\6\0\1\6\2\0\2\6\4\0\1\11\1\0\1\11"+
    "\2\0\14\6\12\0\106\6\10\11\2\6\47\11\7\0"+
    "\2\6\7\0\1\11\1\6\1\11\1\0\33\6\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\6\1\0\10\6"+
    "\1\11\13\0\56\11\20\0\3\6\1\11\22\6\111\11"+
    "\7\6\11\11\1\6\45\11\10\0\1\6\10\0\1\11"+
    "\17\6\12\0\30\6\36\11\2\6\26\0\1\6\16\0"+
    "\111\6\7\11\1\6\2\11\1\6\46\11\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\11\1\0\10\6"+
    "\12\0\6\6\6\11\1\6\2\11\1\6\40\11\5\0"+
    "\1\6\2\0\1\6\5\0\1\11\7\6\12\0\u0136\6"+
    "\23\11\4\0\11\6\2\0\1\11\1\0\15\11\1\6"+
    "\42\11\7\0\3\6\5\0\15\6\12\0\126\6\1\11"+
    "\54\6\4\11\37\6\232\11\146\6\157\11\21\6\304\11"+
    "\u014c\6\141\11\17\6\60\11\21\0\6\11\17\0\252\6"+
    "\107\11\271\6\71\11\7\6\37\11\1\6\12\0\6\6"+
    "\117\11\1\6\12\0\6\6\36\11\2\6\5\0\13\6"+
    "\60\11\7\0\11\6\4\11\14\6\12\0\11\6\25\11"+
    "\5\6\23\11\260\6\100\11\200\6\113\11\4\6\1\0"+
    "\1\11\67\0\7\6\4\0\15\11\100\6\2\11\1\6"+
    "\1\11\1\0\13\6\2\0\16\6\370\11\10\6\326\11"+
    "\52\6\11\11\u01e7\6\4\11\1\6\7\11\1\6\2\11"+
    "\1\6\43\11\17\6\1\11\35\6\3\11\2\6\1\11"+
    "\16\6\4\11\10\6\u018c\11\4\6\153\11\5\6\15\11"+
    "\3\6\11\11\7\6\12\11\3\6\2\0\1\6\4\0"+
    "\134\6\56\0\2\6\27\0\u011e\6\5\0\3\6\26\0"+
    "\2\6\7\0\36\6\4\0\224\6\3\0\273\6\125\11"+
    "\1\6\107\11\1\6\2\11\2\6\1\11\2\6\2\11"+
    "\2\6\4\11\1\6\14\11\1\6\1\11\1\6\7\11"+
    "\1\6\101\11\1\6\4\11\2\6\10\11\1\6\7\11"+
    "\1\6\34\11\1\6\4\11\1\6\5\11\1\6\1\11"+
    "\3\6\7\11\1\6\u0154\11\2\6\31\11\1\6\31\11"+
    "\1\6\37\11\1\6\31\11\1\6\37\11\1\6\31\11"+
    "\1\6\37\11\1\6\31\11\1\6\37\11\1\6\31\11"+
    "\1\6\10\11\2\6\151\0\4\6\62\0\10\6\1\0"+
    "\16\6\1\0\26\6\5\0\1\6\17\0\120\6\37\11"+
    "\6\6\6\11\325\6\7\0\1\6\21\0\2\6\7\0"+
    "\1\6\2\0\1\6\5\0\5\6\76\11\41\6\1\0"+
    "\160\6\55\11\3\6\7\0\7\11\2\6\12\0\4\6"+
    "\1\11\u0141\6\36\11\1\0\21\6\54\11\16\0\5\6"+
    "\1\11\320\6\34\11\16\0\346\6\7\11\1\6\4\11"+
    "\1\6\2\11\1\6\17\11\1\6\305\11\13\6\7\0"+
    "\51\6\104\11\7\0\1\11\4\6\12\0\u0156\6\1\11"+
    "\117\6\4\11\1\6\33\11\1\6\2\11\1\6\1\11"+
    "\2\6\1\11\1\6\12\11\1\6\4\11\1\6\1\11"+
    "\1\6\1\11\6\6\1\11\4\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\3\11\1\6\2\11\1\6\1\11"+
    "\2\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\2\11\1\6\1\11\2\6\4\11"+
    "\1\6\7\11\1\6\4\11\1\6\4\11\1\6\1\11"+
    "\1\6\12\11\1\6\21\11\5\6\3\11\1\6\5\11"+
    "\1\6\21\11\u0134\6\12\0\6\6\340\11\40\6\72\11"+
    "\6\6\336\11\2\6\u0182\11\16\6\u0131\11\17\6\156\11"+
    "\242\6\36\11\342\6\113\11\5\6\u0160\11\121\6\1\0"+
    "\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\5\24\1\1\6"+
    "\1\7\1\1\2\4\44\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\46\0\1\4\12\0\1\16\10\0"+
    "\1\17\3\0\1\20\30\0\1\21\3\0\1\22\10\0"+
    "\1\23\2\0\1\24\3\0\1\25\1\26\1\0\1\27"+
    "\15\0\1\30\1\31\1\32\5\0\1\33\1\34\11\0"+
    "\1\35\1\36\1\0\1\37\12\0\1\40\1\0\1\41"+
    "\4\0\1\42\1\43\1\44\2\0\1\45\1\0\1\46"+
    "\1\47\3\0\1\50\1\51\1\52\3\0\1\53\2\0"+
    "\1\54\2\0\1\55\1\56\6\0\1\57\1\60\2\0"+
    "\1\61\1\0\1\62\4\0\1\63\1\64\3\0\1\65"+
    "\1\66\1\0\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\120\0\170\0\120\0\240\0\120"+
    "\0\310\0\360\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0"+
    "\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320"+
    "\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\120\0\u0438"+
    "\0\120\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550"+
    "\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690"+
    "\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0"+
    "\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910"+
    "\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\120\0\120"+
    "\0\120\0\120\0\120\0\u0a28\0\u04b0\0\u0a50\0\u0a78\0\u0aa0"+
    "\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0"+
    "\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20"+
    "\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60"+
    "\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0"+
    "\0\u0fc8\0\u0ff0\0\u1018\0\u0488\0\u1040\0\u1068\0\u1090\0\u10b8"+
    "\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\120\0\u11d0"+
    "\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\120"+
    "\0\u1310\0\u1338\0\u1360\0\120\0\u1388\0\u13b0\0\u13d8\0\u1400"+
    "\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540"+
    "\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680"+
    "\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\120\0\u1748\0\u1770\0\u1798"+
    "\0\120\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0"+
    "\0\u18d8\0\120\0\u1900\0\u1928\0\120\0\u1950\0\u1978\0\u19a0"+
    "\0\120\0\120\0\u19c8\0\120\0\u19f0\0\u1a18\0\u1a40\0\u1a68"+
    "\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8"+
    "\0\u1bd0\0\120\0\120\0\120\0\u1bf8\0\u1c20\0\u1c48\0\u1c70"+
    "\0\u1c98\0\120\0\120\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60"+
    "\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\120\0\120\0\u1e28\0\120"+
    "\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40\0\u1f68"+
    "\0\u1f90\0\u1fb8\0\120\0\u1fe0\0\120\0\u2008\0\u2030\0\u2058"+
    "\0\u2080\0\120\0\120\0\120\0\u20a8\0\u20d0\0\120\0\u20f8"+
    "\0\120\0\u04b0\0\u2120\0\u2148\0\u2170\0\120\0\120\0\120"+
    "\0\u2198\0\u21c0\0\u21e8\0\120\0\u2210\0\u2238\0\120\0\u2260"+
    "\0\u2288\0\120\0\120\0\u22b0\0\u22d8\0\u2300\0\u2328\0\u2350"+
    "\0\u2378\0\120\0\120\0\u23a0\0\u23c8\0\120\0\u23f0\0\120"+
    "\0\u2418\0\u2440\0\u2468\0\u2490\0\120\0\120\0\u24b8\0\u24e0"+
    "\0\u2508\0\120\0\120\0\u2530\0\120\0\120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\3\1\6\1\7"+
    "\2\3\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\3\1\25"+
    "\1\26\1\27\1\3\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\5\3\2\36\1\3\2\36\1\3\1\36\1\37"+
    "\5\36\1\40\32\36\52\0\1\4\45\0\2\7\1\41"+
    "\2\7\1\42\42\7\13\0\2\11\51\0\1\43\42\0"+
    "\1\44\4\0\24\44\1\45\4\44\21\0\1\46\1\0"+
    "\1\47\44\0\1\50\16\0\1\51\40\0\1\52\3\0"+
    "\1\53\5\0\1\54\47\0\1\55\36\0\1\56\1\0"+
    "\1\57\4\0\1\60\2\0\1\61\34\0\1\62\37\0"+
    "\1\63\16\0\1\64\30\0\1\65\7\0\1\66\52\0"+
    "\1\67\34\0\1\70\3\0\1\71\3\0\1\72\37\0"+
    "\1\73\13\0\1\74\50\0\1\75\54\0\1\76\31\0"+
    "\1\77\7\0\1\100\43\0\1\101\2\0\1\102\53\0"+
    "\1\103\41\0\1\104\3\0\1\105\32\0\1\106\30\0"+
    "\2\36\1\0\2\36\1\0\1\36\1\0\5\36\1\0"+
    "\32\36\7\0\1\107\5\0\1\110\14\0\1\111\3\0"+
    "\1\112\1\0\1\113\11\0\1\41\45\0\2\43\4\0"+
    "\10\43\1\114\30\43\1\0\1\44\10\0\1\44\1\0"+
    "\2\44\1\0\1\115\32\44\10\0\1\44\1\0\2\44"+
    "\1\0\1\115\4\44\1\116\24\44\36\0\1\117\53\0"+
    "\1\120\35\0\1\121\52\0\1\122\37\0\1\123\55\0"+
    "\1\124\4\0\1\125\45\0\1\126\36\0\1\127\50\0"+
    "\1\130\63\0\1\131\1\0\1\132\26\0\1\133\51\0"+
    "\1\134\56\0\1\135\54\0\1\136\37\0\1\137\42\0"+
    "\1\140\64\0\1\141\50\0\1\142\34\0\1\143\10\0"+
    "\1\144\41\0\1\145\51\0\1\146\53\0\1\147\3\0"+
    "\1\150\26\0\1\151\51\0\1\152\53\0\1\153\65\0"+
    "\1\154\24\0\1\155\52\0\1\156\55\0\1\157\55\0"+
    "\1\160\46\0\1\161\26\0\1\162\66\0\1\163\11\0"+
    "\2\43\4\0\4\43\1\164\3\43\1\114\30\43\1\0"+
    "\1\44\10\0\1\44\1\0\2\44\1\0\1\115\17\44"+
    "\1\165\11\44\23\0\1\166\53\0\1\167\60\0\1\170"+
    "\40\0\1\171\54\0\1\172\34\0\1\173\64\0\1\174"+
    "\36\0\1\175\52\0\1\176\50\0\1\177\52\0\1\200"+
    "\40\0\1\201\11\0\1\202\47\0\1\203\44\0\1\204"+
    "\47\0\1\205\45\0\1\206\45\0\1\207\34\0\1\210"+
    "\70\0\1\211\32\0\1\212\57\0\1\213\61\0\1\214"+
    "\23\0\1\215\65\0\1\216\46\0\1\217\40\0\1\220"+
    "\46\0\1\221\53\0\1\222\40\0\1\223\47\0\1\224"+
    "\57\0\1\225\55\0\1\226\51\0\1\227\27\0\1\230"+
    "\53\0\1\231\60\0\1\232\36\0\1\233\20\0\1\44"+
    "\10\0\1\44\1\0\2\44\1\0\1\115\1\234\30\44"+
    "\21\0\1\235\1\0\1\236\12\0\1\237\34\0\1\240"+
    "\43\0\1\241\57\0\1\242\56\0\1\243\51\0\1\244"+
    "\26\0\1\245\52\0\1\246\47\0\1\247\50\0\1\250"+
    "\43\0\1\251\53\0\1\252\45\0\1\253\53\0\1\254"+
    "\45\0\1\255\43\0\1\256\51\0\1\257\61\0\1\260"+
    "\52\0\1\261\50\0\1\262\36\0\1\263\61\0\1\264"+
    "\26\0\1\265\52\0\1\266\50\0\1\267\63\0\1\270"+
    "\42\0\1\271\54\0\1\272\40\0\1\273\42\0\1\274"+
    "\44\0\1\275\61\0\1\276\46\0\1\277\54\0\1\300"+
    "\44\0\1\301\14\0\1\44\10\0\1\44\1\0\2\44"+
    "\1\0\1\115\13\44\1\302\15\44\41\0\1\303\37\0"+
    "\1\304\41\0\1\305\56\0\1\306\63\0\1\307\40\0"+
    "\1\310\27\0\1\311\47\0\1\312\63\0\1\313\37\0"+
    "\1\314\51\0\1\315\52\0\1\316\45\0\1\317\57\0"+
    "\1\320\36\0\1\321\60\0\1\322\37\0\1\323\57\0"+
    "\1\324\32\0\1\325\61\0\1\326\43\0\1\327\37\0"+
    "\1\330\50\0\1\331\57\0\1\332\43\0\1\333\42\0"+
    "\1\334\63\0\1\335\47\0\1\336\37\0\1\337\63\0"+
    "\1\340\10\0\1\44\10\0\1\44\1\0\2\44\1\0"+
    "\1\115\14\44\1\341\14\44\23\0\1\342\60\0\1\343"+
    "\40\0\1\344\62\0\1\345\26\0\1\346\70\0\1\347"+
    "\30\0\1\350\1\0\1\351\12\0\1\352\30\0\1\353"+
    "\72\0\1\354\24\0\1\355\53\0\1\356\43\0\1\357"+
    "\57\0\1\360\37\0\1\361\66\0\1\362\55\0\1\363"+
    "\25\0\1\364\66\0\1\365\25\0\1\366\63\0\1\367"+
    "\44\0\1\370\42\0\1\371\24\0\1\44\10\0\1\44"+
    "\1\0\2\44\1\0\1\372\31\44\32\0\1\373\34\0"+
    "\1\374\47\0\1\375\63\0\1\376\52\0\1\377\30\0"+
    "\1\u0100\71\0\1\u0101\37\0\1\u0102\41\0\1\u0103\47\0"+
    "\1\u0104\47\0\1\u0105\54\0\1\u0106\36\0\1\u0107\61\0"+
    "\1\u0108\41\0\1\u0109\47\0\1\u010a\54\0\1\u010b\57\0"+
    "\1\u010c\44\0\1\u010d\42\0\1\u010e\42\0\1\u010f\60\0"+
    "\1\u0110\40\0\1\u0111\54\0\1\u0112\50\0\1\u0113\34\0"+
    "\1\u0114\61\0\1\u0115\50\0\1\u0116\55\0\1\u0117\41\0"+
    "\1\u0118\46\0\1\u0119\34\0\1\u011a\47\0\1\u011b\57\0"+
    "\1\u011c\37\0\1\u011d\53\0\1\u011e\64\0\1\u011f\44\0"+
    "\1\u0120\42\0\1\u0121\52\0\1\u0122\47\0\1\u0123\55\0"+
    "\1\u0124\41\0\1\u0125\37\0\1\u0126\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9560];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\1\11\26\1\1\11"+
    "\1\1\1\11\1\1\44\0\5\11\1\0\1\1\46\0"+
    "\1\1\12\0\1\11\10\0\1\11\3\0\1\11\30\0"+
    "\1\11\3\0\1\11\10\0\1\11\2\0\1\11\3\0"+
    "\2\11\1\0\1\11\15\0\3\11\5\0\2\11\11\0"+
    "\2\11\1\0\1\11\12\0\1\11\1\0\1\11\4\0"+
    "\3\11\2\0\1\11\1\0\1\11\1\1\3\0\3\11"+
    "\3\0\1\11\2\0\1\11\2\0\2\11\6\0\2\11"+
    "\2\0\1\11\1\0\1\11\4\0\2\11\3\0\2\11"+
    "\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCupV(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(sym.SYNTAX_ERROR);
            }
          // fall through
          case 57: break;
          case 2:
            { /* Ignore white space */
            }
          // fall through
          case 58: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 59: break;
          case 4:
            { /* Ignore comments */
            }
          // fall through
          case 60: break;
          case 5:
            { return symbol(sym.INT_LITERAL, Integer.parseInt(yytext()));
            }
          // fall through
          case 61: break;
          case 6:
            { string.append(yytext());
            }
          // fall through
          case 62: break;
          case 7:
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
          // fall through
          case 63: break;
          case 8:
            { string.append("\"");
            }
          // fall through
          case 64: break;
          case 9:
            { string.append("\\");
            }
          // fall through
          case 65: break;
          case 10:
            { string.append("\n");
            }
          // fall through
          case 66: break;
          case 11:
            { string.append("\r");
            }
          // fall through
          case 67: break;
          case 12:
            { string.append("\t");
            }
          // fall through
          case 68: break;
          case 13:
            { return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 69: break;
          case 14:
            { return symbol(sym.IF);
            }
          // fall through
          case 70: break;
          case 15:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 71: break;
          case 16:
            { return symbol(sym.IGUALDAD);
            }
          // fall through
          case 72: break;
          case 17:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 73: break;
          case 18:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 74: break;
          case 19:
            { return symbol(sym.MODULO);
            }
          // fall through
          case 75: break;
          case 20:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 76: break;
          case 21:
            { return symbol(sym.INCREMENTO);
            }
          // fall through
          case 77: break;
          case 22:
            { return symbol(sym.DIV);
            }
          // fall through
          case 78: break;
          case 23:
            { return symbol(sym.DOS_PUNTOS);
            }
          // fall through
          case 79: break;
          case 24:
            { return symbol(sym.STRING);
            }
          // fall through
          case 80: break;
          case 25:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 81: break;
          case 26:
            { return symbol(sym.FOR);
            }
          // fall through
          case 82: break;
          case 27:
            { return symbol(sym.DISYUNCION);
            }
          // fall through
          case 83: break;
          case 28:
            { return symbol(sym.DECREMENTO);
            }
          // fall through
          case 84: break;
          case 29:
            { return symbol(sym.BOOL);
            }
          // fall through
          case 85: break;
          case 30:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 86: break;
          case 31:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 87: break;
          case 32:
            { return symbol(sym.ASIGNACION);
            }
          // fall through
          case 88: break;
          case 33:
            { return symbol(sym.READ);
            }
          // fall through
          case 89: break;
          case 34:
            { return symbol(sym.CONJUNCION);
            }
          // fall through
          case 90: break;
          case 35:
            { return symbol(sym.MAYOR);
            }
          // fall through
          case 91: break;
          case 36:
            { return symbol(sym.SUMA);
            }
          // fall through
          case 92: break;
          case 37:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 93: break;
          case 38:
            { return symbol(sym.MAYOR_IGUAL);
            }
          // fall through
          case 94: break;
          case 39:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 95: break;
          case 40:
            { return symbol(sym.POTENCIA);
            }
          // fall through
          case 96: break;
          case 41:
            { return symbol(sym.NEGACION);
            }
          // fall through
          case 97: break;
          case 42:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 98: break;
          case 43:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 99: break;
          case 44:
            { return symbol(sym.CASE);
            }
          // fall through
          case 100: break;
          case 45:
            { return symbol(sym.DIFERENTE);
            }
          // fall through
          case 101: break;
          case 46:
            { return symbol(sym.MENOR);
            }
          // fall through
          case 102: break;
          case 47:
            { return symbol(sym.MENOR_IGUAL);
            }
          // fall through
          case 103: break;
          case 48:
            { return symbol(sym.END_EXPR);
            }
          // fall through
          case 104: break;
          case 49:
            { return symbol(sym.APERTURA_DE_BLOQUE);
            }
          // fall through
          case 105: break;
          case 50:
            { return symbol(sym.PARENTESIS_APERTURA);
            }
          // fall through
          case 106: break;
          case 51:
            { return symbol(sym.MULTIPLICACION);
            }
          // fall through
          case 107: break;
          case 52:
            { return symbol(sym.CORCHETE_APERTURA);
            }
          // fall through
          case 108: break;
          case 53:
            { return symbol(sym.RESTA);
            }
          // fall through
          case 109: break;
          case 54:
            { return symbol(sym.CIERRRE_DE_BLOQUE);
            }
          // fall through
          case 110: break;
          case 55:
            { return symbol(sym.PARENTESIS_CIERRE);
            }
          // fall through
          case 111: break;
          case 56:
            { return symbol(sym.CORCHETE_CIERRE);
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
