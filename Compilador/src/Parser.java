
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\025\006\000\002\025" +
    "\004\000\002\026\003\000\002\026\002\000\002\006\005" +
    "\000\002\006\003\000\002\052\003\000\002\052\002\000" +
    "\002\051\006\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\022\003\000\002\022\003" +
    "\000\002\053\004\000\002\007\005\000\002\007\003\000" +
    "\002\010\006\000\002\011\006\000\002\054\006\000\002" +
    "\013\003\000\002\013\004\000\002\014\007\000\002\015" +
    "\005\000\002\016\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\006\000\002\020\002\000" +
    "\002\021\004\000\002\021\006\000\002\021\005\000\002" +
    "\056\002\000\002\027\007\000\002\030\003\000\002\030" +
    "\002\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\004\000\002\034\005\000\002\034\003\000\002\034\005" +
    "\000\002\057\002\000\002\060\002\000\002\035\014\000" +
    "\002\061\002\000\002\062\002\000\002\063\002\000\002" +
    "\035\013\000\002\055\005\000\002\055\002\000\002\036" +
    "\007\000\002\036\006\000\002\064\002\000\002\037\013" +
    "\000\002\065\002\000\002\066\002\000\002\037\012\000" +
    "\002\023\004\000\002\023\003\000\002\040\003\000\002" +
    "\040\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\067\002\000\002\042\012\000\002\070\002\000\002\071" +
    "\002\000\002\042\011\000\002\072\002\000\002\043\016" +
    "\000\002\073\002\000\002\074\002\000\002\043\011\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\004\000\002\045\004\000\002\045" +
    "\003\000\002\045\002\000\002\024\003\000\002\024\003" +
    "\000\002\046\003\000\002\046\004\000\002\046\003\000" +
    "\002\075\002\000\002\047\010\000\002\076\002\000\002" +
    "\077\002\000\002\047\014\000\002\050\003\000\002\050" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\020\002\uff7d\003\011\004\005\005\014\006" +
    "\006\007\015\010\010\001\002\000\004\002\343\001\002" +
    "\000\006\063\ufff7\065\ufff7\001\002\000\006\063\ufff5\065" +
    "\ufff5\001\002\000\020\002\uff86\003\011\004\005\005\014" +
    "\006\006\007\015\010\010\001\002\000\006\063\ufff3\065" +
    "\ufff3\001\002\000\004\002\uff84\001\002\000\004\002\uff7e" +
    "\001\002\000\006\063\017\065\020\001\002\000\006\063" +
    "\ufff6\065\ufff6\001\002\000\006\063\ufff4\065\ufff4\001\002" +
    "\000\004\023\021\001\002\000\004\023\uff87\001\002\000" +
    "\004\023\uff88\001\002\000\020\003\uff81\004\uff83\005\uff83" +
    "\006\uff83\007\uff83\010\uff83\024\uff83\001\002\000\004\003" +
    "\033\001\002\000\016\004\005\005\014\006\006\007\015" +
    "\010\010\024\ufffd\001\002\000\004\063\030\001\002\000" +
    "\004\024\ufffe\001\002\000\004\024\027\001\002\000\020" +
    "\002\uff82\003\uff82\004\uff82\005\uff82\006\uff82\007\uff82\010" +
    "\uff82\001\002\000\006\024\uffff\060\031\001\002\000\014" +
    "\004\005\005\014\006\006\007\015\010\010\001\002\000" +
    "\004\024\000\001\002\000\004\024\034\001\002\000\004" +
    "\016\uff80\001\002\000\004\016\036\001\002\000\044\003" +
    "\060\004\005\005\014\006\006\007\015\010\010\017\uff89" +
    "\046\051\050\067\051\044\052\063\055\061\056\056\061" +
    "\073\062\066\063\047\065\020\001\002\000\004\064\uffa0" +
    "\001\002\000\004\064\uffa2\001\002\000\004\064\uffa3\001" +
    "\002\000\004\064\uff9f\001\002\000\020\022\321\025\130" +
    "\026\145\027\125\030\134\031\132\032\127\001\002\000" +
    "\006\003\307\023\306\001\002\000\004\017\305\001\002" +
    "\000\050\003\060\004\005\005\014\006\006\007\015\010" +
    "\010\017\uff89\046\051\050\067\051\044\052\063\053\uff89" +
    "\054\uff89\055\061\056\056\061\073\062\066\063\047\065" +
    "\020\001\002\000\030\020\120\022\276\023\uff87\025\130" +
    "\026\145\027\125\030\134\031\132\032\127\033\122\034" +
    "\117\001\002\000\004\064\uffa4\001\002\000\006\003\246" +
    "\023\245\001\002\000\050\003\uff8f\004\uff8f\005\uff8f\006" +
    "\uff8f\007\uff8f\010\uff8f\017\uff8f\046\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\065\uff8f\001\002\000\004\064\244\001\002" +
    "\000\050\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\017\uff8d\046\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\061\uff8d\062\uff8d\063\uff8d\065" +
    "\uff8d\001\002\000\004\064\uffd4\001\002\000\026\011\110" +
    "\012\107\013\077\014\116\015\113\023\104\045\103\063" +
    "\115\064\uffa9\065\020\001\002\000\004\064\uffa6\001\002" +
    "\000\012\017\uff8a\053\uff8a\054\uff8a\064\uff9e\001\002\000" +
    "\004\064\uffa1\001\002\000\004\064\uffd6\001\002\000\006" +
    "\003\214\023\213\001\002\000\050\003\uff90\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\010\uff90\017\uff90\046\uff90\050\uff90" +
    "\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\061" +
    "\uff90\062\uff90\063\uff90\065\uff90\001\002\000\004\063\202" +
    "\001\002\000\004\023\177\001\002\000\006\003\163\023" +
    "\162\001\002\000\004\064\uffd5\001\002\000\050\003\uff8e" +
    "\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\017\uff8e\046" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\061\uff8e\062\uff8e\063\uff8e\065\uff8e\001\002\000" +
    "\004\064\uffa5\001\002\000\004\023\157\001\002\000\004" +
    "\023\075\001\002\000\026\011\110\012\107\013\077\014" +
    "\116\015\113\023\104\024\ufff9\045\103\063\115\065\020" +
    "\001\002\000\004\024\ufffa\001\002\000\052\017\uffee\021" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\044\uffee\057\uffee\060\uffee\064\uffee\001\002" +
    "\000\050\017\uffe4\021\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\060\uffe4\064" +
    "\uffe4\001\002\000\050\017\uffc1\021\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\060\uffc1\064\uffc1\001\002\000\050\017\uffbc\021\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\060\uffbc\064\uffbc\001\002\000\024\011\110" +
    "\012\107\013\077\014\116\015\113\023\104\045\103\063" +
    "\115\065\020\001\002\000\024\011\110\012\107\013\077" +
    "\014\116\015\113\023\104\045\103\063\115\065\020\001" +
    "\002\000\044\017\ufffb\024\ufffb\025\130\026\145\027\125" +
    "\030\134\031\132\032\127\035\126\036\131\037\136\040" +
    "\133\041\135\042\137\043\140\044\142\060\152\001\002" +
    "\000\004\024\151\001\002\000\052\017\ufff1\021\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\057\ufff1\060\ufff1\064\ufff1\001\002\000\052" +
    "\017\ufff2\021\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\057\ufff2\060\ufff2\064" +
    "\ufff2\001\002\000\050\017\uffe5\021\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\060\uffe5\064\uffe5\001\002\000\050\017\uffc2\021\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\060\uffc2\064\uffc2\001\002\000\052\017\uffef" +
    "\021\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\057\uffef\060\uffef\064\uffef\001" +
    "\002\000\050\017\uffe6\021\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\060\uffe6" +
    "\064\uffe6\001\002\000\060\017\uffe7\020\120\021\uffe7\023" +
    "\uff87\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\122\034\117\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\060\uffe7\064\uffe7" +
    "\001\002\000\052\017\ufff0\021\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\057" +
    "\ufff0\060\ufff0\064\ufff0\001\002\000\050\017\uffe2\021\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\060\uffe2\064\uffe2\001\002\000\024\011" +
    "\110\012\107\013\077\014\116\015\113\023\104\045\103" +
    "\063\115\065\020\001\002\000\050\017\uffe1\021\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\060\uffe1\064\uffe1\001\002\000\050\017\uffe3" +
    "\021\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\060\uffe3\064\uffe3\001\002\000" +
    "\040\021\124\025\130\026\145\027\125\030\134\031\132" +
    "\032\127\035\126\036\131\037\136\040\133\041\135\042" +
    "\137\043\140\044\142\001\002\000\052\017\uffdc\021\uffdc" +
    "\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\060\uffdc\064\uffdc\001\002\000" +
    "\026\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\022\uffeb" +
    "\023\uffeb\045\uffeb\063\uffeb\065\uffeb\001\002\000\024\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\023\uffca\045\uffca" +
    "\063\uffca\065\uffca\001\002\000\026\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\022\uffea\023\uffea\045\uffea\063\uffea" +
    "\065\uffea\001\002\000\026\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\022\uffed\023\uffed\045\uffed\063\uffed\065\uffed" +
    "\001\002\000\024\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\023\uffc9\045\uffc9\063\uffc9\065\uffc9\001\002\000\026" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\022\uffe8\023" +
    "\uffe8\045\uffe8\063\uffe8\065\uffe8\001\002\000\024\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\023\uffc7\045\uffc7\063" +
    "\uffc7\065\uffc7\001\002\000\026\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\022\uffe9\023\uffe9\045\uffe9\063\uffe9\065" +
    "\uffe9\001\002\000\024\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\023\uffc6\045\uffc6\063\uffc6\065\uffc6\001\002\000" +
    "\024\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\023\uffc8" +
    "\045\uffc8\063\uffc8\065\uffc8\001\002\000\024\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\023\uffc5\045\uffc5\063\uffc5" +
    "\065\uffc5\001\002\000\024\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\023\uffc0\045\uffc0\063\uffc0\065\uffc0\001\002" +
    "\000\024\011\110\012\107\013\077\014\116\015\113\023" +
    "\104\045\103\063\115\065\020\001\002\000\024\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\023\uffbf\045\uffbf\063" +
    "\uffbf\065\uffbf\001\002\000\024\011\110\012\107\013\077" +
    "\014\116\015\113\023\104\045\103\063\115\065\020\001" +
    "\002\000\024\011\110\012\107\013\077\014\116\015\113" +
    "\023\104\045\103\063\115\065\020\001\002\000\026\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\022\uffec\023\uffec" +
    "\045\uffec\063\uffec\065\uffec\001\002\000\050\017\uffbd\021" +
    "\uffbd\024\uffbd\025\130\026\145\027\125\030\134\031\132" +
    "\032\127\035\126\036\131\037\136\040\133\041\135\042" +
    "\137\043\140\044\142\060\uffbd\064\uffbd\001\002\000\050" +
    "\017\uffc4\021\uffc4\024\uffc4\025\130\026\145\027\125\030" +
    "\134\031\132\032\127\035\126\036\131\037\136\040\133" +
    "\041\135\042\137\043\140\044\142\060\uffc4\064\uffc4\001" +
    "\002\000\050\017\uffc3\021\uffc3\024\uffc3\025\130\026\145" +
    "\027\125\030\134\031\132\032\127\035\126\036\131\037" +
    "\136\040\133\041\135\042\137\043\140\044\142\060\uffc3" +
    "\064\uffc3\001\002\000\050\017\ufff8\021\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044" +
    "\ufff8\060\ufff8\064\ufff8\001\002\000\024\011\110\012\107" +
    "\013\077\014\116\015\113\023\104\045\103\063\115\065" +
    "\020\001\002\000\006\017\ufffc\024\ufffc\001\002\000\040" +
    "\024\155\025\130\026\145\027\125\030\134\031\132\032" +
    "\127\035\126\036\131\037\136\040\133\041\135\042\137" +
    "\043\140\044\142\001\002\000\050\017\uffbb\021\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\060\uffbb\064\uffbb\001\002\000\050\017\uffbe" +
    "\021\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\035\126\036\131\037\136\040\133\041\135" +
    "\042\137\043\uffbe\044\uffbe\060\uffbe\064\uffbe\001\002\000" +
    "\024\011\110\012\107\013\077\014\116\015\113\023\104" +
    "\045\103\063\115\065\020\001\002\000\040\024\161\025" +
    "\130\026\145\027\125\030\134\031\132\032\127\035\126" +
    "\036\131\037\136\040\133\041\135\042\137\043\140\044" +
    "\142\001\002\000\004\064\uffde\001\002\000\024\011\110" +
    "\012\107\013\077\014\116\015\113\023\104\045\103\063" +
    "\115\065\020\001\002\000\004\016\uff98\001\002\000\004" +
    "\016\165\001\002\000\044\003\uff97\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\017\uff97\046\uff97\050\uff97\051\uff97" +
    "\052\uff97\055\uff97\056\uff97\061\uff97\062\uff97\063\uff97\065" +
    "\uff97\001\002\000\044\003\060\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff89\046\051\050\067\051\044\052" +
    "\063\055\061\056\056\061\073\062\066\063\047\065\020" +
    "\001\002\000\004\017\170\001\002\000\050\003\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\017\uff96\046\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\061\uff96\062\uff96\063\uff96\065\uff96\001\002\000\040" +
    "\024\172\025\130\026\145\027\125\030\134\031\132\032" +
    "\127\035\126\036\131\037\136\040\133\041\135\042\137" +
    "\043\140\044\142\001\002\000\004\016\173\001\002\000" +
    "\044\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\017\uff9a\046\uff9a\050\uff9a\051\uff9a\052\uff9a\055\uff9a\056" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\065\uff9a\001\002\000\044" +
    "\003\060\004\005\005\014\006\006\007\015\010\010\017" +
    "\uff89\046\051\050\067\051\044\052\063\055\061\056\056" +
    "\061\073\062\066\063\047\065\020\001\002\000\004\017" +
    "\176\001\002\000\050\003\uff99\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\017\uff99\046\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\061\uff99\062\uff99" +
    "\063\uff99\065\uff99\001\002\000\024\011\110\012\107\013" +
    "\077\014\116\015\113\023\104\045\103\063\115\065\020" +
    "\001\002\000\040\024\201\025\130\026\145\027\125\030" +
    "\134\031\132\032\127\035\126\036\131\037\136\040\133" +
    "\041\135\042\137\043\140\044\142\001\002\000\004\064" +
    "\uffdd\001\002\000\010\020\120\022\211\064\uffd1\001\002" +
    "\000\006\022\204\064\uffd2\001\002\000\004\016\206\001" +
    "\002\000\004\064\uffcf\001\002\000\024\011\110\012\107" +
    "\013\077\014\116\015\113\023\104\045\103\063\115\065" +
    "\020\001\002\000\004\017\210\001\002\000\004\064\uffd3" +
    "\001\002\000\024\011\110\012\107\013\077\014\116\015" +
    "\113\023\104\045\103\063\115\065\020\001\002\000\040" +
    "\025\130\026\145\027\125\030\134\031\132\032\127\035" +
    "\126\036\131\037\136\040\133\041\135\042\137\043\140" +
    "\044\142\064\uffd0\001\002\000\020\011\110\012\107\013" +
    "\077\014\116\015\113\063\234\065\020\001\002\000\004" +
    "\016\uffad\001\002\000\004\016\216\001\002\000\004\053" +
    "\uffac\001\002\000\004\053\221\001\002\000\006\017\uffb2" +
    "\054\226\001\002\000\014\011\110\012\107\013\077\014" +
    "\116\015\113\001\002\000\004\057\223\001\002\000\050" +
    "\003\060\004\005\005\014\006\006\007\015\010\010\017" +
    "\uff89\046\051\050\067\051\044\052\063\053\uff89\054\uff89" +
    "\055\061\056\056\061\073\062\066\063\047\065\020\001" +
    "\002\000\010\017\uffb0\053\221\054\uffb0\001\002\000\006" +
    "\017\uffb1\054\uffb1\001\002\000\004\057\231\001\002\000" +
    "\004\017\230\001\002\000\050\003\uffab\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\017\uffab\046\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\061\uffab" +
    "\062\uffab\063\uffab\065\uffab\001\002\000\044\003\060\004" +
    "\005\005\014\006\006\007\015\010\010\017\uff89\046\051" +
    "\050\067\051\044\052\063\055\061\056\056\061\073\062" +
    "\066\063\047\065\020\001\002\000\004\017\uffb3\001\002" +
    "\000\004\024\235\001\002\000\010\020\120\023\uff87\024" +
    "\uffe7\001\002\000\004\016\236\001\002\000\004\053\uffaf" +
    "\001\002\000\004\053\221\001\002\000\006\017\uffb2\054" +
    "\226\001\002\000\004\017\242\001\002\000\050\003\uffae" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\017\uffae\046" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\061\uffae\062\uffae\063\uffae\065\uffae\001\002\000" +
    "\040\025\130\026\145\027\125\030\134\031\132\032\127" +
    "\035\126\036\131\037\136\040\133\041\135\042\137\043" +
    "\140\044\142\064\uffaa\001\002\000\050\003\uff8c\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\017\uff8c\046\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\065\uff8c\001\002\000\024\011" +
    "\110\012\107\013\077\014\116\015\113\023\104\045\103" +
    "\063\115\065\020\001\002\000\004\016\uffb7\001\002\000" +
    "\004\016\250\001\002\000\044\003\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\017\uffb6\046\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\055\uffb6\056\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\065\uffb6\001\002\000\044\003\060\004\005\005\014\006" +
    "\006\007\015\010\010\017\uff89\046\051\050\067\051\044" +
    "\052\063\055\061\056\056\061\073\062\066\063\047\065" +
    "\020\001\002\000\004\017\253\001\002\000\052\003\uffb5" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\017\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\061\uffb5\062\uffb5\063\uffb5\065\uffb5\001" +
    "\002\000\052\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\017\uffcb\046\uffcb\047\256\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\065\uffcb\001\002\000\050\003\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\017\uffcc\046\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\065\uffcc\001\002\000\004\016\260" +
    "\001\002\000\050\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\017\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\065\uffb4\001\002\000\044\003\uffce\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\017\uffce\046\uffce\050\uffce\051" +
    "\uffce\052\uffce\055\uffce\056\uffce\061\uffce\062\uffce\063\uffce" +
    "\065\uffce\001\002\000\044\003\060\004\005\005\014\006" +
    "\006\007\015\010\010\017\uff89\046\051\050\067\051\044" +
    "\052\063\055\061\056\056\061\073\062\066\063\047\065" +
    "\020\001\002\000\004\017\263\001\002\000\050\003\uffcd" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\017\uffcd\046" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\061\uffcd\062\uffcd\063\uffcd\065\uffcd\001\002\000" +
    "\040\024\265\025\130\026\145\027\125\030\134\031\132" +
    "\032\127\035\126\036\131\037\136\040\133\041\135\042" +
    "\137\043\140\044\142\001\002\000\004\016\266\001\002" +
    "\000\044\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\017\uffba\046\uffba\050\uffba\051\uffba\052\uffba\055\uffba" +
    "\056\uffba\061\uffba\062\uffba\063\uffba\065\uffba\001\002\000" +
    "\044\003\060\004\005\005\014\006\006\007\015\010\010" +
    "\017\uff89\046\051\050\067\051\044\052\063\055\061\056" +
    "\056\061\073\062\066\063\047\065\020\001\002\000\004" +
    "\017\271\001\002\000\052\003\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\017\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\065\uffb9\001\002\000\052\003\uffcb" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\017\uffcb\046" +
    "\uffcb\047\256\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\061\uffcb\062\uffcb\063\uffcb\065\uffcb\001" +
    "\002\000\050\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\017\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\065\uffb8\001\002\000\004\022\303\001\002\000\024\011" +
    "\110\012\107\013\077\014\116\015\113\023\104\045\103" +
    "\063\115\065\020\001\002\000\026\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\277\023\uffdb\045\uffdb\063\uffdb" +
    "\065\uffdb\001\002\000\024\011\110\012\107\013\077\014" +
    "\116\015\113\023\104\045\103\063\115\065\020\001\002" +
    "\000\004\017\301\001\002\000\004\064\uffd9\001\002\000" +
    "\044\024\uffd7\025\130\026\145\027\125\030\134\031\132" +
    "\032\127\035\126\036\131\037\136\040\133\041\135\042" +
    "\137\043\140\044\142\060\uffd7\064\uffd7\001\002\000\024" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\023\uffda\045" +
    "\uffda\063\uffda\065\uffda\001\002\000\010\017\uff8b\053\uff8b" +
    "\054\uff8b\001\002\000\020\002\uff7f\003\uff7f\004\uff7f\005" +
    "\uff7f\006\uff7f\007\uff7f\010\uff7f\001\002\000\016\004\005" +
    "\005\014\006\006\007\015\010\010\063\320\001\002\000" +
    "\004\016\uff93\001\002\000\004\016\311\001\002\000\044" +
    "\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\017" +
    "\uff92\046\uff92\050\uff92\051\uff92\052\uff92\055\uff92\056\uff92" +
    "\061\uff92\062\uff92\063\uff92\065\uff92\001\002\000\044\003" +
    "\060\004\005\005\014\006\006\007\015\010\010\017\uff89" +
    "\046\051\050\067\051\044\052\063\055\061\056\056\061" +
    "\073\062\066\063\047\065\020\001\002\000\004\017\314" +
    "\001\002\000\050\003\uff91\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\017\uff91\046\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\056\uff91\061\uff91\062\uff91\063" +
    "\uff91\065\uff91\001\002\000\004\063\336\001\002\000\004" +
    "\060\322\001\002\000\004\060\uff9d\001\002\000\022\022" +
    "\321\025\130\026\145\027\125\030\134\031\132\032\127" +
    "\060\uff9c\001\002\000\024\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\023\uffdb\045\uffdb\063\uffdb\065\uffdb\001\002" +
    "\000\024\011\110\012\107\013\077\014\116\015\113\023" +
    "\104\045\103\063\115\065\020\001\002\000\040\025\130" +
    "\026\145\027\125\030\134\031\132\032\127\035\126\036" +
    "\131\037\136\040\133\041\135\042\137\043\140\044\142" +
    "\060\324\001\002\000\004\063\325\001\002\000\024\022" +
    "\321\025\130\026\145\027\125\030\134\031\132\032\127" +
    "\033\122\034\117\001\002\000\004\024\uffa7\001\002\000" +
    "\004\024\331\001\002\000\004\024\uffa8\001\002\000\004" +
    "\016\332\001\002\000\044\003\uff95\004\uff95\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\017\uff95\046\uff95\050\uff95\051\uff95" +
    "\052\uff95\055\uff95\056\uff95\061\uff95\062\uff95\063\uff95\065" +
    "\uff95\001\002\000\044\003\060\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff89\046\051\050\067\051\044\052" +
    "\063\055\061\056\056\061\073\062\066\063\047\065\020" +
    "\001\002\000\004\017\335\001\002\000\050\003\uff94\004" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\017\uff94\046\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\061\uff94\062\uff94\063\uff94\065\uff94\001\002\000\020" +
    "\022\321\025\130\026\145\027\125\030\134\031\132\032" +
    "\127\001\002\000\004\060\uff9b\001\002\000\024\011\110" +
    "\012\107\013\077\014\116\015\113\023\104\045\103\063" +
    "\115\065\020\001\002\000\040\025\130\026\145\027\125" +
    "\030\134\031\132\032\127\035\126\036\131\037\136\040" +
    "\133\041\135\042\137\043\140\044\142\064\uffd8\001\002" +
    "\000\004\002\uff85\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\012\002\012\046\011\047\006\050\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\012\046\341\047\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\075\022" +
    "\076\021\001\001\000\002\001\001\000\010\002\023\025" +
    "\024\026\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\023\025\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\034\001\001\000\002\001\001\000" +
    "\052\002\064\010\037\011\040\014\067\015\054\016\061" +
    "\017\047\021\071\023\041\024\073\035\063\037\053\041" +
    "\052\042\051\043\070\044\045\045\044\051\036\053\056" +
    "\054\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\273\013\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\002" +
    "\064\010\037\011\040\014\067\015\054\016\061\017\047" +
    "\021\071\023\041\024\073\035\063\037\053\041\052\042" +
    "\051\043\070\044\045\045\303\051\036\053\056\054\042" +
    "\001\001\000\010\004\273\013\274\022\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\113\005\111\024\073\032\101\034\242\051\110\053\100" +
    "\054\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\113\005\111\006\075\024\073\032\101\034\104\051\110" +
    "\052\105\053\100\054\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\113\005\111\024\073\032\101\034" +
    "\155\051\110\053\100\054\077\001\001\000\022\003\113" +
    "\005\111\024\073\032\101\034\153\051\110\053\100\054" +
    "\077\001\001\000\010\004\140\031\142\033\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\113\005\111\024\073\032\101" +
    "\034\122\051\110\053\100\054\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\140\031\142\033\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\113\005\111\024\073\032\101\034" +
    "\147\051\110\053\100\054\077\001\001\000\002\001\001" +
    "\000\022\003\113\005\111\024\073\032\101\034\146\051" +
    "\110\053\100\054\077\001\001\000\022\003\113\005\111" +
    "\024\073\032\101\034\145\051\110\053\100\054\077\001" +
    "\001\000\002\001\001\000\010\004\140\031\142\033\143" +
    "\001\001\000\010\004\140\031\142\033\143\001\001\000" +
    "\010\004\140\031\142\033\143\001\001\000\002\001\001" +
    "\000\024\003\113\005\111\006\152\024\073\032\101\034" +
    "\104\051\110\053\100\054\077\001\001\000\002\001\001" +
    "\000\010\004\140\031\142\033\143\001\001\000\002\001" +
    "\001\000\010\004\140\031\142\033\143\001\001\000\022" +
    "\003\113\005\111\024\073\032\101\034\157\051\110\053" +
    "\100\054\077\001\001\000\010\004\140\031\142\033\143" +
    "\001\001\000\002\001\001\000\022\003\113\005\111\024" +
    "\073\032\101\034\170\051\110\053\100\054\077\001\001" +
    "\000\004\070\163\001\001\000\002\001\001\000\004\071" +
    "\165\001\001\000\052\002\064\010\037\011\040\014\067" +
    "\015\054\016\061\017\047\021\071\023\041\024\073\035" +
    "\063\037\053\041\052\042\051\043\070\044\045\045\166" +
    "\051\036\053\056\054\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\140\031\142\033\143\001\001" +
    "\000\002\001\001\000\004\067\173\001\001\000\052\002" +
    "\064\010\037\011\040\014\067\015\054\016\061\017\047" +
    "\021\071\023\041\024\073\035\063\037\053\041\052\042" +
    "\051\043\070\044\045\045\174\051\036\053\056\054\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\113\005\111\024\073\032\101\034\177\051\110\053\100" +
    "\054\077\001\001\000\010\004\140\031\142\033\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\113\005\111\006\206\024\073\032\101\034\104\051\110" +
    "\053\100\054\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\113\005\111\024\073\032\101\034\211" +
    "\051\110\053\100\054\077\001\001\000\010\004\140\031" +
    "\142\033\143\001\001\000\014\003\113\005\232\024\073" +
    "\051\110\054\077\001\001\000\004\065\214\001\001\000" +
    "\002\001\001\000\004\066\216\001\001\000\004\036\217" +
    "\001\001\000\004\055\226\001\001\000\004\003\221\001" +
    "\001\000\002\001\001\000\052\002\064\010\037\011\040" +
    "\014\067\015\054\016\061\017\047\021\071\023\041\024" +
    "\073\035\063\037\053\041\052\042\051\043\070\044\045" +
    "\045\223\051\036\053\056\054\042\001\001\000\004\036" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\002\064\010\037\011" +
    "\040\014\067\015\054\016\061\017\047\021\071\023\041" +
    "\024\073\035\063\037\053\041\052\042\051\043\070\044" +
    "\045\045\231\051\036\053\056\054\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\236\001\001\000\004\036\237\001\001" +
    "\000\004\055\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\140\031\142\033\143\001\001\000\002" +
    "\001\001\000\022\003\113\005\111\024\073\032\101\034" +
    "\263\051\110\053\100\054\077\001\001\000\004\061\246" +
    "\001\001\000\002\001\001\000\004\062\250\001\001\000" +
    "\052\002\064\010\037\011\040\014\067\015\054\016\061" +
    "\017\047\021\071\023\041\024\073\035\063\037\053\041" +
    "\052\042\051\043\070\044\045\045\251\051\036\053\056" +
    "\054\042\001\001\000\002\001\001\000\004\063\253\001" +
    "\001\000\006\027\254\030\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\260\001" +
    "\001\000\052\002\064\010\037\011\040\014\067\015\054" +
    "\016\061\017\047\021\071\023\041\024\073\035\063\037" +
    "\053\041\052\042\051\043\070\044\045\045\261\051\036" +
    "\053\056\054\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\140\031\142\033\143\001\001\000\002" +
    "\001\001\000\004\057\266\001\001\000\052\002\064\010" +
    "\037\011\040\014\067\015\054\016\061\017\047\021\071" +
    "\023\041\024\073\035\063\037\053\041\052\042\051\043" +
    "\070\044\045\045\267\051\036\053\056\054\042\001\001" +
    "\000\002\001\001\000\004\060\271\001\001\000\006\027" +
    "\254\030\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\113\005\111\024\073\032\101\034\301\051" +
    "\110\053\100\054\077\001\001\000\002\001\001\000\024" +
    "\003\113\005\111\006\277\024\073\032\101\034\104\051" +
    "\110\053\100\054\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\140\031\142\033\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\314\012\315\016\316\001\001\000\004\073\307\001" +
    "\001\000\002\001\001\000\004\074\311\001\001\000\052" +
    "\002\064\010\037\011\040\014\067\015\054\016\061\017" +
    "\047\021\071\023\041\024\073\035\063\037\053\041\052" +
    "\042\051\043\070\044\045\045\312\051\036\053\056\054" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\273\013\274\001\001\000\002\001\001\000\022" +
    "\003\113\005\111\024\073\032\101\034\322\051\110\053" +
    "\100\054\077\001\001\000\010\004\140\031\142\033\143" +
    "\001\001\000\010\016\325\040\326\053\327\001\001\000" +
    "\010\004\273\013\274\022\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\332\001\001\000\052\002\064\010\037\011\040" +
    "\014\067\015\054\016\061\017\047\021\071\023\041\024" +
    "\073\035\063\037\053\041\052\042\051\043\070\044\045" +
    "\045\333\051\036\053\056\054\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\273\013\274\001\001" +
    "\000\002\001\001\000\022\003\113\005\111\024\073\032" +
    "\101\034\340\051\110\053\100\054\077\001\001\000\010" +
    "\004\140\031\142\033\143\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
    private Lexer scanner;
    private SymbolTable symbolTable;
    private BufferedWriter syntaxFile;
    private BufferedWriter semanticFile;

    // Clase Node para encapsular información de los nodos
    public static class Node {
        private String value; // Valor del nodo (ej. "42", "+", "x")
        private int line;     // Línea en el código fuente
        private int column;   // Columna en el código fuente
        private Node left;    // Nodo izquierdo (opcional)
        private Node right;   // Nodo derecho (opcional)

        public Node(String value, int line, int column) {
            this.value = value;
            this.line = line;
            this.column = column;
        }

        public String getValue() { return value; }
        public int getLine() { return line; }
        public int getColumn() { return column; }
        public Node getLeft() { return left; }
        public void setLeft(Node left) { this.left = left; }
        public Node getRight() { return right; }
        public void setRight(Node right) { this.right = right; }

        @Override
        public String toString() {
            return value; // Convierte el nodo en un String cuando se necesite
        }
    }

    @SuppressWarnings("deprecation")
    public Parser(Lexer scanner) {
        this.scanner = scanner;
        this.symbolTable = new SymbolTable();
    }

    public void createSemanticWriter(String root) throws IOException {
        semanticFile = new BufferedWriter(new FileWriter(root));
    }


    public void createSyntaxWriter(String root) throws IOException {
        syntaxFile = new BufferedWriter(new FileWriter(root));
    }


    public void reportSyntaxError(int line, int column) throws IOException {
        if(syntaxFile != null) {
            syntaxFile.write("Error sintáctico recuperado en línea " + line + ", columna " + column + ".\n");
            syntaxFile.flush();
        }
    }


    public void reportSemanticError(String text) throws IOException {
        if(semanticFile != null) {
            semanticFile.write(text);
            semanticFile.flush();
        }
    }


    public void closeSyntaxWriter() throws IOException {
        if(syntaxFile != null) {
            syntaxFile.close();
        }
    }


    public void closeSemanticWriter() throws IOException {
        if(semanticFile != null) {
            semanticFile.close();
        }
    }


    @Override
    public void syntax_error(Symbol current) {
        try {
          reportSyntaxError(current.left, current.right);
        } catch (IOException e) {
          e.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // parametro_decl ::= tipo IDENTIFICADOR COMMA parametro_decl 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        String idVarName = (String) ((Symbol) idVar).value;
        String typeName = (String) ((Symbol) t).value;

        int left = ((Symbol) idVar).left;
        int right = ((Symbol) idVar).right;

        // Verificar si ya existe en la tabla de símbolos
        if(!symbolTable.addSymbol(idVarName, typeName + ":" + idVarName)) {
            reportSemanticError("Error semántico en la declaración de una función, hay parámetros repetidos en línea " + left + ".\n");
        } 

        RESULT = new Node(typeName, left, right);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // parametro_decl ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        String idVarName = (String) ((Symbol) idVar).value;
        String typeName = (String) ((Symbol) t).value;


        int left = ((Symbol) idVar).left;
        int right = ((Symbol) idVar).right;

        if(!symbolTable.addSymbol(idVarName, typeName + ":" + idVarName)) {
            reportSemanticError("Error semántico en la declaración de una función, hay parámetros repetidos en línea " + left + ".\n");
        } 

        RESULT = new Node(typeName, left, right); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parametros_decl ::= parametro_decl 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametros_decl ::= 
            {
              Object RESULT =null;
		 RESULT = new Node("empty_params", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sec_oper ::= expr_logica_aritmetica COMMA sec_oper 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node datoNode = (Node) dato; // Casting a Node
        Node seqNode = (Node) seq;   // Casting a Node

        Node opNode = new Node(datoNode.getValue() + ":" + seqNode.getValue(), datoNode.getLine(), datoNode.getColumn());
        opNode.setLeft(datoNode);
        opNode.setRight(seqNode);
        RESULT = opNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sec_oper ::= expr_logica_aritmetica 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = (Node) dato;  // Casting a Node
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros_llamada ::= sec_oper 
            {
              Object RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Node) seq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros_llamada ::= 
            {
              Object RESULT =null;
		 RESULT = new Node("empty_call_params", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // llamada_funcion ::= nombrefuncion PARENTESIS_APERTURA parametros_llamada PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        // Casting seguro a Node
        Node funcNameNode = (Node) f;
        Node paramsNode = (Node) params;

        // Crear nodo de la función con su nombre
        Node funcNode = new Node(funcNameNode.getValue(), funcNameNode.getLine(), funcNameNode.getColumn());
        
        // Agregar los parámetros como hijo izquierdo
        funcNode.setLeft(paramsNode);

        // Asignar el resultado
        RESULT = funcNode;

        // Verifica que la llamada sea válida en términos de parámetros y existencia.
        if (!symbolTable.verifyFunctionCall(funcNameNode.getValue(), paramsNode.getValue())) {
            reportSemanticError("Error en la llamada a la función: tipo de datos incorrecto, función inexistente o cantidad incorrecta de parámetros en línea " + funcNameNode.getLine() + ".\n");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = new Node("int", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = new Node("float", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new Node("bool", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = new Node("char", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new Node("string", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		int intVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Symbol intSymbol = (Symbol) intVar;RESULT = new Node(intSymbol.value.toString(), intSymbol.left, intSymbol.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Symbol strSymbol = (Symbol) strVar;RESULT = new Node(strSymbol.value.toString(), strSymbol.left, strSymbol.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int floatVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floatVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object floatVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Symbol floatSymbol = (Symbol) floatVar;RESULT = new Node(floatSymbol.value.toString(), floatSymbol.left, floatSymbol.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int charVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object charVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Symbol charSymbol = (Symbol) charVar;RESULT = new Node(charSymbol.value.toString(), charSymbol.left, charSymbol.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object boolVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Symbol boolSymbol = (Symbol) boolVar; RESULT = new Node(boolSymbol.value.toString(), boolSymbol.left, boolSymbol.right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_aritmeticas ::= SUMA 
            {
              Object RESULT =null;
		 RESULT = new Node("+", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_aritmeticas ::= RESTA 
            {
              Object RESULT =null;
		 RESULT = new Node("-", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_aritmeticas ::= MULTIPLICACION 
            {
              Object RESULT =null;
		 RESULT = new Node("*", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_aritmeticas ::= DIVISION 
            {
              Object RESULT =null;
		 RESULT = new Node("/", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_aritmeticas ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = new Node("%", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_aritmeticas ::= POTENCIA 
            {
              Object RESULT =null;
		 RESULT = new Node("^", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dato_general ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Symbol idSymbol = (Symbol) idVar; RESULT = new Node(idSymbol.value.toString(), idSymbol.left, idSymbol.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dato_general ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dato_general ::= llamada_funcion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dato_general ::= acceso_arreglo 
            {
              Object RESULT =null;
		int arrNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arrName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = arrName; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_unaria ::= INCREMENTO 
            {
              Object RESULT =null;
		 RESULT = new Node("++", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_unaria ::= DECREMENTO 
            {
              Object RESULT =null;
		 RESULT = new Node("--", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_unaria ::= IDENTIFICADOR op_unaria 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  

        Symbol idSymbol = (Symbol) idVar;
        Symbol opSymbol = (Symbol) op;

        Node unariaNode = new Node(opSymbol.value.toString(), idSymbol.left, idSymbol.right);
        
        Node idNode = new Node(idSymbol.value.toString(), idSymbol.left, idSymbol.right);
        unariaNode.setLeft(idNode);

        if (!symbolTable.isInLocalScope(idSymbol.value.toString())) {
            reportSemanticError("Error semántico, identificador fuera del scope en línea " + idSymbol.left + ".\n");
        }

        RESULT = unariaNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unaria",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sec_var ::= IDENTIFICADOR COMMA sec_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // imprimir ::= PRINT PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // leer_var ::= READ PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("leer_var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // acceso_arreglo ::= IDENTIFICADOR CORCHETE_APERTURA expr_logica_aritmetica CORCHETE_CIERRE 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
        Symbol idSymbol = (Symbol) idVar;
        Node indexNode = (Node) e; 

        if (!symbolTable.isIndexInteger(indexNode.getValue())) {
            reportSemanticError("Error semántico, el tipo de dato de un índice debe ser entero en línea " + idSymbol.left + ".\n");
        }

        Node arrayAccessNode = new Node(idSymbol.value.toString(), idSymbol.left, idSymbol.right);
        
        arrayAccessNode.setLeft(indexNode);

        RESULT = arrayAccessNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // actualizacion ::= ASIGNACION 
            {
              Object RESULT =null;
		 RESULT = new Node("=", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // actualizacion ::= op_aritmeticas ASIGNACION 
            {
              Object RESULT =null;
		int arit_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arit_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arit_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node aritNode = (Node) arit_op; RESULT = new Node(aritNode.getValue() + "=", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion_arreglo ::= IDENTIFICADOR ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Symbol idSymbol = (Symbol) idVar;
        Node seqNode = (Node) seq; 

        Node arrayAssignNode = new Node("=", idSymbol.left, idSymbol.right);

        Node arrayNode = new Node(idSymbol.value.toString(), idSymbol.left, idSymbol.right);
        arrayAssignNode.setLeft(arrayNode);

        arrayAssignNode.setRight(seqNode);

        if (!symbolTable.verifyArrayDeclaration(symbolTable.getType(idSymbol.value.toString()), seqNode.getValue())) { 
            reportSemanticError("Error en la asignación al arreglo: tipo de datos incorrecto o variable fuera del scope en línea " + idSymbol.left + ".\n");
        }

        RESULT = arrayAssignNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion_indice ::= acceso_arreglo actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node arrNode = (Node) arr;  
        Node actNode = (Node) act;  
        Node exprNode = (Node) e;   

        Node indexAssignNode = new Node(actNode.getValue(), arrNode.getLine(), arrNode.getColumn());
        indexAssignNode.setLeft(arrNode);
        indexAssignNode.setRight(exprNode);

        if (!symbolTable.verifyType(symbolTable.getType(arrNode.getValue()), exprNode.getValue())) {
            reportSemanticError("Error en la asignación a índice: tipo de datos incorrecto o variable fuera del scope en línea " + arrNode.getLine() + ".\n");
        }

        RESULT = indexAssignNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_indice",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_variable ::= IDENTIFICADOR actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Symbol idSymbol = (Symbol) idVar; 
        Node actNode = (Node) act;        
        Node exprNode = (Node) e;         

        Node assignNode = new Node(actNode.getValue(), idSymbol.left, idSymbol.right);
    
        Node idNode = new Node(idSymbol.value.toString(), idSymbol.left, idSymbol.right);
        assignNode.setLeft(idNode);

        assignNode.setRight(exprNode);

        if (!symbolTable.verifyType(symbolTable.getType(idSymbol.value.toString()), exprNode.getValue())) {
            reportSemanticError("Error en la asignación a variable: tipo de datos incorrecto o variable fuera del scope en línea " + idSymbol.left + ".\n");
        }

        RESULT = assignNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion_compuesta ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion_compuesta ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion_compuesta ::= asignacion_indice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_arreglo_op ::= ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (Node) seq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_arreglo_op ::= 
            {
              Object RESULT =null;
		 RESULT = new Node("empty_array_init", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Symbol typeSymbol = (Symbol) t;
        Symbol idSymbol = (Symbol) idVar;

        Node declNode = new Node(typeSymbol.value.toString(), idSymbol.left, idSymbol.right);

        if (!symbolTable.addSymbol(idSymbol.value.toString(), typeSymbol.value.toString() + ":" + idSymbol.value.toString())) {
            reportSemanticError("Error semántico en una declaración. Ya existe una variable con el mismo nombre dentro del scope en línea " + idSymbol.left + ".\n");
        } 

        RESULT = declNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= tipo IDENTIFICADOR ASIGNACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Symbol typeSymbol = (Symbol) t;
        Symbol idSymbol = (Symbol) idVar;
        Node exprNode = (Node) e;

        Node declAssignNode = new Node("=", idSymbol.left, idSymbol.right);
        declAssignNode.setLeft(new Node(idSymbol.value.toString(), idSymbol.left, idSymbol.right));
        declAssignNode.setRight(exprNode);

        if (!symbolTable.addSymbol(idSymbol.value.toString(), typeSymbol.value.toString() + ":" + idSymbol.value.toString())) {
            reportSemanticError("Error semántico en una declaración. Ya existe una variable con el mismo nombre dentro del scope en línea " + idSymbol.left + ".\n");
        } 

        if (!symbolTable.verifyType(typeSymbol.value.toString(), exprNode.getValue())) {
            reportSemanticError("Error en el tipo de datos en la asignación de una declaración o existencia de una variable fuera del scope en línea " + idSymbol.left + ".\n");
        }

        RESULT = declAssignNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion ::= tipo acceso_arreglo declaracion_arreglo_op 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arrName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arr_declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arr_declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arr_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Symbol typeSymbol = (Symbol) t;
        Node arrNode = (Node) arrName;
        Node arrDeclNode = (Node) arr_decl;

        Node arrayDeclNode = new Node("array_decl", arrNode.getLine(), arrNode.getColumn());
        arrayDeclNode.setLeft(new Node(typeSymbol.value.toString(), -1, -1));
        arrayDeclNode.setRight(arrDeclNode);

        if (!symbolTable.addSymbol(arrNode.getValue(), typeSymbol.value.toString() + ":" + arrNode.getValue())) {
            reportSemanticError("Error semántico en una declaración. Ya existe una variable con el mismo nombre dentro del scope en línea " + arrNode.getLine() + ".\n");
        }  

        if (!symbolTable.verifyType(typeSymbol.value.toString(), arrDeclNode.getValue())) {
            reportSemanticError("Error en el tipo de datos en la asignación de una declaración o existencia de una variable fuera del scope en línea " + arrNode.getLine() + ".\n");
        }

        RESULT = arrayDeclNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$0 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_expr ::= ELSE APERTURA_DE_BLOQUE NT$0 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_op ::= else_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_op ::= 
            {
              Object RESULT =null;
		 RESULT = new Node("no_else", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relacion ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = new Node("<", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		 RESULT = new Node("<=", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relacion ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = new Node(">", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		 RESULT = new Node(">=", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacion ::= IGUALDAD 
            {
              Object RESULT =null;
		 RESULT = new Node("==", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relacion ::= DIFERENTE 
            {
              Object RESULT =null;
		 RESULT = new Node("!=", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparacion_operacion ::= expr_logica_aritmetica relacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        // Casting seguro
        Node leftExpr = (Node) e1;
        Node rightExpr = (Node) e2;
        Node relNode = (Node) rel;

        // Crear nodo de comparación
        Node opNode = new Node(relNode.getValue(), leftExpr.getLine(), leftExpr.getColumn());
        opNode.setLeft(leftExpr);
        opNode.setRight(rightExpr);

        // Validar la operación en la tabla de símbolos
        if (!symbolTable.validateOperation(leftExpr.getValue(), relNode.getValue(), rightExpr.getValue())) {
            reportSemanticError("Error semántico al operar o comparar tipos que no son compatibles o están fuera del scope en línea " + leftExpr.getLine() + ".\n");
        }

        RESULT = opNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparacion_operacion ::= expr_logica_aritmetica op_aritmeticas expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        // Casting seguro
        Node leftExpr = (Node) e1;
        Node rightExpr = (Node) e2;
        Node opNode = (Node) op;

        // Crear nodo de operación aritmética
        Node arithNode = new Node(opNode.getValue(), leftExpr.getLine(), leftExpr.getColumn());
        arithNode.setLeft(leftExpr);
        arithNode.setRight(rightExpr);

        // Validar la operación en la tabla de símbolos
        if (!symbolTable.validateOperation(leftExpr.getValue(), opNode.getValue(), rightExpr.getValue())) {
            reportSemanticError("Error semántico al operar o comparar tipos que no son compatibles o están fuera del scope en línea " + leftExpr.getLine() + ".\n");
        }

        RESULT = arithNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparacion_operacion ::= dato_general 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node dataNode = (Node) dato;

        // Validar si el dato está dentro del scope o es un tipo válido
        if (!symbolTable.isDataType(dataNode.getValue()) && !symbolTable.isInLocalScope(dataNode.getValue())) {
            reportSemanticError("Error semántico, variable fuera del scope en línea " + dataNode.getLine() + ".\n");
        }

        RESULT = dataNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparacion_operacion ::= expr_unaria 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = (Node) op; // Casting a Node
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_logica ::= CONJUNCION 
            {
              Object RESULT =null;
		 RESULT = new Node("and", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_logica ::= DISYUNCION 
            {
              Object RESULT =null;
		 RESULT = new Node("or", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_logica_aritmetica ::= NEGACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node exprNode = (Node) e;
        Node negNode = new Node("not", exprNode.getLine(), exprNode.getColumn());
        negNode.setLeft(exprNode);
        RESULT = negNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_logica_aritmetica ::= expr_logica_aritmetica op_logica expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Node leftExpr = (Node) e1;
        Node rightExpr = (Node) e2;
        Node opNode = (Node) op;
        
        Node logicalOpNode = new Node(opNode.getValue(), leftExpr.getLine(), leftExpr.getColumn());
        logicalOpNode.setLeft(leftExpr);
        logicalOpNode.setRight(rightExpr);
        
        RESULT = logicalOpNode;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_logica_aritmetica ::= comparacion_operacion 
            {
              Object RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cmp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = (Node) cmp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_logica_aritmetica ::= PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = (Node) e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$1 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_expr ::= IF PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$1 bloques CIERRE_DE_BLOQUE NT$2 else_op 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_expr ::= IF error NT$3 APERTURA_DE_BLOQUE NT$4 bloques CIERRE_DE_BLOQUE NT$5 else_op 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // default_op ::= DEFAULT DOS_PUNTOS bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_op",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // default_op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("default_op",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cases ::= CASE literal DOS_PUNTOS bloques cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cases ::= CASE literal DOS_PUNTOS bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$6 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // switch_expr ::= SWITCH PARENTESIS_APERTURA dato_general PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$6 cases default_op CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de una switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switch_expr ::= SWITCH error NT$7 APERTURA_DE_BLOQUE NT$8 cases default_op CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // finfuncion ::= RETURN expr_logica_aritmetica 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
     // Verifica que el tipo de retorno sea compatible con el tipo declarado de la función.
    if(!symbolTable.verifyType(symbolTable.getType(dato.toString()), symbolTable.getActualFunction())) {
        reportSemanticError("Error semántico en el tipo de retorno de función.\n");
    } 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // finfuncion ::= RETURN 
            {
              Object RESULT =null;
		 reportSemanticError("Error semántico, el valor de retorno no coincide con el tipo de la función.\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_simple ::= expr_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_simple ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_expr ::= expr_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_expr ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_expr ::= asignacion_compuesta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // simple_expr ::= leer_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // simple_expr ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // simple_expr ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // simple_expr ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // simple_expr ::= finfuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // simple_expr ::= error 
            {
              Object RESULT =null;
		 RESULT = new Node("error_expr", -1, -1); System.out.println("Error sintáctico en la definición de una expresión simple."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // inicializacion ::= asignacion_variable 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Node) asign; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // inicializacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    Symbol idSymbol = (Symbol) i;

    Node idNode = new Node(idSymbol.value.toString(), idSymbol.left, idSymbol.right);

    if (!symbolTable.isInLocalScope(idSymbol.value.toString())) {
        reportSemanticError("Error semántico, identificador fuera del scope en línea " + idSymbol.left + ".\n");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // inicializacion ::= tipo asignacion_variable 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Node) asign; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$9 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while_expr ::= WHILE PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$9 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // while_expr ::= WHILE error NT$10 APERTURA_DE_BLOQUE NT$11 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$12 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_expr ::= FOR PARENTESIS_APERTURA inicializacion COMMA expr_logica_aritmetica COMMA op_simple PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$12 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // for_expr ::= FOR error NT$13 APERTURA_DE_BLOQUE NT$14 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bloque ::= if_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bloque ::= while_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bloque ::= for_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // bloque ::= switch_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // bloque ::= simple_expr END_EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // bloques ::= bloque bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // bloques ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error dentro de bloque, verificar definición."); RESULT = new Node("error_block", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // bloques ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // nombrefuncion ::= MAIN 
            {
              Object RESULT =null;
		RESULT = new Node("_verano_", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // nombrefuncion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nombreFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombreFunc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(nombreFunc.toString(), -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funciones ::= funcion funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // funciones ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error fatal en la definición de una función, deteniendo parseo."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$15 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); symbolTable.setActualFunction(funcName.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA NT$15 parametros_decl PARENTESIS_CIERRE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if(!symbolTable.addGlobalSymbol(funcName.toString(), t + ":" + funcName + ":" + params)) {
        reportSemanticError("Error semántico durante declaración, ya existe una función con el mismo nombre.\n");
    }
 
    symbolTable.printScope(); 
    symbolTable.exitScope();
    symbolTable.setActualFunction(""); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$16 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); symbolTable.setActualFunction(funcName.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

    if(!symbolTable.addGlobalSymbol(funcName.toString(), t + ":" + funcName + ":error")) {
        reportSemanticError("Error semántico durante declaración, ya existe una función con el mismo nombre.\n");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA NT$16 error PARENTESIS_CIERRE NT$17 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
    System.out.println("Error en la definición de parámetros de una función."); 
    symbolTable.printScope(); 
    symbolTable.exitScope(); 
    symbolTable.setActualFunction("");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // programa ::= funciones 
            {
              Object RESULT =null;
		 symbolTable.printGlobalScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // programa ::= 
            {
              Object RESULT =null;
		 RESULT = new Node("empty_program", -1, -1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
