
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.HashMap;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\025\006\000\002\025" +
    "\004\000\002\026\003\000\002\026\002\000\002\006\005" +
    "\000\002\006\003\000\002\052\003\000\002\052\002\000" +
    "\002\051\006\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\022\003\000\002\022\003\000\002\053\004" +
    "\000\002\007\005\000\002\007\003\000\002\010\006\000" +
    "\002\011\006\000\002\013\003\000\002\013\004\000\002" +
    "\014\007\000\002\015\010\000\002\016\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\006" +
    "\000\002\020\002\000\002\021\004\000\002\021\006\000" +
    "\002\021\010\000\002\054\002\000\002\027\007\000\002" +
    "\030\003\000\002\030\002\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\005\000\002\032\005\000" +
    "\002\032\003\000\002\032\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\004\000\002\034\005\000\002\034" +
    "\003\000\002\034\005\000\002\055\002\000\002\035\013" +
    "\000\002\056\002\000\002\035\011\000\002\036\007\000" +
    "\002\036\005\000\002\057\002\000\002\037\012\000\002" +
    "\060\002\000\002\037\010\000\002\023\004\000\002\023" +
    "\003\000\002\040\003\000\002\040\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\012\003\000\002\012" +
    "\003\000\002\061\002\000\002\042\012\000\002\062\002" +
    "\000\002\042\010\000\002\063\002\000\002\043\016\000" +
    "\002\064\002\000\002\043\010\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\004\000\002\045\004\000\002\045\003\000\002\045\002" +
    "\000\002\024\003\000\002\024\003\000\002\046\003\000" +
    "\002\046\004\000\002\046\003\000\002\065\002\000\002" +
    "\047\013\000\002\066\002\000\002\047\013\000\002\050" +
    "\003\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\020\002\uff89\003\011\004\005\005\014\006" +
    "\006\007\015\010\010\001\002\000\004\002\335\001\002" +
    "\000\006\063\ufff7\065\ufff7\001\002\000\006\063\ufff5\065" +
    "\ufff5\001\002\000\020\002\uff91\003\011\004\005\005\014" +
    "\006\006\007\015\010\010\001\002\000\006\063\ufff3\065" +
    "\ufff3\001\002\000\004\002\uff8f\001\002\000\004\002\uff8a" +
    "\001\002\000\006\063\017\065\020\001\002\000\006\063" +
    "\ufff6\065\ufff6\001\002\000\006\063\ufff4\065\ufff4\001\002" +
    "\000\004\023\021\001\002\000\004\023\uff92\001\002\000" +
    "\004\023\uff93\001\002\000\020\003\023\004\005\005\014" +
    "\006\006\007\015\010\010\024\ufffd\001\002\000\004\024" +
    "\ufffe\001\002\000\004\024\327\001\002\000\004\063\324" +
    "\001\002\000\004\024\026\001\002\000\004\016\uff8e\001" +
    "\002\000\004\016\030\001\002\000\044\003\057\004\005" +
    "\005\014\006\006\007\015\010\010\017\uff94\046\044\050" +
    "\035\051\062\052\043\055\054\056\041\061\056\062\031" +
    "\063\061\065\020\001\002\000\004\023\316\001\002\000" +
    "\004\064\uffd7\001\002\000\004\063\303\001\002\000\004" +
    "\064\uffae\001\002\000\006\003\270\023\267\001\002\000" +
    "\004\064\uffaa\001\002\000\004\023\263\001\002\000\050" +
    "\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\017" +
    "\uff9a\046\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\056\uff9a\061\uff9a\062\uff9a\063\uff9a\065\uff9a\001" +
    "\002\000\022\011\112\012\113\013\111\014\115\015\120" +
    "\063\175\064\uffb1\065\020\001\002\000\050\003\057\004" +
    "\005\005\014\006\006\007\015\010\010\017\uff94\046\044" +
    "\050\035\051\062\052\043\053\uff94\054\uff94\055\054\056" +
    "\041\061\056\062\031\063\061\065\020\001\002\000\006" +
    "\003\236\023\235\001\002\000\006\003\212\023\211\001" +
    "\002\000\004\064\uffd8\001\002\000\004\064\210\001\002" +
    "\000\004\064\uffd6\001\002\000\004\064\uffad\001\002\000" +
    "\004\064\uffa7\001\002\000\004\064\uffac\001\002\000\004" +
    "\064\uffa8\001\002\000\004\064\uffa9\001\002\000\004\064" +
    "\uffab\001\002\000\004\023\205\001\002\000\012\017\uff95" +
    "\053\uff95\054\uff95\064\uffa6\001\002\000\050\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\017\uff98\046\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\061\uff98\062\uff98\063\uff98\065\uff98\001\002\000\030" +
    "\020\170\022\171\023\uff92\025\102\026\110\027\104\030" +
    "\105\031\101\032\107\033\152\034\150\001\002\000\006" +
    "\003\070\023\067\001\002\000\004\017\066\001\002\000" +
    "\050\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\017\uff9b\046\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\061\uff9b\062\uff9b\063\uff9b\065\uff9b" +
    "\001\002\000\050\003\uff99\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\017\uff99\046\uff99\050\uff99\051\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\061\uff99\062\uff99\063" +
    "\uff99\065\uff99\001\002\000\020\002\uff8d\003\uff8d\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\001\002\000\004\063" +
    "\076\001\002\000\004\016\uff9d\001\002\000\004\016\072" +
    "\001\002\000\044\003\057\004\005\005\014\006\006\007" +
    "\015\010\010\017\uff94\046\044\050\035\051\062\052\043" +
    "\055\054\056\041\061\056\062\031\063\061\065\020\001" +
    "\002\000\004\017\074\001\002\000\050\003\uff9c\004\uff9c" +
    "\005\uff9c\006\uff9c\007\uff9c\010\uff9c\017\uff9c\046\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\061\uff9c\062\uff9c\063\uff9c\065\uff9c\001\002\000\004\060" +
    "\154\001\002\000\022\022\106\025\102\026\110\027\104" +
    "\030\105\031\101\032\107\060\uffa4\001\002\000\004\060" +
    "\uffa5\001\002\000\004\022\153\001\002\000\026\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\022\uffe8\023\uffe8\045" +
    "\uffe8\063\uffe8\065\uffe8\001\002\000\026\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\022\uffed\023\uffed\045\uffed\063" +
    "\uffed\065\uffed\001\002\000\024\011\112\012\113\013\111" +
    "\014\115\015\120\023\124\045\125\063\123\065\020\001" +
    "\002\000\026\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\022\uffeb\023\uffeb\045\uffeb\063\uffeb\065\uffeb\001\002\000" +
    "\026\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\022\uffe9" +
    "\023\uffe9\045\uffe9\063\uffe9\065\uffe9\001\002\000\024\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\023\uffdd\045\uffdd" +
    "\063\uffdd\065\uffdd\001\002\000\026\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\022\uffea\023\uffea\045\uffea\063\uffea" +
    "\065\uffea\001\002\000\026\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\022\uffec\023\uffec\045\uffec\063\uffec\065\uffec" +
    "\001\002\000\052\017\uffee\021\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\057" +
    "\uffee\060\uffee\064\uffee\001\002\000\052\017\ufff2\021\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\057\ufff2\060\ufff2\064\ufff2\001\002\000" +
    "\052\017\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\057\ufff1\060\ufff1" +
    "\064\ufff1\001\002\000\044\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\060\uffc3\064" +
    "\uffc3\001\002\000\052\017\ufff0\021\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\057\ufff0\060\ufff0\064\ufff0\001\002\000\050\017\uffe5\021" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\060\uffe5\064\uffe5\001\002\000\050" +
    "\017\uffe6\021\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\060\uffe6\064\uffe6\001" +
    "\002\000\052\017\uffef\021\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\057\uffef" +
    "\060\uffef\064\uffef\001\002\000\044\024\uffd9\025\102\026" +
    "\110\027\104\030\105\031\101\032\107\035\132\036\142" +
    "\037\140\040\134\041\131\042\141\043\137\044\136\060" +
    "\uffd9\064\uffd9\001\002\000\044\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\060\uffc4" +
    "\064\uffc4\001\002\000\052\023\uff92\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\152\034\150" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\060\uffe7\064\uffe7\001\002\000\024\011\112" +
    "\012\113\013\111\014\115\015\120\023\124\045\125\063" +
    "\123\065\020\001\002\000\024\011\112\012\113\013\111" +
    "\014\115\015\120\023\124\045\125\063\123\065\020\001" +
    "\002\000\044\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\060\uffbe\064\uffbe\001\002" +
    "\000\044\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\035\132\036\142\037\140\040\134\041\131" +
    "\042\141\043\uffc0\044\uffc0\060\uffc0\064\uffc0\001\002\000" +
    "\024\011\112\012\113\013\111\014\115\015\120\023\124" +
    "\045\125\063\123\065\020\001\002\000\024\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\023\uffc8\045\uffc8\063\uffc8" +
    "\065\uffc8\001\002\000\024\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\023\uffcc\045\uffcc\063\uffcc\065\uffcc\001\002" +
    "\000\024\011\112\012\113\013\111\014\115\015\120\023" +
    "\124\045\125\063\123\065\020\001\002\000\024\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\023\uffc9\045\uffc9\063" +
    "\uffc9\065\uffc9\001\002\000\024\011\112\012\113\013\111" +
    "\014\115\015\120\023\124\045\125\063\123\065\020\001" +
    "\002\000\024\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\023\uffc1\045\uffc1\063\uffc1\065\uffc1\001\002\000\024\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\023\uffc2\045\uffc2" +
    "\063\uffc2\065\uffc2\001\002\000\024\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\023\uffca\045\uffca\063\uffca\065\uffca" +
    "\001\002\000\024\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\023\uffc7\045\uffc7\063\uffc7\065\uffc7\001\002\000\024" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\023\uffcb\045" +
    "\uffcb\063\uffcb\065\uffcb\001\002\000\044\024\uffc6\025\102" +
    "\026\110\027\104\030\105\031\101\032\107\035\132\036" +
    "\142\037\140\040\134\041\131\042\141\043\137\044\136" +
    "\060\uffc6\064\uffc6\001\002\000\044\024\uffbf\025\102\026" +
    "\110\027\104\030\105\031\101\032\107\035\132\036\142" +
    "\037\140\040\134\041\131\042\141\043\137\044\136\060" +
    "\uffbf\064\uffbf\001\002\000\044\024\uffc5\025\102\026\110" +
    "\027\104\030\105\031\101\032\107\035\132\036\142\037" +
    "\140\040\134\041\131\042\141\043\137\044\136\060\uffc5" +
    "\064\uffc5\001\002\000\040\024\147\025\102\026\110\027" +
    "\104\030\105\031\101\032\107\035\132\036\142\037\140" +
    "\040\134\041\131\042\141\043\137\044\136\001\002\000" +
    "\044\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\060\uffbd\064\uffbd\001\002\000\044" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\060\uffe3\064\uffe3\001\002\000\044\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\060\uffe2\064\uffe2\001\002\000\044\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\060\uffe4\064\uffe4\001\002\000\024\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\023\uffdc\045\uffdc\063\uffdc" +
    "\065\uffdc\001\002\000\024\011\112\012\113\013\111\014" +
    "\115\015\120\023\124\045\125\063\123\065\020\001\002" +
    "\000\040\025\102\026\110\027\104\030\105\031\101\032" +
    "\107\035\132\036\142\037\140\040\134\041\131\042\141" +
    "\043\137\044\136\060\156\001\002\000\004\063\157\001" +
    "\002\000\024\022\106\025\102\026\110\027\104\030\105" +
    "\031\101\032\107\033\152\034\150\001\002\000\004\024" +
    "\uffaf\001\002\000\004\024\163\001\002\000\004\024\uffb0" +
    "\001\002\000\004\016\164\001\002\000\044\003\uff9f\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\017\uff9f\046\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\055\uff9f\056\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\065\uff9f\001\002\000\044\003\057\004\005" +
    "\005\014\006\006\007\015\010\010\017\uff94\046\044\050" +
    "\035\051\062\052\043\055\054\056\041\061\056\062\031" +
    "\063\061\065\020\001\002\000\004\017\167\001\002\000" +
    "\050\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\017\uff9e\046\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\061\uff9e\062\uff9e\063\uff9e\065\uff9e" +
    "\001\002\000\020\011\112\012\113\013\111\014\115\015" +
    "\120\063\175\065\020\001\002\000\026\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\172\023\uffdd\045\uffdd\063" +
    "\uffdd\065\uffdd\001\002\000\020\011\112\012\113\013\111" +
    "\014\115\015\120\063\175\065\020\001\002\000\004\017" +
    "\200\001\002\000\010\017\ufffb\024\ufffb\060\176\001\002" +
    "\000\016\017\uffe7\021\uffe7\023\uff92\024\uffe7\060\uffe7\064" +
    "\uffe7\001\002\000\020\011\112\012\113\013\111\014\115" +
    "\015\120\063\175\065\020\001\002\000\006\017\ufffc\024" +
    "\ufffc\001\002\000\004\064\uffdb\001\002\000\004\021\202" +
    "\001\002\000\020\022\106\025\102\026\110\027\104\030" +
    "\105\031\101\032\107\001\002\000\024\011\112\012\113" +
    "\013\111\014\115\015\120\023\124\045\125\063\123\065" +
    "\020\001\002\000\040\025\102\026\110\027\104\030\105" +
    "\031\101\032\107\035\132\036\142\037\140\040\134\041" +
    "\131\042\141\043\137\044\136\064\uffda\001\002\000\020" +
    "\011\112\012\113\013\111\014\115\015\120\063\175\065" +
    "\020\001\002\000\004\024\207\001\002\000\004\064\uffdf" +
    "\001\002\000\050\003\uff97\004\uff97\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\017\uff97\046\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\055\uff97\056\uff97\061\uff97\062\uff97\063" +
    "\uff97\065\uff97\001\002\000\024\011\112\012\113\013\111" +
    "\014\115\015\120\023\124\045\125\063\123\065\020\001" +
    "\002\000\004\016\uffba\001\002\000\004\016\214\001\002" +
    "\000\044\003\057\004\005\005\014\006\006\007\015\010" +
    "\010\017\uff94\046\044\050\035\051\062\052\043\055\054" +
    "\056\041\061\056\062\031\063\061\065\020\001\002\000" +
    "\004\017\216\001\002\000\052\003\uffcd\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\017\uffcd\046\uffcd\047\220\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\065\uffcd\001\002\000\050\003" +
    "\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\017\uffce" +
    "\046\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\061\uffce\062\uffce\063\uffce\065\uffce\001\002" +
    "\000\004\016\222\001\002\000\050\003\uffb9\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\017\uffb9\046\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\065\uffb9\001\002\000\044\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\017\uffd0\046" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\055\uffd0\056\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\065\uffd0\001\002\000\044\003\057\004" +
    "\005\005\014\006\006\007\015\010\010\017\uff94\046\044" +
    "\050\035\051\062\052\043\055\054\056\041\061\056\062" +
    "\031\063\061\065\020\001\002\000\004\017\225\001\002" +
    "\000\050\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\017\uffcf\046\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\061\uffcf\062\uffcf\063\uffcf\065" +
    "\uffcf\001\002\000\040\024\227\025\102\026\110\027\104" +
    "\030\105\031\101\032\107\035\132\036\142\037\140\040" +
    "\134\041\131\042\141\043\137\044\136\001\002\000\004" +
    "\016\230\001\002\000\044\003\uffbc\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\017\uffbc\046\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\055\uffbc\056\uffbc\061\uffbc\062\uffbc\063\uffbc\065" +
    "\uffbc\001\002\000\044\003\057\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff94\046\044\050\035\051\062\052" +
    "\043\055\054\056\041\061\056\062\031\063\061\065\020" +
    "\001\002\000\004\017\233\001\002\000\052\003\uffcd\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\017\uffcd\046\uffcd" +
    "\047\220\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\061\uffcd\062\uffcd\063\uffcd\065\uffcd\001\002" +
    "\000\050\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\017\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\061\uffbb\062\uffbb\063\uffbb\065" +
    "\uffbb\001\002\000\020\011\112\012\113\013\111\014\115" +
    "\015\120\063\175\065\020\001\002\000\004\016\uffb4\001" +
    "\002\000\004\016\240\001\002\000\006\053\243\054\241" +
    "\001\002\000\004\057\251\001\002\000\004\017\250\001" +
    "\002\000\014\011\112\012\113\013\111\014\115\015\120" +
    "\001\002\000\004\057\245\001\002\000\046\003\057\004" +
    "\005\005\014\006\006\007\015\010\010\046\044\050\035" +
    "\051\062\052\043\053\uff94\054\uff94\055\054\056\041\061" +
    "\056\062\031\063\061\065\020\001\002\000\006\053\243" +
    "\054\241\001\002\000\004\017\uffb8\001\002\000\050\003" +
    "\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\017\uffb3" +
    "\046\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3\001\002" +
    "\000\044\003\057\004\005\005\014\006\006\007\015\010" +
    "\010\017\uff94\046\044\050\035\051\062\052\043\055\054" +
    "\056\041\061\056\062\031\063\061\065\020\001\002\000" +
    "\004\017\uffb7\001\002\000\004\024\254\001\002\000\004" +
    "\016\255\001\002\000\006\053\uffb6\054\uffb6\001\002\000" +
    "\006\053\243\054\241\001\002\000\004\017\260\001\002" +
    "\000\050\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\017\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\061\uffb5\062\uffb5\063\uffb5\065" +
    "\uffb5\001\002\000\010\017\uff96\053\uff96\054\uff96\001\002" +
    "\000\004\064\uffb2\001\002\000\022\011\112\012\113\013" +
    "\111\014\115\015\120\024\ufff9\063\175\065\020\001\002" +
    "\000\004\024\266\001\002\000\004\024\ufffa\001\002\000" +
    "\050\017\ufff8\021\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\060\ufff8\064\ufff8" +
    "\001\002\000\024\011\112\012\113\013\111\014\115\015" +
    "\120\023\124\045\125\063\123\065\020\001\002\000\004" +
    "\016\uffa1\001\002\000\004\016\272\001\002\000\044\003" +
    "\057\004\005\005\014\006\006\007\015\010\010\017\uff94" +
    "\046\044\050\035\051\062\052\043\055\054\056\041\061" +
    "\056\062\031\063\061\065\020\001\002\000\004\017\274" +
    "\001\002\000\050\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\017\uffa0\046\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\065\uffa0\001\002\000\040\024\276\025\102\026\110" +
    "\027\104\030\105\031\101\032\107\035\132\036\142\037" +
    "\140\040\134\041\131\042\141\043\137\044\136\001\002" +
    "\000\004\016\277\001\002\000\044\003\uffa3\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\017\uffa3\046\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\055\uffa3\056\uffa3\061\uffa3\062\uffa3\063" +
    "\uffa3\065\uffa3\001\002\000\044\003\057\004\005\005\014" +
    "\006\006\007\015\010\010\017\uff94\046\044\050\035\051" +
    "\062\052\043\055\054\056\041\061\056\062\031\063\061" +
    "\065\020\001\002\000\004\017\302\001\002\000\050\003" +
    "\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\017\uffa2" +
    "\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\061\uffa2\062\uffa2\063\uffa2\065\uffa2\001\002" +
    "\000\010\020\305\022\304\064\uffd3\001\002\000\024\011" +
    "\112\012\113\013\111\014\115\015\120\023\124\045\125" +
    "\063\123\065\020\001\002\000\020\011\112\012\113\013" +
    "\111\014\115\015\120\063\175\065\020\001\002\000\004" +
    "\021\307\001\002\000\006\022\310\064\uffd4\001\002\000" +
    "\004\016\312\001\002\000\004\064\uffd1\001\002\000\020" +
    "\011\112\012\113\013\111\014\115\015\120\063\175\065" +
    "\020\001\002\000\004\017\314\001\002\000\004\064\uffd5" +
    "\001\002\000\040\025\102\026\110\027\104\030\105\031" +
    "\101\032\107\035\132\036\142\037\140\040\134\041\131" +
    "\042\141\043\137\044\136\064\uffd2\001\002\000\004\063" +
    "\317\001\002\000\006\024\uffe0\060\322\001\002\000\004" +
    "\024\321\001\002\000\004\064\uffde\001\002\000\004\063" +
    "\317\001\002\000\004\024\uffe1\001\002\000\006\024\uffff" +
    "\060\325\001\002\000\014\004\005\005\014\006\006\007" +
    "\015\010\010\001\002\000\004\024\000\001\002\000\004" +
    "\016\uff8c\001\002\000\004\016\331\001\002\000\044\003" +
    "\057\004\005\005\014\006\006\007\015\010\010\017\uff94" +
    "\046\044\050\035\051\062\052\043\055\054\056\041\061" +
    "\056\062\031\063\061\065\020\001\002\000\004\017\333" +
    "\001\002\000\020\002\uff8b\003\uff8b\004\uff8b\005\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\001\002\000\004\002\uff90\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\012\002\012\046\011\047\006\050\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\012\046\333\047\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\023" +
    "\025\021\026\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\026" +
    "\001\001\000\002\001\001\000\050\002\032\010\035\011" +
    "\054\014\031\015\046\016\044\017\051\021\047\023\050" +
    "\024\036\035\063\037\057\041\045\042\037\043\064\044" +
    "\041\045\062\051\052\053\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\116\005\261\024\036\051\115\001" +
    "\001\000\050\002\032\010\035\011\054\014\031\015\046" +
    "\016\044\017\051\021\047\023\050\024\036\035\063\037" +
    "\057\041\045\042\037\043\064\044\041\045\260\051\052" +
    "\053\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\077\013" +
    "\102\022\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\074\016\076\001\001\000\004\064\070\001\001" +
    "\000\002\001\001\000\050\002\032\010\035\011\054\014" +
    "\031\015\046\016\044\017\051\021\047\023\050\024\036" +
    "\035\063\037\057\041\045\042\037\043\064\044\041\045" +
    "\072\051\052\053\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\077\013\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\116\005\121\024\036\032" +
    "\125\034\120\051\115\053\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\127" +
    "\031\134\033\132\001\001\000\002\001\001\000\004\022" +
    "\150\001\001\000\020\003\116\005\121\024\036\032\125" +
    "\034\145\051\115\053\113\001\001\000\020\003\116\005" +
    "\121\024\036\032\125\034\126\051\115\053\113\001\001" +
    "\000\002\001\001\000\010\004\127\031\134\033\132\001" +
    "\001\000\020\003\116\005\121\024\036\032\125\034\144" +
    "\051\115\053\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\116\005\121\024\036\032\125\034\143" +
    "\051\115\053\113\001\001\000\002\001\001\000\020\003" +
    "\116\005\121\024\036\032\125\034\142\051\115\053\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\127" +
    "\031\134\033\132\001\001\000\010\004\127\031\134\033" +
    "\132\001\001\000\010\004\127\031\134\033\132\001\001" +
    "\000\010\004\127\031\134\033\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\116\005\121\024\036\032" +
    "\125\034\154\051\115\053\113\001\001\000\010\004\127" +
    "\031\134\033\132\001\001\000\010\016\157\040\160\053" +
    "\161\001\001\000\010\004\077\013\102\022\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\164\001\001\000\050\002\032" +
    "\010\035\011\054\014\031\015\046\016\044\017\051\021" +
    "\047\023\050\024\036\035\063\037\057\041\045\042\037" +
    "\043\064\044\041\045\165\051\052\053\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\116\005\200" +
    "\024\036\051\115\001\001\000\002\001\001\000\014\003" +
    "\116\005\173\006\172\024\036\051\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\116\005\173\006\176\024\036\051\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\077\013\202\001\001\000\020\003\116\005\121\024\036" +
    "\032\125\034\203\051\115\053\113\001\001\000\010\004" +
    "\127\031\134\033\132\001\001\000\014\003\116\005\173" +
    "\006\205\024\036\051\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\116\005\121" +
    "\024\036\032\125\034\225\051\115\053\113\001\001\000" +
    "\004\056\212\001\001\000\002\001\001\000\050\002\032" +
    "\010\035\011\054\014\031\015\046\016\044\017\051\021" +
    "\047\023\050\024\036\035\063\037\057\041\045\042\037" +
    "\043\064\044\041\045\214\051\052\053\033\001\001\000" +
    "\002\001\001\000\006\027\216\030\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\222\001\001\000\050\002\032\010\035\011\054\014\031" +
    "\015\046\016\044\017\051\021\047\023\050\024\036\035" +
    "\063\037\057\041\045\042\037\043\064\044\041\045\223" +
    "\051\052\053\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\127\031\134\033\132\001\001\000\002" +
    "\001\001\000\004\055\230\001\001\000\050\002\032\010" +
    "\035\011\054\014\031\015\046\016\044\017\051\021\047" +
    "\023\050\024\036\035\063\037\057\041\045\042\037\043" +
    "\064\044\041\045\231\051\052\053\033\001\001\000\002" +
    "\001\001\000\006\027\216\030\233\001\001\000\002\001" +
    "\001\000\012\003\116\005\252\024\036\051\115\001\001" +
    "\000\004\060\236\001\001\000\002\001\001\000\004\036" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\243\001\001\000\002\001\001\000\050\002\032\010" +
    "\035\011\054\014\031\015\046\016\044\017\051\021\047" +
    "\023\050\024\036\035\063\037\057\041\045\042\037\043" +
    "\064\044\041\045\245\051\052\053\033\001\001\000\004" +
    "\036\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\002\032\010\035\011\054\014\031\015\046\016\044" +
    "\017\051\021\047\023\050\024\036\035\063\037\057\041" +
    "\045\042\037\043\064\044\041\045\251\051\052\053\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\255\001\001\000\004\036\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\116\005\173\006\264\024\036" +
    "\051\115\052\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\116\005\121\024\036" +
    "\032\125\034\274\051\115\053\113\001\001\000\004\062" +
    "\270\001\001\000\002\001\001\000\050\002\032\010\035" +
    "\011\054\014\031\015\046\016\044\017\051\021\047\023" +
    "\050\024\036\035\063\037\057\041\045\042\037\043\064" +
    "\044\041\045\272\051\052\053\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\127\031\134\033\132" +
    "\001\001\000\002\001\001\000\004\061\277\001\001\000" +
    "\050\002\032\010\035\011\054\014\031\015\046\016\044" +
    "\017\051\021\047\023\050\024\036\035\063\037\057\041" +
    "\045\042\037\043\064\044\041\045\300\051\052\053\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\116\005\121\024\036\032\125\034\314" +
    "\051\115\053\113\001\001\000\012\003\116\005\305\024" +
    "\036\051\115\001\001\000\002\001\001\000\004\020\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\116\005\173\006\312\024\036\051\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\127\031\134\033" +
    "\132\001\001\000\004\007\317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\023" +
    "\025\325\001\001\000\002\001\001\000\004\066\327\001" +
    "\001\000\002\001\001\000\050\002\032\010\035\011\054" +
    "\014\031\015\046\016\044\017\051\021\047\023\050\024" +
    "\036\035\063\037\057\041\045\042\037\043\064\044\041" +
    "\045\331\051\052\053\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
    private Lexer scanner;
    private SymbolTable symbolTable;
    private String currentHash;
    private BufferedWriter outputFile;



    public Parser(Lexer scanner) {
        this.scanner = scanner;
        this.symbolTable = new SymbolTable();
        this.currentHash = "";
    }




    public void createWriter(String root) throws IOException {
        outputFile = new BufferedWriter(new FileWriter(root));
    }


    public void reportSyntaxError(int line, int column) throws IOException {
        if(outputFile != null) {
            outputFile.write("Error sintáctico recuperado en línea " + line + ", columna " + column + ".\n");
            outputFile.flush();
        }
    }

    public void closeWriter() throws IOException {
        if(outputFile != null) {
            outputFile.close();
        }
    }


    @Override
    public void syntax_error(Symbol current) {
        try {
          reportSyntaxError(current.left, current.right);
          //System.out.println("Error sintáctico, línea: " + current.left + ", columna: " + current.right);
        } catch (IOException e) {
          e.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // parametro_decl ::= tipo IDENTIFICADOR COMMA parametro_decl 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 symbolTable.addSymbol(idVar.toString(), t + ":" + idVar); RESULT = t + ":" + idVar + ":" + param; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // parametro_decl ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 symbolTable.addSymbol(idVar.toString(), t + ":" + idVar); RESULT = t + ":" + idVar; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parametros_decl ::= parametro_decl 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametros_decl ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sec_oper ::= dato_general COMMA sec_oper 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dato + ":" + seq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sec_oper ::= dato_general 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dato; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros_llamada ::= sec_oper 
            {
              Object RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = seq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros_llamada ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // llamada_funcion ::= nombrefuncion PARENTESIS_APERTURA parametros_llamada PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("Llamada a función: " + f.toString() + ", argumentos: " + params.toString());
    RESULT = f + ":" + params.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		int intVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = intVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = strVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int floatVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floatVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object floatVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = floatVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int charVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object charVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = charVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object boolVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = boolVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_aritmeticas ::= SUMA 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_aritmeticas ::= RESTA 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_aritmeticas ::= MULTIPLICACION 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_aritmeticas ::= DIVISION 
            {
              Object RESULT =null;
		  RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_aritmeticas ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_aritmeticas ::= POTENCIA 
            {
              Object RESULT =null;
		  RESULT = "^"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dato_general ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dato_general ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dato_general ::= llamada_funcion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_unaria ::= INCREMENTO 
            {
              Object RESULT =null;
		  RESULT = "++"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_unaria ::= DECREMENTO 
            {
              Object RESULT =null;
		  RESULT = "--"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_unaria ::= IDENTIFICADOR op_unaria 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = idVar.toString() + op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unaria",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sec_var ::= IDENTIFICADOR COMMA sec_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // imprimir ::= PRINT PARENTESIS_APERTURA sec_oper PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // leer_var ::= READ PARENTESIS_APERTURA sec_var PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("leer_var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // actualizacion ::= ASIGNACION 
            {
              Object RESULT =null;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // actualizacion ::= op_aritmeticas ASIGNACION 
            {
              Object RESULT =null;
		int arit_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arit_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arit_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = arit_op + "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion_arreglo ::= IDENTIFICADOR ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    System.out.println("Asignación arreglo: " + idVar + ", valores: " + seq);
    RESULT = idVar + ":" + seq;


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion_indice ::= IDENTIFICADOR CORCHETE_APERTURA dato_general CORCHETE_CIERRE actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Asignación por índice: " + idVar + "[" + dato + "] " + act + " " + e.toString());
    RESULT = idVar + ":" + dato + ":" + act + ":" + e.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_indice",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion_variable ::= IDENTIFICADOR actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  System.out.println("Asignación de variable: " + idVar + " " + act + " " + e);
    RESULT = idVar + ":" + act + ":" + e.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion_compuesta ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_compuesta ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion_compuesta ::= asignacion_indice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_arreglo_op ::= ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = seq.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_arreglo_op ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Declaración de variable: " + t + " " + idVar); RESULT = t + ":" + idVar; symbolTable.addSymbol(idVar.toString(), t + ":" + idVar); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= tipo IDENTIFICADOR ASIGNACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Declaración de variable con asignación: " + t + " " + idVar + " = " + e); RESULT = t + ":" + idVar + ":" + e; symbolTable.addSymbol(idVar.toString(), t + ":" + idVar); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= tipo IDENTIFICADOR CORCHETE_APERTURA dato_general CORCHETE_CIERRE declaracion_arreglo_op 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arr_declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arr_declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arr_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String text = t + ":" + idVar + ":" + dato + ":" + arr_decl; System.out.println("Declaración arreglo: " + t + " " + idVar + "[" + dato + "] = " + arr_decl);  RESULT = text; symbolTable.addSymbol(idVar.toString(), t + ":" + idVar);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$0 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // else_expr ::= ELSE APERTURA_DE_BLOQUE NT$0 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_op ::= else_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_op ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relacion ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relacion ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relacion ::= IGUALDAD 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacion ::= DIFERENTE 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparacion_operacion ::= expr_logica_aritmetica relacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString() + ":" + rel + ":" + e2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparacion_operacion ::= expr_logica_aritmetica op_aritmeticas expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + ":" + op + ":" + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparacion_operacion ::= dato_general 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dato; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparacion_operacion ::= expr_unaria 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // op_logica ::= CONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "and"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_logica ::= DISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "or"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_logica_aritmetica ::= NEGACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "not " + e.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_logica_aritmetica ::= expr_logica_aritmetica op_logica expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1.toString() + ":" + op + ":" + e2.toString();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_logica_aritmetica ::= comparacion_operacion 
            {
              Object RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cmp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cmp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_logica_aritmetica ::= PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + e.toString() + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$1 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_expr ::= IF PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$1 bloques CIERRE_DE_BLOQUE else_op 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$2 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_expr ::= IF error NT$2 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE else_op 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cases ::= CASE literal DOS_PUNTOS bloques cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cases ::= DEFAULT DOS_PUNTOS bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$3 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // switch_expr ::= SWITCH PARENTESIS_APERTURA dato_general PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$3 cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$4 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de una switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // switch_expr ::= SWITCH error NT$4 APERTURA_DE_BLOQUE cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // finfuncion ::= RETURN dato_general 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("Retorno del valor: " + dato.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // finfuncion ::= RETURN 
            {
              Object RESULT =null;
		 System.out.println("Sin valor de retorno"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op_simple ::= expr_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op_simple ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_expr ::= expr_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_expr ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_expr ::= asignacion_compuesta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_expr ::= leer_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_expr ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // simple_expr ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_expr ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_expr ::= finfuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_expr ::= error 
            {
              Object RESULT =null;
		 RESULT = "Error"; System.out.println("Error sintáctico en la definición de una expresión simple."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // inicializacion ::= asignacion_variable 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = asign; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // inicializacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$5 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // while_expr ::= WHILE PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$5 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$6 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // while_expr ::= WHILE error NT$6 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$7 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_expr ::= FOR PARENTESIS_APERTURA inicializacion COMMA expr_logica_aritmetica COMMA op_simple PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$7 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$8 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_expr ::= FOR error NT$8 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // bloque ::= if_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bloque ::= while_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bloque ::= for_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bloque ::= switch_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bloque ::= simple_expr END_EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bloques ::= bloque bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bloques ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error dentro de bloque, verificar definición."); RESULT = "Error"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bloques ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // nombrefuncion ::= MAIN 
            {
              Object RESULT =null;
		 
                    RESULT = "_verano_"; 
                    System.out.println("Scope cambiado a: _verano_");
                    symbolTable.addScope();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // nombrefuncion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nombreFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombreFunc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = nombreFunc;
                    System.out.println("Scope cambiado a: " + nombreFunc);
                    symbolTable.addScope();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funciones ::= funcion funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funciones ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error fatal en la definición de una función, deteniendo parseo."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$9 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 System.out.println("Declaración de función: " + funcName + ", parámetros: " + "(" + params + "), " + "tipo: " + t.toString()); symbolTable.addSymbol(funcName, t + ":" + funcName + ":" + params); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA parametros_decl PARENTESIS_CIERRE NT$9 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.println("Error en la definición de parámetros de una función."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA error PARENTESIS_CIERRE NT$10 APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // programa ::= funciones 
            {
              Object RESULT =null;
		 System.out.println("Información de la tabla de símbolos no disponible aún"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // programa ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
