
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\025\006\000\002\025" +
    "\004\000\002\026\003\000\002\026\002\000\002\006\005" +
    "\000\002\006\003\000\002\052\003\000\002\052\002\000" +
    "\002\051\006\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\022\003\000\002\022\003" +
    "\000\002\053\004\000\002\007\005\000\002\007\003\000" +
    "\002\010\006\000\002\011\006\000\002\054\006\000\002" +
    "\013\003\000\002\013\004\000\002\014\007\000\002\015" +
    "\005\000\002\016\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\006\000\002\020\002\000" +
    "\002\021\004\000\002\021\006\000\002\021\005\000\002" +
    "\055\002\000\002\027\007\000\002\030\003\000\002\030" +
    "\002\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\004\000\002\034\005\000\002\034\003\000\002\034\005" +
    "\000\002\056\002\000\002\057\002\000\002\035\014\000" +
    "\002\060\002\000\002\061\002\000\002\062\002\000\002" +
    "\035\013\000\002\036\007\000\002\036\005\000\002\063" +
    "\002\000\002\037\012\000\002\064\002\000\002\065\002" +
    "\000\002\037\011\000\002\023\004\000\002\023\003\000" +
    "\002\040\003\000\002\040\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\012\003\000\002\012\003\000" +
    "\002\066\002\000\002\042\012\000\002\067\002\000\002" +
    "\070\002\000\002\042\011\000\002\071\002\000\002\043" +
    "\016\000\002\072\002\000\002\073\002\000\002\043\011" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\004\000\002\045\004\000\002" +
    "\045\003\000\002\045\002\000\002\024\003\000\002\024" +
    "\003\000\002\046\003\000\002\046\004\000\002\046\003" +
    "\000\002\074\002\000\002\047\013\000\002\075\002\000" +
    "\002\047\013\000\002\050\003\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\020\002\uff81\003\011\004\005\005\014\006" +
    "\006\007\015\010\010\001\002\000\004\002\343\001\002" +
    "\000\006\063\ufff7\065\ufff7\001\002\000\006\063\ufff5\065" +
    "\ufff5\001\002\000\020\002\uff89\003\011\004\005\005\014" +
    "\006\006\007\015\010\010\001\002\000\006\063\ufff3\065" +
    "\ufff3\001\002\000\004\002\uff87\001\002\000\004\002\uff82" +
    "\001\002\000\006\063\017\065\020\001\002\000\006\063" +
    "\ufff6\065\ufff6\001\002\000\006\063\ufff4\065\ufff4\001\002" +
    "\000\004\023\021\001\002\000\004\023\uff8a\001\002\000" +
    "\004\023\uff8b\001\002\000\020\003\uff84\004\uff86\005\uff86" +
    "\006\uff86\007\uff86\010\uff86\024\uff86\001\002\000\004\003" +
    "\335\001\002\000\016\004\005\005\014\006\006\007\015" +
    "\010\010\024\ufffd\001\002\000\004\063\332\001\002\000" +
    "\004\024\ufffe\001\002\000\004\024\027\001\002\000\004" +
    "\016\030\001\002\000\044\003\052\004\005\005\014\006" +
    "\006\007\015\010\010\017\uff8c\046\043\050\061\051\036" +
    "\052\055\055\053\056\050\061\065\062\060\063\041\065" +
    "\020\001\002\000\004\064\uffa2\001\002\000\004\064\uffa5" +
    "\001\002\000\004\064\uffa4\001\002\000\004\064\uffa1\001" +
    "\002\000\020\022\313\025\121\026\136\027\115\030\125" +
    "\031\123\032\120\001\002\000\006\003\302\023\301\001" +
    "\002\000\004\017\300\001\002\000\050\003\052\004\005" +
    "\005\014\006\006\007\015\010\010\017\uff8c\046\043\050" +
    "\061\051\036\052\055\053\uff8c\054\uff8c\055\053\056\050" +
    "\061\065\062\060\063\041\065\020\001\002\000\030\020" +
    "\104\022\271\023\uff8a\025\121\026\136\027\115\030\125" +
    "\031\123\032\120\033\144\034\142\001\002\000\004\064" +
    "\uffa6\001\002\000\006\003\241\023\240\001\002\000\050" +
    "\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\017" +
    "\uff92\046\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\055\uff92\056\uff92\061\uff92\062\uff92\063\uff92\065\uff92\001" +
    "\002\000\004\064\237\001\002\000\050\003\uff90\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\017\uff90\046\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\061\uff90\062\uff90\063\uff90\065\uff90\001\002\000\004\064" +
    "\uffd4\001\002\000\026\011\072\012\074\013\070\014\076" +
    "\015\101\023\112\045\110\063\111\064\uffab\065\020\001" +
    "\002\000\004\064\uffa8\001\002\000\012\017\uff8d\053\uff8d" +
    "\054\uff8d\064\uffa0\001\002\000\004\064\uffa3\001\002\000" +
    "\004\064\uffd6\001\002\000\006\003\212\023\211\001\002" +
    "\000\050\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010" +
    "\uff93\017\uff93\046\uff93\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\056\uff93\061\uff93\062\uff93\063\uff93\065" +
    "\uff93\001\002\000\004\063\200\001\002\000\004\023\172" +
    "\001\002\000\006\003\156\023\155\001\002\000\004\064" +
    "\uffd5\001\002\000\050\003\uff91\004\uff91\005\uff91\006\uff91" +
    "\007\uff91\010\uff91\017\uff91\046\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\061\uff91\062\uff91" +
    "\063\uff91\065\uff91\001\002\000\004\064\uffa7\001\002\000" +
    "\004\023\152\001\002\000\004\023\067\001\002\000\022" +
    "\011\072\012\074\013\070\014\076\015\101\024\ufff9\063" +
    "\103\065\020\001\002\000\052\017\uffee\021\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\057\uffee\060\uffee\064\uffee\001\002\000\004\024" +
    "\151\001\002\000\052\017\ufff2\021\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\057\ufff2\060\ufff2\064\ufff2\001\002\000\050\017\uffe4\021" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\060\uffe4\064\uffe4\001\002\000\052" +
    "\017\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\057\ufff1\060\ufff1\064" +
    "\ufff1\001\002\000\004\024\ufffa\001\002\000\052\017\ufff0" +
    "\021\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\057\ufff0\060\ufff0\064\ufff0\001" +
    "\002\000\050\017\uffe5\021\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\060\uffe5" +
    "\064\uffe5\001\002\000\050\017\uffe6\021\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\060\uffe6\064\uffe6\001\002\000\052\017\uffef\021\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\044\uffef\057\uffef\060\uffef\064\uffef\001\002\000" +
    "\010\017\ufffb\024\ufffb\060\147\001\002\000\014\017\uffe7" +
    "\020\104\023\uff8a\024\uffe7\060\uffe7\001\002\000\024\011" +
    "\072\012\074\013\070\014\076\015\101\023\112\045\110" +
    "\063\111\065\020\001\002\000\046\021\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\060\uffc1\064\uffc1\001\002\000\040\021\146\025\121" +
    "\026\136\027\115\030\125\031\123\032\120\035\116\036" +
    "\122\037\127\040\124\041\126\042\130\043\131\044\133" +
    "\001\002\000\046\021\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\060\uffc2\064" +
    "\uffc2\001\002\000\024\011\072\012\074\013\070\014\076" +
    "\015\101\023\112\045\110\063\111\065\020\001\002\000" +
    "\056\020\104\021\uffe7\023\uff8a\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\144\034\142\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\060\uffe7\064\uffe7\001\002\000\024\011\072\012" +
    "\074\013\070\014\076\015\101\023\112\045\110\063\111" +
    "\065\020\001\002\000\046\021\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\060" +
    "\uffbc\064\uffbc\001\002\000\040\024\117\025\121\026\136" +
    "\027\115\030\125\031\123\032\120\035\116\036\122\037" +
    "\127\040\124\041\126\042\130\043\131\044\133\001\002" +
    "\000\026\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\022" +
    "\uffeb\023\uffeb\045\uffeb\063\uffeb\065\uffeb\001\002\000\024" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\023\uffca\045" +
    "\uffca\063\uffca\065\uffca\001\002\000\046\021\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\060\uffbb\064\uffbb\001\002\000\026\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\022\uffea\023\uffea\045\uffea" +
    "\063\uffea\065\uffea\001\002\000\026\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\022\uffed\023\uffed\045\uffed\063\uffed" +
    "\065\uffed\001\002\000\024\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\023\uffc9\045\uffc9\063\uffc9\065\uffc9\001\002" +
    "\000\026\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\022" +
    "\uffe8\023\uffe8\045\uffe8\063\uffe8\065\uffe8\001\002\000\024" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\023\uffc7\045" +
    "\uffc7\063\uffc7\065\uffc7\001\002\000\026\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\022\uffe9\023\uffe9\045\uffe9\063" +
    "\uffe9\065\uffe9\001\002\000\024\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\023\uffc6\045\uffc6\063\uffc6\065\uffc6\001" +
    "\002\000\024\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\023\uffc8\045\uffc8\063\uffc8\065\uffc8\001\002\000\024\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\023\uffc5\045\uffc5" +
    "\063\uffc5\065\uffc5\001\002\000\024\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\023\uffc0\045\uffc0\063\uffc0\065\uffc0" +
    "\001\002\000\024\011\072\012\074\013\070\014\076\015" +
    "\101\023\112\045\110\063\111\065\020\001\002\000\024" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\023\uffbf\045" +
    "\uffbf\063\uffbf\065\uffbf\001\002\000\024\011\072\012\074" +
    "\013\070\014\076\015\101\023\112\045\110\063\111\065" +
    "\020\001\002\000\024\011\072\012\074\013\070\014\076" +
    "\015\101\023\112\045\110\063\111\065\020\001\002\000" +
    "\026\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\022\uffec" +
    "\023\uffec\045\uffec\063\uffec\065\uffec\001\002\000\046\021" +
    "\uffbd\024\uffbd\025\121\026\136\027\115\030\125\031\123" +
    "\032\120\035\116\036\122\037\127\040\124\041\126\042" +
    "\130\043\131\044\133\060\uffbd\064\uffbd\001\002\000\046" +
    "\021\uffc4\024\uffc4\025\121\026\136\027\115\030\125\031" +
    "\123\032\120\035\116\036\122\037\127\040\124\041\126" +
    "\042\130\043\131\044\133\060\uffc4\064\uffc4\001\002\000" +
    "\046\021\uffc3\024\uffc3\025\121\026\136\027\115\030\125" +
    "\031\123\032\120\035\116\036\122\037\127\040\124\041" +
    "\126\042\130\043\131\044\133\060\uffc3\064\uffc3\001\002" +
    "\000\046\021\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\060\uffe2\064\uffe2\001" +
    "\002\000\046\021\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\060\uffe1\064\uffe1" +
    "\001\002\000\046\021\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\060\uffe3\064" +
    "\uffe3\001\002\000\046\021\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\035\116\036\122\037" +
    "\127\040\124\041\126\042\130\043\uffbe\044\uffbe\060\uffbe" +
    "\064\uffbe\001\002\000\052\017\uffdc\021\uffdc\022\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\060\uffdc\064\uffdc\001\002\000\020\011\072" +
    "\012\074\013\070\014\076\015\101\063\103\065\020\001" +
    "\002\000\006\017\ufffc\024\ufffc\001\002\000\050\017\ufff8" +
    "\021\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\060\ufff8\064\ufff8\001\002\000" +
    "\020\011\072\012\074\013\070\014\076\015\101\063\103" +
    "\065\020\001\002\000\004\024\154\001\002\000\004\064" +
    "\uffde\001\002\000\024\011\072\012\074\013\070\014\076" +
    "\015\101\023\112\045\110\063\111\065\020\001\002\000" +
    "\004\016\uff9b\001\002\000\004\016\160\001\002\000\044" +
    "\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\017" +
    "\uff9a\046\uff9a\050\uff9a\051\uff9a\052\uff9a\055\uff9a\056\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\065\uff9a\001\002\000\044\003" +
    "\052\004\005\005\014\006\006\007\015\010\010\017\uff8c" +
    "\046\043\050\061\051\036\052\055\055\053\056\050\061" +
    "\065\062\060\063\041\065\020\001\002\000\004\017\163" +
    "\001\002\000\050\003\uff99\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\017\uff99\046\uff99\050\uff99\051\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\061\uff99\062\uff99\063" +
    "\uff99\065\uff99\001\002\000\040\024\165\025\121\026\136" +
    "\027\115\030\125\031\123\032\120\035\116\036\122\037" +
    "\127\040\124\041\126\042\130\043\131\044\133\001\002" +
    "\000\004\016\166\001\002\000\044\003\uff9d\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\017\uff9d\046\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\055\uff9d\056\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\065\uff9d\001\002\000\044\003\052\004\005\005\014" +
    "\006\006\007\015\010\010\017\uff8c\046\043\050\061\051" +
    "\036\052\055\055\053\056\050\061\065\062\060\063\041" +
    "\065\020\001\002\000\004\017\171\001\002\000\050\003" +
    "\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\017\uff9c" +
    "\046\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c\065\uff9c\001\002" +
    "\000\004\063\173\001\002\000\006\024\uffdf\060\176\001" +
    "\002\000\004\024\175\001\002\000\004\064\uffdd\001\002" +
    "\000\004\063\173\001\002\000\004\024\uffe0\001\002\000" +
    "\010\020\104\022\207\064\uffd1\001\002\000\006\022\202" +
    "\064\uffd2\001\002\000\004\016\204\001\002\000\004\064" +
    "\uffcf\001\002\000\020\011\072\012\074\013\070\014\076" +
    "\015\101\063\103\065\020\001\002\000\004\017\206\001" +
    "\002\000\004\064\uffd3\001\002\000\024\011\072\012\074" +
    "\013\070\014\076\015\101\023\112\045\110\063\111\065" +
    "\020\001\002\000\040\025\121\026\136\027\115\030\125" +
    "\031\123\032\120\035\116\036\122\037\127\040\124\041" +
    "\126\042\130\043\131\044\133\064\uffd0\001\002\000\020" +
    "\011\072\012\074\013\070\014\076\015\101\063\103\065" +
    "\020\001\002\000\004\016\uffaf\001\002\000\004\016\214" +
    "\001\002\000\006\053\uffae\054\uffae\001\002\000\006\053" +
    "\220\054\216\001\002\000\004\057\226\001\002\000\004" +
    "\017\225\001\002\000\014\011\072\012\074\013\070\014" +
    "\076\015\101\001\002\000\004\057\222\001\002\000\046" +
    "\003\052\004\005\005\014\006\006\007\015\010\010\046" +
    "\043\050\061\051\036\052\055\053\uff8c\054\uff8c\055\053" +
    "\056\050\061\065\062\060\063\041\065\020\001\002\000" +
    "\006\053\220\054\216\001\002\000\004\017\uffb3\001\002" +
    "\000\050\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\017\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\061\uffad\062\uffad\063\uffad\065" +
    "\uffad\001\002\000\044\003\052\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff8c\046\043\050\061\051\036\052" +
    "\055\055\053\056\050\061\065\062\060\063\041\065\020" +
    "\001\002\000\004\017\uffb2\001\002\000\004\024\231\001" +
    "\002\000\004\016\232\001\002\000\006\053\uffb1\054\uffb1" +
    "\001\002\000\006\053\220\054\216\001\002\000\004\017" +
    "\235\001\002\000\050\003\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\017\uffb0\046\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\065\uffb0\001\002\000\040\025\121\026\136\027" +
    "\115\030\125\031\123\032\120\035\116\036\122\037\127" +
    "\040\124\041\126\042\130\043\131\044\133\064\uffac\001" +
    "\002\000\050\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f" +
    "\010\uff8f\017\uff8f\046\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\061\uff8f\062\uff8f\063\uff8f" +
    "\065\uff8f\001\002\000\024\011\072\012\074\013\070\014" +
    "\076\015\101\023\112\045\110\063\111\065\020\001\002" +
    "\000\004\016\uffb7\001\002\000\004\016\243\001\002\000" +
    "\044\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\017\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\055\uffb6\056" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\065\uffb6\001\002\000\044" +
    "\003\052\004\005\005\014\006\006\007\015\010\010\017" +
    "\uff8c\046\043\050\061\051\036\052\055\055\053\056\050" +
    "\061\065\062\060\063\041\065\020\001\002\000\004\017" +
    "\246\001\002\000\052\003\uffb5\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\017\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\065\uffb5\001\002\000\052\003\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\017\uffcb\046\uffcb" +
    "\047\251\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\061\uffcb\062\uffcb\063\uffcb\065\uffcb\001\002" +
    "\000\050\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\017\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\061\uffcc\062\uffcc\063\uffcc\065" +
    "\uffcc\001\002\000\004\016\253\001\002\000\050\003\uffb4" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\017\uffb4\046" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\061\uffb4\062\uffb4\063\uffb4\065\uffb4\001\002\000" +
    "\044\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\017\uffce\046\uffce\050\uffce\051\uffce\052\uffce\055\uffce\056" +
    "\uffce\061\uffce\062\uffce\063\uffce\065\uffce\001\002\000\044" +
    "\003\052\004\005\005\014\006\006\007\015\010\010\017" +
    "\uff8c\046\043\050\061\051\036\052\055\055\053\056\050" +
    "\061\065\062\060\063\041\065\020\001\002\000\004\017" +
    "\256\001\002\000\050\003\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\017\uffcd\046\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\061\uffcd\062\uffcd" +
    "\063\uffcd\065\uffcd\001\002\000\040\024\260\025\121\026" +
    "\136\027\115\030\125\031\123\032\120\035\116\036\122" +
    "\037\127\040\124\041\126\042\130\043\131\044\133\001" +
    "\002\000\004\016\261\001\002\000\044\003\uffba\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\017\uffba\046\uffba\050" +
    "\uffba\051\uffba\052\uffba\055\uffba\056\uffba\061\uffba\062\uffba" +
    "\063\uffba\065\uffba\001\002\000\044\003\052\004\005\005" +
    "\014\006\006\007\015\010\010\017\uff8c\046\043\050\061" +
    "\051\036\052\055\055\053\056\050\061\065\062\060\063" +
    "\041\065\020\001\002\000\004\017\264\001\002\000\052" +
    "\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\017" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\061\uffb9\062\uffb9\063\uffb9\065" +
    "\uffb9\001\002\000\052\003\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\017\uffcb\046\uffcb\047\251\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\065\uffcb\001\002\000\050\003\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\017\uffb8\046\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\065\uffb8\001\002\000\004" +
    "\022\276\001\002\000\024\011\072\012\074\013\070\014" +
    "\076\015\101\023\112\045\110\063\111\065\020\001\002" +
    "\000\026\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\272\023\uffdb\045\uffdb\063\uffdb\065\uffdb\001\002\000\020" +
    "\011\072\012\074\013\070\014\076\015\101\063\103\065" +
    "\020\001\002\000\004\017\274\001\002\000\004\064\uffd9" +
    "\001\002\000\044\024\uffd7\025\121\026\136\027\115\030" +
    "\125\031\123\032\120\035\116\036\122\037\127\040\124" +
    "\041\126\042\130\043\131\044\133\060\uffd7\064\uffd7\001" +
    "\002\000\024\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\023\uffda\045\uffda\063\uffda\065\uffda\001\002\000\010\017" +
    "\uff8e\053\uff8e\054\uff8e\001\002\000\020\002\uff85\003\uff85" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\001\002\000" +
    "\004\063\311\001\002\000\004\016\uff96\001\002\000\004" +
    "\016\304\001\002\000\044\003\uff95\004\uff95\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\017\uff95\046\uff95\050\uff95\051\uff95" +
    "\052\uff95\055\uff95\056\uff95\061\uff95\062\uff95\063\uff95\065" +
    "\uff95\001\002\000\044\003\052\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff8c\046\043\050\061\051\036\052" +
    "\055\055\053\056\050\061\065\062\060\063\041\065\020" +
    "\001\002\000\004\017\307\001\002\000\050\003\uff94\004" +
    "\uff94\005\uff94\006\uff94\007\uff94\010\uff94\017\uff94\046\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\061\uff94\062\uff94\063\uff94\065\uff94\001\002\000\004" +
    "\060\314\001\002\000\022\022\313\025\121\026\136\027" +
    "\115\030\125\031\123\032\120\060\uff9e\001\002\000\004" +
    "\060\uff9f\001\002\000\024\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\023\uffdb\045\uffdb\063\uffdb\065\uffdb\001\002" +
    "\000\024\011\072\012\074\013\070\014\076\015\101\023" +
    "\112\045\110\063\111\065\020\001\002\000\040\025\121" +
    "\026\136\027\115\030\125\031\123\032\120\035\116\036" +
    "\122\037\127\040\124\041\126\042\130\043\131\044\133" +
    "\060\316\001\002\000\004\063\317\001\002\000\024\022" +
    "\313\025\121\026\136\027\115\030\125\031\123\032\120" +
    "\033\144\034\142\001\002\000\004\024\uffa9\001\002\000" +
    "\004\024\323\001\002\000\004\024\uffaa\001\002\000\004" +
    "\016\324\001\002\000\044\003\uff98\004\uff98\005\uff98\006" +
    "\uff98\007\uff98\010\uff98\017\uff98\046\uff98\050\uff98\051\uff98" +
    "\052\uff98\055\uff98\056\uff98\061\uff98\062\uff98\063\uff98\065" +
    "\uff98\001\002\000\044\003\052\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff8c\046\043\050\061\051\036\052" +
    "\055\055\053\056\050\061\065\062\060\063\041\065\020" +
    "\001\002\000\004\017\327\001\002\000\050\003\uff97\004" +
    "\uff97\005\uff97\006\uff97\007\uff97\010\uff97\017\uff97\046\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056" +
    "\uff97\061\uff97\062\uff97\063\uff97\065\uff97\001\002\000\024" +
    "\011\072\012\074\013\070\014\076\015\101\023\112\045" +
    "\110\063\111\065\020\001\002\000\040\025\121\026\136" +
    "\027\115\030\125\031\123\032\120\035\116\036\122\037" +
    "\127\040\124\041\126\042\130\043\131\044\133\064\uffd8" +
    "\001\002\000\006\024\uffff\060\333\001\002\000\014\004" +
    "\005\005\014\006\006\007\015\010\010\001\002\000\004" +
    "\024\000\001\002\000\004\024\336\001\002\000\004\016" +
    "\337\001\002\000\044\003\052\004\005\005\014\006\006" +
    "\007\015\010\010\017\uff8c\046\043\050\061\051\036\052" +
    "\055\055\053\056\050\061\065\062\060\063\041\065\020" +
    "\001\002\000\004\017\341\001\002\000\020\002\uff83\003" +
    "\uff83\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\001\002" +
    "\000\004\002\uff88\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\012\002\012\046\011\047\006\050\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\012\046\341\047\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\074\022" +
    "\075\021\001\001\000\002\001\001\000\010\002\023\025" +
    "\024\026\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\002\056\010" +
    "\032\011\031\014\061\015\046\016\053\017\041\021\063" +
    "\023\033\024\065\035\055\037\045\041\044\042\043\043" +
    "\062\044\037\045\036\051\030\053\050\054\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\266\013\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\002\056\010\032\011" +
    "\031\014\061\015\046\016\053\017\041\021\063\023\033" +
    "\024\065\035\055\037\045\041\044\042\043\043\062\044" +
    "\037\045\276\051\030\053\050\054\034\001\001\000\010" +
    "\004\266\013\267\022\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\077\005\106\024" +
    "\065\032\112\034\235\051\076\053\104\054\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\077\005\101\006" +
    "\074\024\065\051\076\052\070\054\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\077\005\106" +
    "\024\065\032\112\034\105\051\076\053\104\054\072\001" +
    "\001\000\002\001\001\000\010\004\131\031\133\033\134" +
    "\001\001\000\002\001\001\000\022\003\077\005\106\024" +
    "\065\032\112\034\144\051\076\053\104\054\072\001\001" +
    "\000\004\022\142\001\001\000\022\003\077\005\106\024" +
    "\065\032\112\034\113\051\076\053\104\054\072\001\001" +
    "\000\002\001\001\000\010\004\131\031\133\033\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\077\005\106\024\065\032\112\034\140" +
    "\051\076\053\104\054\072\001\001\000\002\001\001\000" +
    "\022\003\077\005\106\024\065\032\112\034\137\051\076" +
    "\053\104\054\072\001\001\000\022\003\077\005\106\024" +
    "\065\032\112\034\136\051\076\053\104\054\072\001\001" +
    "\000\002\001\001\000\010\004\131\031\133\033\134\001" +
    "\001\000\010\004\131\031\133\033\134\001\001\000\010" +
    "\004\131\031\133\033\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\131\031\133" +
    "\033\134\001\001\000\002\001\001\000\016\003\077\005" +
    "\101\006\147\024\065\051\076\054\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\077\005\101\006" +
    "\152\024\065\051\076\054\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\077\005\106\024\065\032" +
    "\112\034\163\051\076\053\104\054\072\001\001\000\004" +
    "\067\156\001\001\000\002\001\001\000\004\070\160\001" +
    "\001\000\052\002\056\010\032\011\031\014\061\015\046" +
    "\016\053\017\041\021\063\023\033\024\065\035\055\037" +
    "\045\041\044\042\043\043\062\044\037\045\161\051\030" +
    "\053\050\054\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\131\031\133\033\134\001\001\000\002" +
    "\001\001\000\004\066\166\001\001\000\052\002\056\010" +
    "\032\011\031\014\061\015\046\016\053\017\041\021\063" +
    "\023\033\024\065\035\055\037\045\041\044\042\043\043" +
    "\062\044\037\045\167\051\030\053\050\054\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\077\005\101\006\204\024\065\051" +
    "\076\054\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\077\005\106\024\065\032\112\034\207\051" +
    "\076\053\104\054\072\001\001\000\010\004\131\031\133" +
    "\033\134\001\001\000\014\003\077\005\227\024\065\051" +
    "\076\054\072\001\001\000\004\064\212\001\001\000\002" +
    "\001\001\000\004\065\214\001\001\000\004\036\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\220" +
    "\001\001\000\002\001\001\000\052\002\056\010\032\011" +
    "\031\014\061\015\046\016\053\017\041\021\063\023\033" +
    "\024\065\035\055\037\045\041\044\042\043\043\062\044" +
    "\037\045\222\051\030\053\050\054\034\001\001\000\004" +
    "\036\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\002\056\010\032\011\031\014\061\015\046\016\053" +
    "\017\041\021\063\023\033\024\065\035\055\037\045\041" +
    "\044\042\043\043\062\044\037\045\226\051\030\053\050" +
    "\054\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\232\001\001\000\004\036\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\131\031\133\033\134\001\001\000\002\001\001\000\022" +
    "\003\077\005\106\024\065\032\112\034\256\051\076\053" +
    "\104\054\072\001\001\000\004\060\241\001\001\000\002" +
    "\001\001\000\004\061\243\001\001\000\052\002\056\010" +
    "\032\011\031\014\061\015\046\016\053\017\041\021\063" +
    "\023\033\024\065\035\055\037\045\041\044\042\043\043" +
    "\062\044\037\045\244\051\030\053\050\054\034\001\001" +
    "\000\002\001\001\000\004\062\246\001\001\000\006\027" +
    "\247\030\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\253\001\001\000\052\002" +
    "\056\010\032\011\031\014\061\015\046\016\053\017\041" +
    "\021\063\023\033\024\065\035\055\037\045\041\044\042" +
    "\043\043\062\044\037\045\254\051\030\053\050\054\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\131\031\133\033\134\001\001\000\002\001\001\000\004" +
    "\056\261\001\001\000\052\002\056\010\032\011\031\014" +
    "\061\015\046\016\053\017\041\021\063\023\033\024\065" +
    "\035\055\037\045\041\044\042\043\043\062\044\037\045" +
    "\262\051\030\053\050\054\034\001\001\000\002\001\001" +
    "\000\004\057\264\001\001\000\006\027\247\030\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\077" +
    "\005\106\024\065\032\112\034\274\051\076\053\104\054" +
    "\072\001\001\000\002\001\001\000\016\003\077\005\101" +
    "\006\272\024\065\051\076\054\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\131\031\133\033\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\307\016\311\001\001\000\004\072\302" +
    "\001\001\000\002\001\001\000\004\073\304\001\001\000" +
    "\052\002\056\010\032\011\031\014\061\015\046\016\053" +
    "\017\041\021\063\023\033\024\065\035\055\037\045\041" +
    "\044\042\043\043\062\044\037\045\305\051\030\053\050" +
    "\054\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\266\013\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\077\005\106\024" +
    "\065\032\112\034\314\051\076\053\104\054\072\001\001" +
    "\000\010\004\131\031\133\033\134\001\001\000\010\016" +
    "\317\040\320\053\321\001\001\000\010\004\266\013\267" +
    "\022\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\324\001\001" +
    "\000\052\002\056\010\032\011\031\014\061\015\046\016" +
    "\053\017\041\021\063\023\033\024\065\035\055\037\045" +
    "\041\044\042\043\043\062\044\037\045\325\051\030\053" +
    "\050\054\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\077\005\106\024\065\032\112\034\330\051" +
    "\076\053\104\054\072\001\001\000\010\004\131\031\133" +
    "\033\134\001\001\000\002\001\001\000\006\002\023\025" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\002\056\010\032\011\031\014\061\015" +
    "\046\016\053\017\041\021\063\023\033\024\065\035\055" +
    "\037\045\041\044\042\043\043\062\044\037\045\337\051" +
    "\030\053\050\054\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }

 
    private Lexer scanner;
    private SymbolTable symbolTable;
    private BufferedWriter syntaxFile;
    private BufferedWriter semanticFile;


    @SuppressWarnings("deprecation")
    public Parser(Lexer scanner) {
        this.scanner = scanner;
        this.symbolTable = new SymbolTable();
    }

    public void createSemanticWriter(String root) throws IOException {
        semanticFile = new BufferedWriter(new FileWriter(root));
    }


    public void createSyntaxWriter(String root) throws IOException {
        syntaxFile = new BufferedWriter(new FileWriter(root));
    }


    public void reportSyntaxError(int line, int column) throws IOException {
        if(syntaxFile != null) {
            syntaxFile.write("Error sintáctico recuperado en línea " + line + ", columna " + column + ".\n");
            syntaxFile.flush();
        }
    }


    public void reportSemanticError(String text) throws IOException {
        if(semanticFile != null) {
            semanticFile.write(text);
            semanticFile.flush();
        }
    }


    public void closeSyntaxWriter() throws IOException {
        if(syntaxFile != null) {
            syntaxFile.close();
        }
    }


    public void closeSemanticWriter() throws IOException {
        if(semanticFile != null) {
            semanticFile.close();
        }
    }


    @Override
    public void syntax_error(Symbol current) {
        try {
          reportSyntaxError(current.left, current.right);
        } catch (IOException e) {
          e.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // parametro_decl ::= tipo IDENTIFICADOR COMMA parametro_decl 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 symbolTable.addSymbol(idVar.toString(), t + ":" + idVar); RESULT = t + ":"  + param; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // parametro_decl ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 symbolTable.addSymbol(idVar.toString(), t + ":" + idVar); RESULT = t.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametro_decl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parametros_decl ::= parametro_decl 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parametros_decl ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sec_oper ::= dato_general COMMA sec_oper 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dato + ":" + seq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sec_oper ::= dato_general 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dato; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_oper",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros_llamada ::= sec_oper 
            {
              Object RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = seq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros_llamada ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // llamada_funcion ::= nombrefuncion PARENTESIS_APERTURA parametros_llamada PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    String funcName = f.toString();
    RESULT = symbolTable.getType(funcName);
    if(!symbolTable.verifyFunctionCall(funcName, params.toString())) {
        reportSemanticError("Error en el tipo de datos de una llamada a una función o existencia de una variable o función fuera del scope o cantidad incorrecta de parámetros.\n");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;
		int intVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object intVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "int"; /* intVar.toString(); */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "string"; /* strVar.toString(); */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int floatVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int floatVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object floatVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "float"; /* floatVar.toString(); */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int charVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object charVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = "char"; /* charVar.toString(); */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;
		int boolVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int boolVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object boolVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = "bool"; /* boolVar.toString(); */ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_aritmeticas ::= SUMA 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_aritmeticas ::= RESTA 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_aritmeticas ::= MULTIPLICACION 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_aritmeticas ::= DIVISION 
            {
              Object RESULT =null;
		  RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_aritmeticas ::= MODULO 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_aritmeticas ::= POTENCIA 
            {
              Object RESULT =null;
		  RESULT = "^"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dato_general ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = idVar.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dato_general ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dato_general ::= llamada_funcion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dato_general ::= acceso_arreglo 
            {
              Object RESULT =null;
		int arrNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arrName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = arrName; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dato_general",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_unaria ::= INCREMENTO 
            {
              Object RESULT =null;
		  RESULT = "++"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_unaria ::= DECREMENTO 
            {
              Object RESULT =null;
		  RESULT = "--"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_unaria",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_unaria ::= IDENTIFICADOR op_unaria 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
    String var = idVar.toString();
    RESULT = var; 
    if(!symbolTable.isInLocalScope(var)) {
        reportSemanticError("Error semántico, identificador fuera del scope.\n");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_unaria",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sec_var ::= IDENTIFICADOR COMMA sec_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sec_var ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sec_var",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // imprimir ::= PRINT PARENTESIS_APERTURA sec_oper PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // leer_var ::= READ PARENTESIS_APERTURA sec_var PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("leer_var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // acceso_arreglo ::= IDENTIFICADOR CORCHETE_APERTURA expr_logica_aritmetica CORCHETE_CIERRE 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    if(!symbolTable.isIndexInteger(e.toString())) {
        reportSemanticError("Error semántico, el tipo de dato de un índice debe ser entero.\n");
    }
    RESULT = idVar.toString(); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("acceso_arreglo",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // actualizacion ::= ASIGNACION 
            {
              Object RESULT =null;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // actualizacion ::= op_aritmeticas ASIGNACION 
            {
              Object RESULT =null;
		int arit_opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arit_opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arit_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = arit_op + "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actualizacion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion_arreglo ::= IDENTIFICADOR ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = idVar + ":" + seq;
    if(!symbolTable.verifyArrayDeclaration(symbolTable.getType(idVar.toString()), seq.toString())) { 
        reportSemanticError("Error en el tipo de datos de una asignación o hay una variable que está fuera del scope.\n");
    }


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_arreglo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion_indice ::= acceso_arreglo actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    String arrName = arr.toString();
    RESULT = arrName;                         
    if(!symbolTable.verifyType(symbolTable.getType(arrName), e.toString())) {
        reportSemanticError("Error en el tipo de datos de una asignación o hay una variable que está fuera del scope.\n");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_indice",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_variable ::= IDENTIFICADOR actualizacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = idVar + ":" + act + ":" + e.toString();
    if(!symbolTable.verifyType(symbolTable.getType(idVar.toString()), e.toString())) {
        reportSemanticError("Error en el tipo de datos de una asignación o hay una variable que está fuera del scope.\n");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion_compuesta ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion_compuesta ::= asignacion_arreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion_compuesta ::= asignacion_indice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_compuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_arreglo_op ::= ASIGNACION APERTURA_DE_BLOQUE sec_oper CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object seq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = seq.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_arreglo_op ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo_op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 String type = t.toString(); RESULT = type; symbolTable.addSymbol(idVar.toString(), type + ":" + idVar); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= tipo IDENTIFICADOR ASIGNACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idVar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		     
                    String type = t.toString();
                    RESULT = type; 
                    symbolTable.addSymbol(idVar.toString(), type + ":" + idVar); 
                    if(!symbolTable.verifyType(type, e.toString())) {
                        reportSemanticError("Error en el tipo de datos en la asignación de una declaración o existencia de una variable fuera del scope.\n");
                    }
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion ::= tipo acceso_arreglo declaracion_arreglo_op 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int arrNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arrName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arr_declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arr_declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arr_decl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
                    String text = t.toString();  
                    RESULT = text; 
                    symbolTable.addSymbol(arrName.toString(), text + ":" + arrName);  
                    if(!symbolTable.verifyType(t.toString(), arr_decl.toString())) {
                        reportSemanticError("Error en el tipo de datos en la asignación de una declaración o existencia de una variable fuera del scope.\n");
                    }
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$0 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_expr ::= ELSE APERTURA_DE_BLOQUE NT$0 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_op ::= else_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_op ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_op",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relacion ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relacion ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacion ::= IGUALDAD 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relacion ::= DIFERENTE 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparacion_operacion ::= expr_logica_aritmetica relacion expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(!symbolTable.validateOperation(e1.toString(), rel.toString(), e2.toString())) {
        reportSemanticError("Error semántico al operar o comparar tipos que no son compatibles o están fuera del scope.\n");
    }
    RESULT = e1.toString(); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparacion_operacion ::= expr_logica_aritmetica op_aritmeticas expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(!symbolTable.validateOperation(e1.toString(), op.toString(), e2.toString())) {
        reportSemanticError("Error semántico al operar o comparar tipos que no son compatibles o están fuera del scope.\n");
    }
    RESULT = e1.toString(); 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparacion_operacion ::= dato_general 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    String operando = dato.toString();
    RESULT = operando;
    if(!symbolTable.isDataType(operando) && !symbolTable.isInLocalScope(operando)) {
        reportSemanticError("Error semantico, variable fuera del scope.\n");
    }


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparacion_operacion ::= expr_unaria 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparacion_operacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_logica ::= CONJUNCION 
            {
              Object RESULT =null;
		 RESULT = "and"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_logica ::= DISYUNCION 
            {
              Object RESULT =null;
		 RESULT = "or"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_logica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_logica_aritmetica ::= NEGACION expr_logica_aritmetica 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = e.toString(); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_logica_aritmetica ::= expr_logica_aritmetica op_logica expr_logica_aritmetica 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    /* Aqui no verifico porque se trata de operaciones logicas como and, or o not */
    RESULT = e1.toString();  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_logica_aritmetica ::= comparacion_operacion 
            {
              Object RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cmp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = cmp; 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_logica_aritmetica ::= PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    RESULT = e.toString(); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_logica_aritmetica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$1 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_expr ::= IF PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$1 bloques CIERRE_DE_BLOQUE NT$2 else_op 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$3 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un if."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_expr ::= IF error NT$3 APERTURA_DE_BLOQUE NT$4 bloques CIERRE_DE_BLOQUE NT$5 else_op 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_expr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cases ::= CASE literal DOS_PUNTOS bloques cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cases ::= DEFAULT DOS_PUNTOS bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$6 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switch_expr ::= SWITCH PARENTESIS_APERTURA dato_general PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$6 cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$7 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de una switch."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // switch_expr ::= SWITCH error NT$7 APERTURA_DE_BLOQUE NT$8 cases CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // finfuncion ::= RETURN expr_logica_aritmetica 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    if(!symbolTable.verifyType(symbolTable.getType(dato.toString()), symbolTable.getActualFunction())) {
        reportSemanticError("Error semántico en el tipo de retorno de función.\n");
    } 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // finfuncion ::= RETURN 
            {
              Object RESULT =null;
		 reportSemanticError("Error semántico, el valor de retorno no coincide con el tipo de la función.\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("finfuncion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_simple ::= expr_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_simple ::= asignacion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_simple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_expr ::= expr_unaria 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_expr ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_expr ::= asignacion_compuesta 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_expr ::= leer_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_expr ::= imprimir 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // simple_expr ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // simple_expr ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // simple_expr ::= finfuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // simple_expr ::= error 
            {
              Object RESULT =null;
		 RESULT = "Error"; System.out.println("Error sintáctico en la definición de una expresión simple."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // inicializacion ::= asignacion_variable 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = asign; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // inicializacion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = i; 
    if(!symbolTable.isInLocalScope(i.toString())) {
        reportSemanticError("Error semántico, identificador fuera del scope.\n");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$9 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while_expr ::= WHILE PARENTESIS_APERTURA expr_logica_aritmetica PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$9 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$10 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un while."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while_expr ::= WHILE error NT$10 APERTURA_DE_BLOQUE NT$11 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_expr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$12 ::= 
            {
              Object RESULT =null;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_expr ::= FOR PARENTESIS_APERTURA inicializacion COMMA expr_logica_aritmetica COMMA op_simple PARENTESIS_CIERRE APERTURA_DE_BLOQUE NT$12 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$13 ::= 
            {
              Object RESULT =null;
 System.out.println("Error sintáctico en la definición de un for."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_expr ::= FOR error NT$13 APERTURA_DE_BLOQUE NT$14 bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 symbolTable.printScope(); symbolTable.exitScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_expr",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // bloque ::= if_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // bloque ::= while_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // bloque ::= for_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bloque ::= switch_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bloque ::= simple_expr END_EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bloques ::= bloque bloques 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // bloques ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error dentro de bloque, verificar definición."); RESULT = "Error"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // bloques ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloques",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // nombrefuncion ::= MAIN 
            {
              Object RESULT =null;
		 RESULT = "_verano_"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // nombrefuncion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nombreFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nombreFunc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nombreFunc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nombrefuncion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // funciones ::= funcion funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // funciones ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error fatal en la definición de una función, deteniendo parseo."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$15 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); symbolTable.setActualFunction(funcName.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA NT$15 parametros_decl PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
    symbolTable.addGlobalSymbol(funcName.toString(), t + ":" + funcName + ":" + params);
    symbolTable.printScope(); 
    symbolTable.exitScope();
    symbolTable.setActualFunction(""); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$16 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 symbolTable.addScope(); symbolTable.setActualFunction(funcName.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // funcion ::= tipo nombrefuncion PARENTESIS_APERTURA NT$16 error PARENTESIS_CIERRE APERTURA_DE_BLOQUE bloques CIERRE_DE_BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 
    System.out.println("Error en la definición de parámetros de una función."); 
    symbolTable.addGlobalSymbol(funcName.toString(), t + ":" + funcName + ":error"); 
    symbolTable.printScope(); 
    symbolTable.exitScope(); 
    symbolTable.setActualFunction("");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // programa ::= funciones 
            {
              Object RESULT =null;
		 symbolTable.printGlobalScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // programa ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
